---
description: リファクタリングルール
globs: 
alwaysApply: false
---
# リファクタリングルール

## リファクタリングの目的と方針

このプロジェクトでは以下の目的でリファクタリングを行っています：

1. 保守性の向上: コードの可読性、理解しやすさ、変更の容易さを向上
2. 信頼性の向上: バグの減少、エラーハンドリングの強化、システム安定性の向上
3. パフォーマンスの最適化: API応答、データベースアクセス、フロントエンド処理の効率化
4. テスト容易性の向上: 自動テストの導入しやすさ
5. 関心の分離: 各コンポーネントやモジュールの責務の明確化

## リファクタリング完了した項目

### フェーズ0: 基盤整備

- テストフレームワーク導入: Jest / React Testing Libraryを導入済み
- コード整形: ESLint / Prettier の設定を追加
- TypeScript移行: JavaScriptファイルからTypeScriptへの変換済み

## コーディング規約

リファクタリング作業では以下の規約に従ってください：

### 1. 型定義

- インターフェースやタイプエイリアスで適切な型定義を行う
- `any`型の使用を避け、具体的な型を指定する
- 関数のパラメータと戻り値に型アノテーションを付ける

```typescript
// 良い例
interface UserData {
  id: string;
  name: string;
  age?: number;
}

function getUser(id: string): Promise<UserData | null> {
  // ...
}

// 避けるべき例
function getUser(id): Promise<any> {
  // ...
}
```

### 2. エラーハンドリング

- try-catch ブロックで適切にエラーをキャッチする
- エラーメッセージは具体的に記述する
- エラーオブジェクトをそのままスローするのではなく、コンテキスト情報を付加する

```typescript
// 良い例
try {
  await doSomething();
} catch (error: unknown) {
  console.error('操作中にエラーが発生しました:', error);
  throw new CustomError(`操作に失敗しました: ${error instanceof Error ? error.message : String(error)}`);
}

// 避けるべき例
try {
  await doSomething();
} catch (error) {
  console.error(error);
  throw error;
}
```

### 3. 非同期処理

- async/await を一貫して使用する
- Promiseチェーンよりもasync/awaitを優先する
- エラーハンドリングを確実に行う

```typescript
// 良い例
async function fetchData() {
  try {
    const response = await fetch('/api/data');
    if (!response.ok) {
      throw new Error(`API error: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error('データ取得エラー:', error);
    throw error;
  }
}

// 避けるべき例
function fetchData() {
  return fetch('/api/data')
    .then(response => response.json())
    .then(data => data);
}
```

### 4. コンポーネント設計

- 単一責任の原則に従う
- 副作用はuseEffectフック内に閉じ込める
- コンポーネントのpropsに型定義を行う
- リアクティブな値に依存する関数はuseMemoまたはuseCallbackでメモ化する

```tsx
// 良い例
interface UserCardProps {
  username: string;
  task?: string;
  onExit?: () => void;
}

function UserCard({ username, task, onExit }: UserCardProps) {
  return (
    <div className="card">
      <h3>{username}</h3>
      {task && <p>{task}</p>}
      {onExit && <button onClick={onExit}>退室</button>}
    </div>
  );
}

// 避けるべき例
function UserCard(props) {
  return (
    <div className="card">
      <h3>{props.username}</h3>
      {props.task && <p>{props.task}</p>}
      {props.onExit && <button onClick={props.onExit}>退室</button>}
    </div>
  );
}
```

## 設計方針

### 1. 関心の分離

- API エンドポイントは単一の責任を持つ
- データ取得と処理は分離する
- UI コンポーネントはビジネスロジックを含まない

### 2. 状態管理

- ローカルステートはuseStateで管理
- 複数コンポーネント間の共有状態はReact Context APIやZustandで管理
- フォーム状態はReact Hook Formで管理

### 3. リアルタイム処理

- サーバからのプッシュ通知はSSEで処理
- クライアント側のストリーム購読は一か所に集約
- エラー時の再接続ロジックを実装 