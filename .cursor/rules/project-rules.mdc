---
description: 
globs: 
alwaysApply: true
---
# オンラインコワーキングスペース プロジェクトルール

## プロジェクト概要

### プロジェクト全体の目的

YouTubeのライブ配信コメントをリアルタイムで取得し、特定のコマンド（例: /30）に基づいてユーザーを指定された部屋に着席させるオンラインコワーキングスペースを構築します。

### 主要機能

- YouTubeライブコメントのリアルタイム取得
- コマンド検出（例: /30）による部屋割り当て
- BOTによるライブチャットへの反応メッセージ投稿
- 座席状態のリアルタイム表示

### 技術スタック

- フロントエンド: Next.js（Reactベース）
- バックエンド: Next.js API Routes（サーバーレス関数）
- リアルタイム通信: Server-Sent Events（SSE）
- ホスティング: Netlify

### プロジェクト前提条件

- ユーザー認証は不要
- Netlifyでのホスティングを前提としたサーバーレス環境対応

## 機能要件

### YouTube API連携

- YouTubeライブ配信のコメントをリアルタイムで取得（liveChatMessages.listを使用）
- BOTがライブチャットにメッセージを投稿（liveChatMessages.insertを使用）

### コマンド検出

- コメントから /30 のようなコマンドを検出し、部屋番号を抽出
- コマンドフォーマットのバリデーション

### 座席管理

- サーバーサイドで部屋ごとの座席状態を管理（外部データベース推奨）
- コマンドに基づいて座席を更新
- 部屋や座席の最大数の管理

### BOT応答機能

- 座席更新後、BOTがライブチャットにメッセージを投稿
- 例: 「ユーザーが部屋30に着席しました！」

### フロントエンド表示

- 部屋リストと座席状態の視覚的表示
- SSEを使用した座席状態のリアルタイム更新
- レスポンシブデザイン対応

## ファイル構成

### プロジェクトルート

- `.env.local`: 環境変数（YouTube APIキーなど）
- `netlify.toml`: Netlifyデプロイ設定
- `package.json`: 依存関係とスクリプト
- `next.config.js`: Next.jsカスタム設定

### ページ構成 (/pages)

- `index.js`: メイン画面（部屋リストと座席状態）
- `_app.js`: グローバルスタイルとレイアウト
- `_document.js`: HTMLドキュメントのカスタマイズ（必要に応じて）

### API エンドポイント (/pages/api)

- `comments.js`: ライブチャットコメントの取得
- `seats.js`: 座席状態の取得・更新
- `send-message.js`: BOTメッセージの投稿
- `sse.js`: SSEエンドポイント（座席状態のリアルタイム更新）

### コンポーネント (/components)

- `Room.js`: 部屋ごとの座席状態を表示
- `Seat.js`: 個々の座席（空席orユーザー名）
- `Chat.js`: YouTubeライブチャットの埋め込み（オプション）

### ユーティリティ (/lib)

- `youtube.js`: YouTube APIクライアントとAPI呼び出し
- `sse.js`: クライアントサイドのSSE接続管理

### スタイル (/styles)

- `globals.css`: グローバルスタイル
- `Room.module.css`: Room.js用のスタイル
- `Seat.module.css`: Seat.js用のスタイル

## 画面構成

### メイン画面 (index.js)

- ヘッダー: タイトル（例: "オンラインコワーキングスペース"）
- 部屋リスト: グリッド表示で各部屋の座席状態を示す
- ライブチャット（オプション）: YouTubeライブチャットを埋め込み

### 部屋コンポーネント (Room.js)

- 部屋番号の表示（例: "Room 30"）
- 座席リスト（Seat.jsを複数表示）
- 部屋の状態を視覚的に表現（利用状況など）

### 座席コンポーネント (Seat.js)

- 空席状態: "空席"と表示（グレー背景）
- 着席中状態: ユーザー名を表示（緑背景）
- 座席番号の表示

### デザイン要件

- レスポンシブデザイン
- 直感的な視覚表現
- モダンなUIデザイン
- シンプルで使いやすいインターフェース

## YouTube API セットアップと利用

### API セットアップ手順

1. Google Cloud Platformでプロジェクト作成
   - 新しいプロジェクトを作成（例: OnlineCoworkingSpace）

2. YouTube Data APIを有効化
   - APIライブラリから「YouTube Data API v3」を有効化

3. APIキー作成
   - 認証情報からAPIキーを生成し、コピー

4. OAuth 2.0設定（メッセージ投稿用）
   - OAuth同意画面を設定
   - クライアントIDとシークレットを取得

5. 環境変数に追加
   - `.env.local`にAPIキーやクライアント情報を設定

### 主要API機能

#### コメント取得 (liveChatMessages.list)

- ライブ配信IDを指定してコメントを取得
- ポーリング間隔: 5秒推奨（API制限に注意）
- 次のページトークンを使用した継続的な取得

#### メッセージ投稿 (liveChatMessages.insert)

- BOTとして反応メッセージを投稿
- OAuth 2.0認証が必要
- スコープ: `https://www.googleapis.com/auth/youtube.force-ssl`

### API利用上の注意点

- クォータ制限: YouTube APIの利用制限を考慮（1日あたりの単位数）
- ポーリング頻度: 適切な間隔設定（最低5秒以上推奨）
- 認証情報管理: APIキーは`.env.local`で管理し公開しない
- エラーハンドリング: API呼び出しのエラー処理を適切に実装

## 実装のポイントと注意点

### コメント取得と処理 (/api/comments.js)

- 5秒ごとにYouTube APIを呼び出し、最新コメントを取得
- コマンド（/30など）を検出し、座席を更新
- ページトークン管理による連続取得の実装
- エラーハンドリングと再試行ロジック

### 座席管理 (/api/seats.js)

- 外部データベース（例: Supabase, Redis）で座席状態を管理
- GET /api/seats: 座席状態を返す
- POST /api/seats: 座席状態を更新
- 競合状態の処理（同時更新対応）

### BOTメッセージ送信 (/api/send-message.js)

- 座席更新後、YouTube APIでBOTメッセージを投稿
- OAuth認証フローの実装
- メッセージフォーマットの一貫性確保

### SSEの実装 (/api/sse.js)

- サーバーサイド: text/event-streamで座席状態の更新を送信
- クライアントサイド: EventSourceで接続し、UIを更新
- 接続エラー時の再接続ロジック実装

### 開発上の注意点

- APIキーの管理: `.env.local`で管理し、クライアントに露出しない
- クォータ制限: YouTube APIの利用制限を考慮し、ポーリング頻度を調整
- ステート管理: Netlify Functionsはステートレスなため、外部データベースを使用
- リアルタイム性: SSEを活用し、クライアントに即座に更新を反映

### デプロイ時の考慮点

- Netlifyのサーバーレス関数の制限に注意
- 環境変数の適切な設定
- ビルド設定の最適化
- APIエンドポイントの正しいパス設定 