This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.cursor/
  rules/
    project-rules.mdc
    refactoring-rules.mdc
app/
  api/
    check-auto-exit/
      route.ts
    commands/
      route.ts
    extend-auto-exit/
      route.ts
    seats/
      route.ts
    sse/
      route.ts
    youtube/
      route.ts
    youtube-comments/
      route.ts
  globals.css
  layout.tsx
  page.tsx
components/
  ui/
    accordion.tsx
    alert-dialog.tsx
    alert.tsx
    aspect-ratio.tsx
    avatar.tsx
    badge.tsx
    breadcrumb.tsx
    button.tsx
    calendar.tsx
    card.tsx
    carousel.tsx
    chart.tsx
    checkbox.tsx
    collapsible.tsx
    command.tsx
    context-menu.tsx
    dialog.tsx
    drawer.tsx
    dropdown-menu.tsx
    form.tsx
    hover-card.tsx
    input-otp.tsx
    input.tsx
    label.tsx
    menubar.tsx
    navigation-menu.tsx
    pagination.tsx
    popover.tsx
    progress.tsx
    radio-group.tsx
    resizable.tsx
    scroll-area.tsx
    select.tsx
    separator.tsx
    sheet.tsx
    skeleton.tsx
    slider.tsx
    sonner.tsx
    switch.tsx
    table.tsx
    tabs.tsx
    textarea.tsx
    toast.tsx
    toaster.tsx
    toggle-group.tsx
    toggle.tsx
    tooltip.tsx
  AutoExitStatus.tsx
  BGMPlayer.tsx
  Console.tsx
  FocusRoom.tsx
  Header.tsx
  NotificationTicker.tsx
  PomodoroTimer.tsx
  Room.tsx
  Seat.tsx
  UserCard.tsx
  YoutubeComments.tsx
docs/
  auto-exit-implementation.md
  command-processing.md
  implementation-plan.md
  project-requiremet.md
  refactoring-strategy.md
  ui-implementation.md
  work-command-features.md
hooks/
  use-auto-exit.ts
  use-pomodoro.ts
  use-seat-data.ts
  use-sse.ts
  use-toast.ts
lib/
  autoExit.ts
  client-utils.ts
  messages.ts
  mongodb.ts
  sseUtils.ts
  store.ts
  types.ts
  utils.ts
  youtube.ts
scripts/
  create-indexes.ts
  init-db.ts
  poll-youtube-chat.ts
  test-mongodb.ts
  test-youtube-api.ts
.eslintrc.json
.gitignore
.prettierrc
components.json
implementation-tasks.md
jest.config.js
jest.setup.js
next.config.js
package.json
postcss.config.js
refactoring-tasks.md
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components/NotificationTicker.tsx">
import React, { useState, useEffect, useRef } from 'react';
import { AnimatePresence, motion } from 'framer-motion';

// お知らせデータの型
export interface Notification {
  id: string; // 一意のID
  message: string;
  timestamp: number; // ソートや識別に利用
  type?: 'info' | 'warning' | 'error'; // タイプに応じてスタイル変更も可能
}

interface NotificationTickerProps {
  notifications: Notification[]; // 親コンポーネントから渡される通知リスト (最新が先頭)
  intervalDuration?: number; // 表示切り替え間隔（ミリ秒）
  className?: string;
}

const DEFAULT_INTERVAL = 5000; // デフォルト5秒

const NotificationTicker: React.FC<NotificationTickerProps> = ({
  notifications,
  intervalDuration = DEFAULT_INTERVAL,
  className = '',
}) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isPaused, setIsPaused] = useState(false);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const prevNotificationsRef = useRef<Notification[]>([]);

  // notifications配列が更新されたらcurrentIndexを0に戻す
  useEffect(() => {
    // 最新の通知IDが変わったか、または通知が初めて追加された場合
    if (
        notifications.length > 0 &&
        prevNotificationsRef.current.length > 0 &&
        notifications[0].id !== prevNotificationsRef.current[0].id
       ) {
         console.log('[Ticker] New notification detected, resetting index.');
         setCurrentIndex(0);
         // インターバルを即座にリセットして新しい通知から開始
         startInterval();
    } else if (notifications.length === 1 && prevNotificationsRef.current.length === 0) {
        console.log('[Ticker] First notification added, setting index to 0.');
        setCurrentIndex(0);
    } else if (notifications.length > 0 && currentIndex >= notifications.length) {
        // 通知が削除されてインデックスが範囲外になった場合
        console.log('[Ticker] Index out of bounds due to notification removal, resetting index.');
        setCurrentIndex(0);
    }

    // 現在の通知リストを保存
    prevNotificationsRef.current = notifications;

  }, [notifications]); // notifications 配列自体が変更されたときのみ実行

  // 自動スクロール用のインターバル設定
  const startInterval = () => {
    if (intervalRef.current) clearInterval(intervalRef.current);
    if (!isPaused && notifications.length > 1) {
      intervalRef.current = setInterval(() => {
        setCurrentIndex(prev => (prev + 1) % notifications.length);
      }, intervalDuration);
    }
  };

  useEffect(() => {
    startInterval(); // コンポーネントマウント時、または依存関係変更時にインターバルを開始/再開

    return () => { // クリーンアップ関数
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [isPaused, notifications.length, intervalDuration]); // isPaused, notifications.length, intervalDuration が変わったら再設定

  // 現在表示する通知を取得
  const currentNotification = notifications[currentIndex];

  const handleMouseEnter = () => setIsPaused(true);
  const handleMouseLeave = () => setIsPaused(false);

  // タイプに応じたスタイルを返すヘルパー関数
  const getNotificationStyle = (type?: 'info' | 'warning' | 'error') => {
    switch (type) {
      case 'error': return 'text-red-300';
      case 'warning': return 'text-yellow-300';
      default: return 'text-white';
    }
  };

  return (
    <div
      className={`fixed top-16 left-0 right-0 bg-gray-800/95 text-white py-2 px-4 z-20 overflow-hidden h-10 flex items-center backdrop-blur-sm shadow-lg ${className}`} // ヘッダーの高さに応じて top を調整
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      role="region"
      aria-live="polite" // スクリーンリーダーに更新を通知
      aria-atomic="true"
    >
      {notifications.length === 0 ? (
        <span className="text-sm opacity-60 w-full text-center">お知らせはありません</span>
      ) : (
        <div className="w-full text-center relative h-full flex items-center justify-center">
          {/* AnimatePresenceで切り替えアニメーション */}
          <AnimatePresence initial={false} mode="wait">
            <motion.span
              key={currentNotification?.id ?? 'empty'} // key を変更して再レンダリングをトリガー
              initial={{ opacity: 0, y: 8 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -8 }}
              transition={{ duration: 0.4, ease: "easeInOut" }}
              className={`text-sm absolute inset-0 flex items-center justify-center truncate px-10 ${getNotificationStyle(currentNotification?.type)}`} // 中央揃え + Truncate
              aria-label={`お知らせ ${currentIndex + 1}/${notifications.length}`}
            >
              {currentNotification?.message}
            </motion.span>
          </AnimatePresence>

          {/* ページネーション表示 (オプション) */}
          {notifications.length > 1 && (
             <div className="absolute bottom-1 right-2 text-xs opacity-50 select-none">
               {currentIndex + 1} / {notifications.length}
             </div>
          )}
        </div>
      )}
    </div>
  );
};

export default NotificationTicker;
</file>

<file path=".cursor/rules/project-rules.mdc">
---
description: 
globs: 
alwaysApply: true
---
# オンラインコワーキングスペース プロジェクトルール

## プロジェクト概要

### プロジェクト全体の目的

YouTubeのライブ配信コメントをリアルタイムで取得し、特定のコマンド（例: /30）に基づいてユーザーを指定された部屋に着席させるオンラインコワーキングスペースを構築します。

### 主要機能

- YouTubeライブコメントのリアルタイム取得
- コマンド検出（例: /30）による部屋割り当て
- BOTによるライブチャットへの反応メッセージ投稿
- 座席状態のリアルタイム表示

### 技術スタック

- フロントエンド: Next.js（Reactベース）
- バックエンド: Next.js API Routes（サーバーレス関数）
- リアルタイム通信: Server-Sent Events（SSE）
- ホスティング: Netlify

### プロジェクト前提条件

- ユーザー認証は不要
- Netlifyでのホスティングを前提としたサーバーレス環境対応

## 機能要件

### YouTube API連携

- YouTubeライブ配信のコメントをリアルタイムで取得（liveChatMessages.listを使用）
- BOTがライブチャットにメッセージを投稿（liveChatMessages.insertを使用）

### コマンド検出

- コメントから /30 のようなコマンドを検出し、部屋番号を抽出
- コマンドフォーマットのバリデーション

### 座席管理

- サーバーサイドで部屋ごとの座席状態を管理（外部データベース推奨）
- コマンドに基づいて座席を更新
- 部屋や座席の最大数の管理

### BOT応答機能

- 座席更新後、BOTがライブチャットにメッセージを投稿
- 例: 「ユーザーが部屋30に着席しました！」

### フロントエンド表示

- 部屋リストと座席状態の視覚的表示
- SSEを使用した座席状態のリアルタイム更新
- レスポンシブデザイン対応

## ファイル構成

### プロジェクトルート

- `.env.local`: 環境変数（YouTube APIキーなど）
- `netlify.toml`: Netlifyデプロイ設定
- `package.json`: 依存関係とスクリプト
- `next.config.js`: Next.jsカスタム設定

### ページ構成 (/pages)

- `index.js`: メイン画面（部屋リストと座席状態）
- `_app.js`: グローバルスタイルとレイアウト
- `_document.js`: HTMLドキュメントのカスタマイズ（必要に応じて）

### API エンドポイント (/pages/api)

- `comments.js`: ライブチャットコメントの取得
- `seats.js`: 座席状態の取得・更新
- `send-message.js`: BOTメッセージの投稿
- `sse.js`: SSEエンドポイント（座席状態のリアルタイム更新）

### コンポーネント (/components)

- `Room.js`: 部屋ごとの座席状態を表示
- `Seat.js`: 個々の座席（空席orユーザー名）
- `Chat.js`: YouTubeライブチャットの埋め込み（オプション）

### ユーティリティ (/lib)

- `youtube.js`: YouTube APIクライアントとAPI呼び出し
- `sse.js`: クライアントサイドのSSE接続管理

### スタイル (/styles)

- `globals.css`: グローバルスタイル
- `Room.module.css`: Room.js用のスタイル
- `Seat.module.css`: Seat.js用のスタイル

## 画面構成

### メイン画面 (index.js)

- ヘッダー: タイトル（例: "オンラインコワーキングスペース"）
- 部屋リスト: グリッド表示で各部屋の座席状態を示す
- ライブチャット（オプション）: YouTubeライブチャットを埋め込み

### 部屋コンポーネント (Room.js)

- 部屋番号の表示（例: "Room 30"）
- 座席リスト（Seat.jsを複数表示）
- 部屋の状態を視覚的に表現（利用状況など）

### 座席コンポーネント (Seat.js)

- 空席状態: "空席"と表示（グレー背景）
- 着席中状態: ユーザー名を表示（緑背景）
- 座席番号の表示

### デザイン要件

- レスポンシブデザイン
- 直感的な視覚表現
- モダンなUIデザイン
- シンプルで使いやすいインターフェース

## YouTube API セットアップと利用

### API セットアップ手順

1. Google Cloud Platformでプロジェクト作成
   - 新しいプロジェクトを作成（例: OnlineCoworkingSpace）

2. YouTube Data APIを有効化
   - APIライブラリから「YouTube Data API v3」を有効化

3. APIキー作成
   - 認証情報からAPIキーを生成し、コピー

4. OAuth 2.0設定（メッセージ投稿用）
   - OAuth同意画面を設定
   - クライアントIDとシークレットを取得

5. 環境変数に追加
   - `.env.local`にAPIキーやクライアント情報を設定

### 主要API機能

#### コメント取得 (liveChatMessages.list)

- ライブ配信IDを指定してコメントを取得
- ポーリング間隔: 5秒推奨（API制限に注意）
- 次のページトークンを使用した継続的な取得

#### メッセージ投稿 (liveChatMessages.insert)

- BOTとして反応メッセージを投稿
- OAuth 2.0認証が必要
- スコープ: `https://www.googleapis.com/auth/youtube.force-ssl`

### API利用上の注意点

- クォータ制限: YouTube APIの利用制限を考慮（1日あたりの単位数）
- ポーリング頻度: 適切な間隔設定（最低5秒以上推奨）
- 認証情報管理: APIキーは`.env.local`で管理し公開しない
- エラーハンドリング: API呼び出しのエラー処理を適切に実装

## 実装のポイントと注意点

### コメント取得と処理 (/api/comments.js)

- 5秒ごとにYouTube APIを呼び出し、最新コメントを取得
- コマンド（/30など）を検出し、座席を更新
- ページトークン管理による連続取得の実装
- エラーハンドリングと再試行ロジック

### 座席管理 (/api/seats.js)

- 外部データベース（例: Supabase, Redis）で座席状態を管理
- GET /api/seats: 座席状態を返す
- POST /api/seats: 座席状態を更新
- 競合状態の処理（同時更新対応）

### BOTメッセージ送信 (/api/send-message.js)

- 座席更新後、YouTube APIでBOTメッセージを投稿
- OAuth認証フローの実装
- メッセージフォーマットの一貫性確保

### SSEの実装 (/api/sse.js)

- サーバーサイド: text/event-streamで座席状態の更新を送信
- クライアントサイド: EventSourceで接続し、UIを更新
- 接続エラー時の再接続ロジック実装

### 開発上の注意点

- APIキーの管理: `.env.local`で管理し、クライアントに露出しない
- クォータ制限: YouTube APIの利用制限を考慮し、ポーリング頻度を調整
- ステート管理: Netlify Functionsはステートレスなため、外部データベースを使用
- リアルタイム性: SSEを活用し、クライアントに即座に更新を反映

### デプロイ時の考慮点

- Netlifyのサーバーレス関数の制限に注意
- 環境変数の適切な設定
- ビルド設定の最適化
- APIエンドポイントの正しいパス設定
</file>

<file path=".cursor/rules/refactoring-rules.mdc">
---
description: リファクタリングルール
globs: 
alwaysApply: false
---
# リファクタリングルール

## リファクタリングの目的と方針

このプロジェクトでは以下の目的でリファクタリングを行っています：

1. 保守性の向上: コードの可読性、理解しやすさ、変更の容易さを向上
2. 信頼性の向上: バグの減少、エラーハンドリングの強化、システム安定性の向上
3. パフォーマンスの最適化: API応答、データベースアクセス、フロントエンド処理の効率化
4. テスト容易性の向上: 自動テストの導入しやすさ
5. 関心の分離: 各コンポーネントやモジュールの責務の明確化

## リファクタリング完了した項目

### フェーズ0: 基盤整備

- テストフレームワーク導入: Jest / React Testing Libraryを導入済み
- コード整形: ESLint / Prettier の設定を追加
- TypeScript移行: JavaScriptファイルからTypeScriptへの変換済み

## コーディング規約

リファクタリング作業では以下の規約に従ってください：

### 1. 型定義

- インターフェースやタイプエイリアスで適切な型定義を行う
- `any`型の使用を避け、具体的な型を指定する
- 関数のパラメータと戻り値に型アノテーションを付ける

```typescript
// 良い例
interface UserData {
  id: string;
  name: string;
  age?: number;
}

function getUser(id: string): Promise<UserData | null> {
  // ...
}

// 避けるべき例
function getUser(id): Promise<any> {
  // ...
}
```

### 2. エラーハンドリング

- try-catch ブロックで適切にエラーをキャッチする
- エラーメッセージは具体的に記述する
- エラーオブジェクトをそのままスローするのではなく、コンテキスト情報を付加する

```typescript
// 良い例
try {
  await doSomething();
} catch (error: unknown) {
  console.error('操作中にエラーが発生しました:', error);
  throw new CustomError(`操作に失敗しました: ${error instanceof Error ? error.message : String(error)}`);
}

// 避けるべき例
try {
  await doSomething();
} catch (error) {
  console.error(error);
  throw error;
}
```

### 3. 非同期処理

- async/await を一貫して使用する
- Promiseチェーンよりもasync/awaitを優先する
- エラーハンドリングを確実に行う

```typescript
// 良い例
async function fetchData() {
  try {
    const response = await fetch('/api/data');
    if (!response.ok) {
      throw new Error(`API error: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error('データ取得エラー:', error);
    throw error;
  }
}

// 避けるべき例
function fetchData() {
  return fetch('/api/data')
    .then(response => response.json())
    .then(data => data);
}
```

### 4. コンポーネント設計

- 単一責任の原則に従う
- 副作用はuseEffectフック内に閉じ込める
- コンポーネントのpropsに型定義を行う
- リアクティブな値に依存する関数はuseMemoまたはuseCallbackでメモ化する

```tsx
// 良い例
interface UserCardProps {
  username: string;
  task?: string;
  onExit?: () => void;
}

function UserCard({ username, task, onExit }: UserCardProps) {
  return (
    <div className="card">
      <h3>{username}</h3>
      {task && <p>{task}</p>}
      {onExit && <button onClick={onExit}>退室</button>}
    </div>
  );
}

// 避けるべき例
function UserCard(props) {
  return (
    <div className="card">
      <h3>{props.username}</h3>
      {props.task && <p>{props.task}</p>}
      {props.onExit && <button onClick={props.onExit}>退室</button>}
    </div>
  );
}
```

## 設計方針

### 1. 関心の分離

- API エンドポイントは単一の責任を持つ
- データ取得と処理は分離する
- UI コンポーネントはビジネスロジックを含まない

### 2. 状態管理

- ローカルステートはuseStateで管理
- 複数コンポーネント間の共有状態はReact Context APIやZustandで管理
- フォーム状態はReact Hook Formで管理

### 3. リアルタイム処理

- サーバからのプッシュ通知はSSEで処理
- クライアント側のストリーム購読は一か所に集約
- エラー時の再接続ロジックを実装
</file>

<file path="app/api/commands/route.ts">
import { NextResponse } from 'next/server';
import clientPromise from '@/lib/mongodb';
import { processCommand } from '@/lib/youtube';

interface CommandRequest {
  command: string;
  username: string;
  videoId?: string;
  liveChatId?: string;
  authorId?: string;
  taskName?: string;
}

export const dynamic = 'force-dynamic'; 

/**
 * YouTube コマンド実行APIエンドポイント
 * コメント取得ロジックから分離され、コマンド処理のみを担当
 */
export async function POST(request: Request) {
  console.log('[API] Command execution request received');
  
  try {
    // リクエストボディを解析
    const body: CommandRequest = await request.json();
    const { command, username, videoId, liveChatId, authorId, taskName } = body;
    
    if (!command || !username) {
      console.error('[API] Invalid command request: Missing required fields');
      return NextResponse.json(
        { error: 'Missing required fields: command and username are required' },
        { status: 400 }
      );
    }
    
    console.log(`[API] Processing command: "${command}" from user: ${username}`);
    
    // MongoDBに接続
    const client = await clientPromise;
    const db = client.db('coworking');
    
    // commandを処理
    const result = await processCommand(command, username, db, videoId, liveChatId, authorId, taskName);
    
    // 結果を返却
    return NextResponse.json({ 
      success: true, 
      result,
      message: `Command '${command}' from ${username} processed successfully` 
    });
    
  } catch (error) {
    console.error('[API] Error processing command:', error);
    
    return NextResponse.json(
      { error: 'Failed to process command', details: (error as Error).message },
      { status: 500 }
    );
  }
}
</file>

<file path="app/api/extend-auto-exit/route.ts">
import { NextResponse } from 'next/server';
import clientPromise from '@/lib/mongodb';

interface ExtendRequest {
  roomId: string;
  position: number;
  hours?: number;
}

/**
 * 指定された部屋・位置のユーザーの自動退室時間を延長する
 */
export async function POST(request: Request) {
  try {
    // リクエストボディを解析
    const body: ExtendRequest = await request.json();
    const { roomId, position, hours = 2 } = body;
    
    if (!roomId || position === undefined) {
      return NextResponse.json(
        { success: false, error: '部屋IDと座席位置が必要です' },
        { status: 400 }
      );
    }
    
    console.log(`[API] 自動退室時間延長: 部屋${roomId}、座席${position}を${hours}時間延長`);
    
    // MongoDBに接続
    const client = await clientPromise;
    const db = client.db('coworking');
    const seatsCollection = db.collection('seats');
    
    // 座席情報を取得
    const seat = await seatsCollection.findOne({
      room_id: roomId,
      position: position
    });
    
    if (!seat || !seat.username) {
      return NextResponse.json(
        { success: false, error: '指定された座席が見つからないか、ユーザーが着席していません' },
        { status: 404 }
      );
    }
    
    // 入室時間から自動退室時間を計算
    const now = new Date();
    const autoExitTime = new Date(now);
    autoExitTime.setHours(autoExitTime.getHours() + hours);
    
    // 自動退室時間を更新
    await seatsCollection.updateOne(
      { _id: seat._id },
      { $set: { autoExitScheduled: autoExitTime } }
    );
    
    console.log(`[API] ${seat.username}の自動退室を${autoExitTime.toISOString()}に延長しました`);
    
    return NextResponse.json({
      success: true,
      message: '自動退室時間を延長しました',
      username: seat.username,
      newTime: autoExitTime.toISOString(),
      formattedTime: autoExitTime.toLocaleString()
    });
    
  } catch (error) {
    console.error('[API] 自動退室時間延長中にエラーが発生:', error);
    
    return NextResponse.json(
      { success: false, error: '自動退室時間の延長に失敗しました', details: (error as Error).message },
      { status: 500 }
    );
  }
}
</file>

<file path="app/api/seats/route.ts">
import { NextResponse } from 'next/server';
import clientPromise from '@/lib/mongodb';

export async function POST(request: Request) {
  try {
    const { roomId, position, username } = await request.json();
    const client = await clientPromise;
    const db = client.db('coworking');

    const result = await db.collection('seats').findOneAndUpdate(
      { room_id: roomId, position: position },
      {
        $set: {
          username: username,
          timestamp: new Date()
        }
      },
      { returnDocument: 'after' }
    );

    if (!result.value) {
      return NextResponse.json(
        { error: 'Seat not found' },
        { status: 404 }
      );
    }

    return NextResponse.json(result.value);
  } catch (error) {
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
</file>

<file path="app/api/youtube/route.ts">
import { NextResponse } from 'next/server';
import clientPromise from '@/lib/mongodb';
import { processYouTubeComment } from '@/lib/youtube';

interface YouTubeCommentRequest {
  comment: string;
  authorName: string;
  authorId: string;
  commentId: string;
  videoId?: string;
  profileImageUrl: string;
}

export async function POST(request: Request) {
  console.log('[YouTube API] コメントリクエスト受信');
  
  try {
    // リクエストボディを解析
    const body: YouTubeCommentRequest = await request.json();
    const { comment, authorName, authorId, commentId, videoId, profileImageUrl } = body;
    
    if (!comment || !authorName || !authorId || !commentId) {
      console.error('[YouTube API] 無効なリクエスト: 必須フィールドが不足');
      return NextResponse.json(
        { error: '必須フィールドが不足しています: comment, authorName, authorId, commentId が必要です' },
        { status: 400 }
      );
    }
    
    console.log(`[YouTube API] コメント処理: "${comment}" from ${authorName} (ID: ${authorId})`);
    
    // MongoDBに接続
    const client = await clientPromise;
    const db = client.db('coworking');
    
    // コメントからコマンドを抽出して処理
    const result = await processYouTubeComment(comment, authorName, authorId, db, videoId, profileImageUrl);
    
    // コマンドでない場合は処理不要
    if (!result.success && result.message === 'コメントはコマンドではありません') {
      console.log('[YouTube API] コメントはコマンドではないため、処理をスキップします');
      return NextResponse.json({ 
        success: false, 
        ignored: true,
        message: 'コメントはコマンドではないため、処理されませんでした' 
      });
    }
    
    // エラーが発生した場合
    if (!result.success) {
      console.error('[YouTube API] コマンド処理エラー:', result.error);
      return NextResponse.json(
        { 
          success: false, 
          error: result.error || 'コマンド処理に失敗しました' 
        },
        { status: 500 }
      );
    }
    
    // 成功レスポンス
    return NextResponse.json({ 
      success: true, 
      result: result.result,
      message: `コメント: "${comment}" からのコマンドを正常に処理しました` 
    });
    
  } catch (error) {
    console.error('[YouTube API] リクエスト処理エラー:', error);
    
    return NextResponse.json(
      { error: 'コメント処理に失敗しました', details: (error as Error).message },
      { status: 500 }
    );
  }
}
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Focus Room Card Animation */
.card-slide-out {
  transform: translateX(-100%);
  opacity: 0;
}

.card-slide-in {
  transform: translateX(0);
  opacity: 1;
  animation: slideIn 0.8s ease-in-out;
}

@keyframes slideIn {
  0% {
    transform: translateX(100%);
    opacity: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}
</file>

<file path="app/layout.tsx">
import './globals.css';
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import Script from 'next/script'

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'CONNECT - ポモドーロタイマー',
  description: '集中と休憩を効率的に管理するポモドーロタイマーアプリ',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="ja">
      <body className={inter.className}>
        {children}
        
        <Script id="handle-hydration-error">
          {`
            window.addEventListener('load', () => {
              if (document.body.hasAttribute('data-feedly-mini')) {
                document.body.removeAttribute('data-feedly-mini');
              }
            });
          `}
        </Script>
      </body>
    </html>
  );
}
</file>

<file path="components/ui/accordion.tsx">
'use client';

import * as React from 'react';
import * as AccordionPrimitive from '@radix-ui/react-accordion';
import { ChevronDown } from 'lucide-react';

import { cn } from '@/lib/utils';

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn('border-b', className)}
    {...props}
  />
));
AccordionItem.displayName = 'AccordionItem';

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180',
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn('pb-4 pt-0', className)}>{children}</div>
  </AccordionPrimitive.Content>
));

AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };
</file>

<file path="components/ui/alert-dialog.tsx">
'use client';

import * as React from 'react';
import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';

import { cn } from '@/lib/utils';
import { buttonVariants } from '@/components/ui/button';

const AlertDialog = AlertDialogPrimitive.Root;

const AlertDialogTrigger = AlertDialogPrimitive.Trigger;

const AlertDialogPortal = AlertDialogPrimitive.Portal;

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
));
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-2 text-center sm:text-left',
      className
    )}
    {...props}
  />
);
AlertDialogHeader.displayName = 'AlertDialogHeader';

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
);
AlertDialogFooter.displayName = 'AlertDialogFooter';

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold', className)}
    {...props}
  />
));
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName;

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
));
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: 'outline' }),
      'mt-2 sm:mt-0',
      className
    )}
    {...props}
  />
));
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};
</file>

<file path="components/ui/alert.tsx">
import * as React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const alertVariants = cva(
  'relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground',
  {
    variants: {
      variant: {
        default: 'bg-background text-foreground',
        destructive:
          'border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
));
Alert.displayName = 'Alert';

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn('mb-1 font-medium leading-none tracking-tight', className)}
    {...props}
  />
));
AlertTitle.displayName = 'AlertTitle';

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('text-sm [&_p]:leading-relaxed', className)}
    {...props}
  />
));
AlertDescription.displayName = 'AlertDescription';

export { Alert, AlertTitle, AlertDescription };
</file>

<file path="components/ui/aspect-ratio.tsx">
'use client';

import * as AspectRatioPrimitive from '@radix-ui/react-aspect-ratio';

const AspectRatio = AspectRatioPrimitive.Root;

export { AspectRatio };
</file>

<file path="components/ui/avatar.tsx">
'use client';

import * as React from 'react';
import * as AvatarPrimitive from '@radix-ui/react-avatar';

import { cn } from '@/lib/utils';

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      'relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full',
      className
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn('aspect-square h-full w-full', className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      'flex h-full w-full items-center justify-center rounded-full bg-muted',
      className
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };
</file>

<file path="components/ui/badge.tsx">
import * as React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const badgeVariants = cva(
  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
  {
    variants: {
      variant: {
        default:
          'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',
        secondary:
          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
        destructive:
          'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',
        outline: 'text-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };
</file>

<file path="components/ui/breadcrumb.tsx">
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { ChevronRight, MoreHorizontal } from 'lucide-react';

import { cn } from '@/lib/utils';

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<'nav'> & {
    separator?: React.ReactNode;
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />);
Breadcrumb.displayName = 'Breadcrumb';

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<'ol'>
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      'flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5',
      className
    )}
    {...props}
  />
));
BreadcrumbList.displayName = 'BreadcrumbList';

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<'li'>
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn('inline-flex items-center gap-1.5', className)}
    {...props}
  />
));
BreadcrumbItem.displayName = 'BreadcrumbItem';

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<'a'> & {
    asChild?: boolean;
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : 'a';

  return (
    <Comp
      ref={ref}
      className={cn('transition-colors hover:text-foreground', className)}
      {...props}
    />
  );
});
BreadcrumbLink.displayName = 'BreadcrumbLink';

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<'span'>
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn('font-normal text-foreground', className)}
    {...props}
  />
));
BreadcrumbPage.displayName = 'BreadcrumbPage';

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<'li'>) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn('[&>svg]:size-3.5', className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
);
BreadcrumbSeparator.displayName = 'BreadcrumbSeparator';

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<'span'>) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn('flex h-9 w-9 items-center justify-center', className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
);
BreadcrumbEllipsis.displayName = 'BreadcrumbElipssis';

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
};
</file>

<file path="components/ui/button.tsx">
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const buttonVariants = cva(
  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive:
          'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline:
          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
        secondary:
          'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button';
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = 'Button';

export { Button, buttonVariants };
</file>

<file path="components/ui/calendar.tsx">
'use client';

import * as React from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { DayPicker } from 'react-day-picker';

import { cn } from '@/lib/utils';
import { buttonVariants } from '@/components/ui/button';

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn('p-3', className)}
      classNames={{
        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',
        month: 'space-y-4',
        caption: 'flex justify-center pt-1 relative items-center',
        caption_label: 'text-sm font-medium',
        nav: 'space-x-1 flex items-center',
        nav_button: cn(
          buttonVariants({ variant: 'outline' }),
          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'
        ),
        nav_button_previous: 'absolute left-1',
        nav_button_next: 'absolute right-1',
        table: 'w-full border-collapse space-y-1',
        head_row: 'flex',
        head_cell:
          'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',
        row: 'flex w-full mt-2',
        cell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',
        day: cn(
          buttonVariants({ variant: 'ghost' }),
          'h-9 w-9 p-0 font-normal aria-selected:opacity-100'
        ),
        day_range_end: 'day-range-end',
        day_selected:
          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',
        day_today: 'bg-accent text-accent-foreground',
        day_outside:
          'day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30',
        day_disabled: 'text-muted-foreground opacity-50',
        day_range_middle:
          'aria-selected:bg-accent aria-selected:text-accent-foreground',
        day_hidden: 'invisible',
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = 'Calendar';

export { Calendar };
</file>

<file path="components/ui/card.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'rounded-lg border bg-card text-card-foreground shadow-sm',
      className
    )}
    {...props}
  />
));
Card.displayName = 'Card';

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-1.5 p-6', className)}
    {...props}
  />
));
CardHeader.displayName = 'CardHeader';

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      'text-2xl font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
CardTitle.displayName = 'CardTitle';

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
CardDescription.displayName = 'CardDescription';

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
));
CardContent.displayName = 'CardContent';

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex items-center p-6 pt-0', className)}
    {...props}
  />
));
CardFooter.displayName = 'CardFooter';

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};
</file>

<file path="components/ui/carousel.tsx">
'use client';

import * as React from 'react';
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from 'embla-carousel-react';
import { ArrowLeft, ArrowRight } from 'lucide-react';

import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';

type CarouselApi = UseEmblaCarouselType[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;
type CarouselOptions = UseCarouselParameters[0];
type CarouselPlugin = UseCarouselParameters[1];

type CarouselProps = {
  opts?: CarouselOptions;
  plugins?: CarouselPlugin;
  orientation?: 'horizontal' | 'vertical';
  setApi?: (api: CarouselApi) => void;
};

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0];
  api: ReturnType<typeof useEmblaCarousel>[1];
  scrollPrev: () => void;
  scrollNext: () => void;
  canScrollPrev: boolean;
  canScrollNext: boolean;
} & CarouselProps;

const CarouselContext = React.createContext<CarouselContextProps | null>(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error('useCarousel must be used within a <Carousel />');
  }

  return context;
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = 'horizontal',
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === 'horizontal' ? 'x' : 'y',
      },
      plugins
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === 'ArrowLeft') {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === 'ArrowRight') {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext]
    );

    React.useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on('reInit', onSelect);
      api.on('select', onSelect);

      return () => {
        api?.off('select', onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn('relative', className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  }
);
Carousel.displayName = 'Carousel';

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel();

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          'flex',
          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',
          className
        )}
        {...props}
      />
    </div>
  );
});
CarouselContent.displayName = 'CarouselContent';

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel();

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        'min-w-0 shrink-0 grow-0 basis-full',
        orientation === 'horizontal' ? 'pl-4' : 'pt-4',
        className
      )}
      {...props}
    />
  );
});
CarouselItem.displayName = 'CarouselItem';

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        'absolute  h-8 w-8 rounded-full',
        orientation === 'horizontal'
          ? '-left-12 top-1/2 -translate-y-1/2'
          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  );
});
CarouselPrevious.displayName = 'CarouselPrevious';

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        'absolute h-8 w-8 rounded-full',
        orientation === 'horizontal'
          ? '-right-12 top-1/2 -translate-y-1/2'
          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  );
});
CarouselNext.displayName = 'CarouselNext';

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
};
</file>

<file path="components/ui/chart.tsx">
'use client';

import * as React from 'react';
import * as RechartsPrimitive from 'recharts';

import { cn } from '@/lib/utils';

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: '', dark: '.dark' } as const;

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode;
    icon?: React.ComponentType;
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  );
};

type ChartContextProps = {
  config: ChartConfig;
};

const ChartContext = React.createContext<ChartContextProps | null>(null);

function useChart() {
  const context = React.useContext(ChartContext);

  if (!context) {
    throw new Error('useChart must be used within a <ChartContainer />');
  }

  return context;
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> & {
    config: ChartConfig;
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >['children'];
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`;

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
});
ChartContainer.displayName = 'Chart';

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  );

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join('\n')}
}
`
          )
          .join('\n'),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<'div'> & {
      hideLabel?: boolean;
      hideIndicator?: boolean;
      indicator?: 'line' | 'dot' | 'dashed';
      nameKey?: string;
      labelKey?: string;
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = 'dot',
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart();

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || 'value'}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === 'string'
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label;

      if (labelFormatter) {
        return (
          <div className={cn('font-medium', labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        );
      }

      if (!value) {
        return null;
      }

      return <div className={cn('font-medium', labelClassName)}>{value}</div>;
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== 'dot';

    return (
      <div
        ref={ref}
        className={cn(
          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || 'value'}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;

            return (
              <div
                key={item.dataKey}
                className={cn(
                  'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',
                  indicator === 'dot' && 'items-center'
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            'shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]',
                            {
                              'h-2.5 w-2.5': indicator === 'dot',
                              'w-1': indicator === 'line',
                              'w-0 border-[1.5px] border-dashed bg-transparent':
                                indicator === 'dashed',
                              'my-0.5': nestLabel && indicator === 'dashed',
                            }
                          )}
                          style={
                            {
                              '--color-bg': indicatorColor,
                              '--color-border': indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        'flex flex-1 justify-between leading-none',
                        nestLabel ? 'items-end' : 'items-center'
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  }
);
ChartTooltipContent.displayName = 'ChartTooltip';

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> &
    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {
      hideIcon?: boolean;
      nameKey?: string;
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey },
    ref
  ) => {
    const { config } = useChart();

    if (!payload?.length) {
      return null;
    }

    return (
      <div
        ref={ref}
        className={cn(
          'flex items-center justify-center gap-4',
          verticalAlign === 'top' ? 'pb-3' : 'pt-3',
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || 'value'}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);

          return (
            <div
              key={item.value}
              className={cn(
                'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground'
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          );
        })}
      </div>
    );
  }
);
ChartLegendContent.displayName = 'ChartLegend';

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== 'object' || payload === null) {
    return undefined;
  }

  const payloadPayload =
    'payload' in payload &&
    typeof payload.payload === 'object' &&
    payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey: string = key;

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === 'string'
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string;
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string;
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config];
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
};
</file>

<file path="components/ui/checkbox.tsx">
'use client';

import * as React from 'react';
import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
import { Check } from 'lucide-react';

import { cn } from '@/lib/utils';

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn('flex items-center justify-center text-current')}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };
</file>

<file path="components/ui/collapsible.tsx">
'use client';

import * as CollapsiblePrimitive from '@radix-ui/react-collapsible';

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;

export { Collapsible, CollapsibleTrigger, CollapsibleContent };
</file>

<file path="components/ui/command.tsx">
'use client';

import * as React from 'react';
import { type DialogProps } from '@radix-ui/react-dialog';
import { Command as CommandPrimitive } from 'cmdk';
import { Search } from 'lucide-react';

import { cn } from '@/lib/utils';
import { Dialog, DialogContent } from '@/components/ui/dialog';

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',
      className
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        'flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
));

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',
      className
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 h-px bg-border', className)}
    {...props}
  />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        'ml-auto text-xs tracking-widest text-muted-foreground',
        className
      )}
      {...props}
    />
  );
};
CommandShortcut.displayName = 'CommandShortcut';

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};
</file>

<file path="components/ui/context-menu.tsx">
'use client';

import * as React from 'react';
import * as ContextMenuPrimitive from '@radix-ui/react-context-menu';
import { Check, ChevronRight, Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const ContextMenu = ContextMenuPrimitive.Root;

const ContextMenuTrigger = ContextMenuPrimitive.Trigger;

const ContextMenuGroup = ContextMenuPrimitive.Group;

const ContextMenuPortal = ContextMenuPrimitive.Portal;

const ContextMenuSub = ContextMenuPrimitive.Sub;

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
));
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
));
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
));
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName;

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
));
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold text-foreground',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-border', className)}
    {...props}
  />
));
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        'ml-auto text-xs tracking-widest text-muted-foreground',
        className
      )}
      {...props}
    />
  );
};
ContextMenuShortcut.displayName = 'ContextMenuShortcut';

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
};
</file>

<file path="components/ui/dialog.tsx">
'use client';

import * as React from 'react';
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-1.5 text-center sm:text-left',
      className
    )}
    {...props}
  />
);
DialogHeader.displayName = 'DialogHeader';

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
);
DialogFooter.displayName = 'DialogFooter';

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      'text-lg font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};
</file>

<file path="components/ui/drawer.tsx">
'use client';

import * as React from 'react';
import { Drawer as DrawerPrimitive } from 'vaul';

import { cn } from '@/lib/utils';

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
);
Drawer.displayName = 'Drawer';

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn('fixed inset-0 z-50 bg-black/80', className)}
    {...props}
  />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        'fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background',
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = 'DrawerContent';

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn('grid gap-1.5 p-4 text-center sm:text-left', className)}
    {...props}
  />
);
DrawerHeader.displayName = 'DrawerHeader';

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn('mt-auto flex flex-col gap-2 p-4', className)}
    {...props}
  />
);
DrawerFooter.displayName = 'DrawerFooter';

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      'text-lg font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};
</file>

<file path="components/ui/dropdown-menu.tsx">
'use client';

import * as React from 'react';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import { Check, ChevronRight, Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = 'DropdownMenuShortcut';

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};
</file>

<file path="components/ui/form.tsx">
'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { Slot } from '@radix-ui/react-slot';
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from 'react-hook-form';

import { cn } from '@/lib/utils';
import { Label } from '@/components/ui/label';

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error('useFormField should be used within <FormField>');
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
);

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn('space-y-2', className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = 'FormItem';

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && 'text-destructive', className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = 'FormLabel';

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = 'FormControl';

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn('text-sm text-muted-foreground', className)}
      {...props}
    />
  );
});
FormDescription.displayName = 'FormDescription';

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn('text-sm font-medium text-destructive', className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = 'FormMessage';

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
</file>

<file path="components/ui/hover-card.tsx">
'use client';

import * as React from 'react';
import * as HoverCardPrimitive from '@radix-ui/react-hover-card';

import { cn } from '@/lib/utils';

const HoverCard = HoverCardPrimitive.Root;

const HoverCardTrigger = HoverCardPrimitive.Trigger;

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      'z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName;

export { HoverCard, HoverCardTrigger, HoverCardContent };
</file>

<file path="components/ui/input-otp.tsx">
'use client';

import * as React from 'react';
import { OTPInput, OTPInputContext } from 'input-otp';
import { Dot } from 'lucide-react';

import { cn } from '@/lib/utils';

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      'flex items-center gap-2 has-[:disabled]:opacity-50',
      containerClassName
    )}
    className={cn('disabled:cursor-not-allowed', className)}
    {...props}
  />
));
InputOTP.displayName = 'InputOTP';

const InputOTPGroup = React.forwardRef<
  React.ElementRef<'div'>,
  React.ComponentPropsWithoutRef<'div'>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('flex items-center', className)} {...props} />
));
InputOTPGroup.displayName = 'InputOTPGroup';

const InputOTPSlot = React.forwardRef<
  React.ElementRef<'div'>,
  React.ComponentPropsWithoutRef<'div'> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext);
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];

  return (
    <div
      ref={ref}
      className={cn(
        'relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md',
        isActive && 'z-10 ring-2 ring-ring ring-offset-background',
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  );
});
InputOTPSlot.displayName = 'InputOTPSlot';

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<'div'>,
  React.ComponentPropsWithoutRef<'div'>
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
));
InputOTPSeparator.displayName = 'InputOTPSeparator';

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };
</file>

<file path="components/ui/input.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = 'Input';

export { Input };
</file>

<file path="components/ui/label.tsx">
'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const labelVariants = cva(
  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
</file>

<file path="components/ui/menubar.tsx">
'use client';

import * as React from 'react';
import * as MenubarPrimitive from '@radix-ui/react-menubar';
import { Check, ChevronRight, Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const MenubarMenu = MenubarPrimitive.Menu;

const MenubarGroup = MenubarPrimitive.Group;

const MenubarPortal = MenubarPrimitive.Portal;

const MenubarSub = MenubarPrimitive.Sub;

const MenubarRadioGroup = MenubarPrimitive.RadioGroup;

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      'flex h-10 items-center space-x-1 rounded-md border bg-background p-1',
      className
    )}
    {...props}
  />
));
Menubar.displayName = MenubarPrimitive.Root.displayName;

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',
      className
    )}
    {...props}
  />
));
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
));
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = 'start', alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          'z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
);
MenubarContent.displayName = MenubarPrimitive.Content.displayName;

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
MenubarItem.displayName = MenubarPrimitive.Item.displayName;

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
));
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
));
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
MenubarLabel.displayName = MenubarPrimitive.Label.displayName;

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        'ml-auto text-xs tracking-widest text-muted-foreground',
        className
      )}
      {...props}
    />
  );
};
MenubarShortcut.displayname = 'MenubarShortcut';

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
};
</file>

<file path="components/ui/navigation-menu.tsx">
import * as React from 'react';
import * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu';
import { cva } from 'class-variance-authority';
import { ChevronDown } from 'lucide-react';

import { cn } from '@/lib/utils';

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      'relative z-10 flex max-w-max flex-1 items-center justify-center',
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      'group flex flex-1 list-none items-center justify-center space-x-1',
      className
    )}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  'group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50'
);

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), 'group', className)}
    {...props}
  >
    {children}{' '}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      'left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ',
      className
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn('absolute left-0 top-full flex justify-center')}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        'origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]',
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName;

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      'top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in',
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
));
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName;

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
};
</file>

<file path="components/ui/pagination.tsx">
import * as React from 'react';
import { ChevronLeft, ChevronRight, MoreHorizontal } from 'lucide-react';

import { cn } from '@/lib/utils';
import { ButtonProps, buttonVariants } from '@/components/ui/button';

const Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn('mx-auto flex w-full justify-center', className)}
    {...props}
  />
);
Pagination.displayName = 'Pagination';

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<'ul'>
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn('flex flex-row items-center gap-1', className)}
    {...props}
  />
));
PaginationContent.displayName = 'PaginationContent';

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<'li'>
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn('', className)} {...props} />
));
PaginationItem.displayName = 'PaginationItem';

type PaginationLinkProps = {
  isActive?: boolean;
} & Pick<ButtonProps, 'size'> &
  React.ComponentProps<'a'>;

const PaginationLink = ({
  className,
  isActive,
  size = 'icon',
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? 'page' : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? 'outline' : 'ghost',
        size,
      }),
      className
    )}
    {...props}
  />
);
PaginationLink.displayName = 'PaginationLink';

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn('gap-1 pl-2.5', className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = 'PaginationPrevious';

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn('gap-1 pr-2.5', className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = 'PaginationNext';

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<'span'>) => (
  <span
    aria-hidden
    className={cn('flex h-9 w-9 items-center justify-center', className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = 'PaginationEllipsis';

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
};
</file>

<file path="components/ui/popover.tsx">
'use client';

import * as React from 'react';
import * as PopoverPrimitive from '@radix-ui/react-popover';

import { cn } from '@/lib/utils';

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent };
</file>

<file path="components/ui/progress.tsx">
'use client';

import * as React from 'react';
import * as ProgressPrimitive from '@radix-ui/react-progress';

import { cn } from '@/lib/utils';

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      'relative h-4 w-full overflow-hidden rounded-full bg-secondary',
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));
Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };
</file>

<file path="components/ui/radio-group.tsx">
'use client';

import * as React from 'react';
import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';
import { Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn('grid gap-2', className)}
      {...props}
      ref={ref}
    />
  );
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        'aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };
</file>

<file path="components/ui/resizable.tsx">
'use client';

import { GripVertical } from 'lucide-react';
import * as ResizablePrimitive from 'react-resizable-panels';

import { cn } from '@/lib/utils';

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      'flex h-full w-full data-[panel-group-direction=vertical]:flex-col',
      className
    )}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      'relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90',
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };
</file>

<file path="components/ui/scroll-area.tsx">
'use client';

import * as React from 'react';
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';

import { cn } from '@/lib/utils';

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn('relative overflow-hidden', className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = 'vertical', ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      'flex touch-none select-none transition-colors',
      orientation === 'vertical' &&
        'h-full w-2.5 border-l border-l-transparent p-[1px]',
      orientation === 'horizontal' &&
        'h-2.5 flex-col border-t border-t-transparent p-[1px]',
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };
</file>

<file path="components/ui/select.tsx">
'use client';

import * as React from 'react';
import * as SelectPrimitive from '@radix-ui/react-select';
import { Check, ChevronDown, ChevronUp } from 'lucide-react';

import { cn } from '@/lib/utils';

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = 'popper', ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        position === 'popper' &&
          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          'p-1',
          position === 'popper' &&
            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn('py-1.5 pl-8 pr-2 text-sm font-semibold', className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};
</file>

<file path="components/ui/separator.tsx">
'use client';

import * as React from 'react';
import * as SeparatorPrimitive from '@radix-ui/react-separator';

import { cn } from '@/lib/utils';

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = 'horizontal', decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        'shrink-0 bg-border',
        orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',
        className
      )}
      {...props}
    />
  )
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };
</file>

<file path="components/ui/sheet.tsx">
'use client';

import * as React from 'react';
import * as SheetPrimitive from '@radix-ui/react-dialog';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
  {
    variants: {
      side: {
        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',
        bottom:
          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',
        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',
        right:
          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',
      },
    },
    defaultVariants: {
      side: 'right',
    },
  }
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = 'right', className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-2 text-center sm:text-left',
      className
    )}
    {...props}
  />
);
SheetHeader.displayName = 'SheetHeader';

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
);
SheetFooter.displayName = 'SheetFooter';

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold text-foreground', className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};
</file>

<file path="components/ui/skeleton.tsx">
import { cn } from '@/lib/utils';

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn('animate-pulse rounded-md bg-muted', className)}
      {...props}
    />
  );
}

export { Skeleton };
</file>

<file path="components/ui/slider.tsx">
'use client';

import * as React from 'react';
import * as SliderPrimitive from '@radix-ui/react-slider';

import { cn } from '@/lib/utils';

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      'relative flex w-full touch-none select-none items-center',
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
));
Slider.displayName = SliderPrimitive.Root.displayName;

export { Slider };
</file>

<file path="components/ui/sonner.tsx">
'use client';

import { useTheme } from 'next-themes';
import { Toaster as Sonner } from 'sonner';

type ToasterProps = React.ComponentProps<typeof Sonner>;

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = 'system' } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps['theme']}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            'group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg',
          description: 'group-[.toast]:text-muted-foreground',
          actionButton:
            'group-[.toast]:bg-primary group-[.toast]:text-primary-foreground',
          cancelButton:
            'group-[.toast]:bg-muted group-[.toast]:text-muted-foreground',
        },
      }}
      {...props}
    />
  );
};

export { Toaster };
</file>

<file path="components/ui/switch.tsx">
'use client';

import * as React from 'react';
import * as SwitchPrimitives from '@radix-ui/react-switch';

import { cn } from '@/lib/utils';

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      'peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        'pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0'
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };
</file>

<file path="components/ui/table.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn('w-full caption-bottom text-sm', className)}
      {...props}
    />
  </div>
));
Table.displayName = 'Table';

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />
));
TableHeader.displayName = 'TableHeader';

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn('[&_tr:last-child]:border-0', className)}
    {...props}
  />
));
TableBody.displayName = 'TableBody';

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      'border-t bg-muted/50 font-medium [&>tr]:last:border-b-0',
      className
    )}
    {...props}
  />
));
TableFooter.displayName = 'TableFooter';

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',
      className
    )}
    {...props}
  />
));
TableRow.displayName = 'TableRow';

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',
      className
    )}
    {...props}
  />
));
TableHead.displayName = 'TableHead';

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', className)}
    {...props}
  />
));
TableCell.displayName = 'TableCell';

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn('mt-4 text-sm text-muted-foreground', className)}
    {...props}
  />
));
TableCaption.displayName = 'TableCaption';

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};
</file>

<file path="components/ui/tabs.tsx">
'use client';

import * as React from 'react';
import * as TabsPrimitive from '@radix-ui/react-tabs';

import { cn } from '@/lib/utils';

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      'inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground',
      className
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      'inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm',
      className
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      className
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };
</file>

<file path="components/ui/textarea.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';

export { Textarea };
</file>

<file path="components/ui/toast.tsx">
'use client';

import * as React from 'react';
import * as ToastPrimitives from '@radix-ui/react-toast';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',
      className
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',
  {
    variants: {
      variant: {
        default: 'border bg-background text-foreground',
        destructive:
          'destructive group border-destructive bg-destructive text-destructive-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',
      className
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn('text-sm font-semibold', className)}
    {...props}
  />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn('text-sm opacity-90', className)}
    {...props}
  />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};
</file>

<file path="components/ui/toaster.tsx">
'use client';

import { useToast } from '@/hooks/use-toast';
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from '@/components/ui/toast';

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}
</file>

<file path="components/ui/toggle-group.tsx">
'use client';

import * as React from 'react';
import * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group';
import { type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';
import { toggleVariants } from '@/components/ui/toggle';

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: 'default',
  variant: 'default',
});

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn('flex items-center justify-center gap-1', className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
));

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext);

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  );
});

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;

export { ToggleGroup, ToggleGroupItem };
</file>

<file path="components/ui/toggle.tsx">
'use client';

import * as React from 'react';
import * as TogglePrimitive from '@radix-ui/react-toggle';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const toggleVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground',
  {
    variants: {
      variant: {
        default: 'bg-transparent',
        outline:
          'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',
      },
      size: {
        default: 'h-10 px-3',
        sm: 'h-9 px-2.5',
        lg: 'h-11 px-5',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };
</file>

<file path="components/ui/tooltip.tsx">
'use client';

import * as React from 'react';
import * as TooltipPrimitive from '@radix-ui/react-tooltip';

import { cn } from '@/lib/utils';

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      'z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };
</file>

<file path="components/AutoExitStatus.tsx">
import { useState } from 'react';
import { useAutoExit } from '@/hooks/use-auto-exit';
import { Clock, AlertCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { toast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { formatCurrentDateTime } from '@/lib/client-utils';

interface AutoExitStatusProps {
  scheduledTime: string | null | undefined;
  seatId?: string;
  roomId?: string;
  position?: number;
  isCompact?: boolean;
  className?: string;
}

/**
 * 自動退室状態を表示するコンポーネント
 */
export default function AutoExitStatus({
  scheduledTime,
  seatId,
  roomId,
  position,
  isCompact = false,
  className = '',
}: AutoExitStatusProps) {
  const { status } = useAutoExit(scheduledTime);
  const [isUpdating, setIsUpdating] = useState(false);

  // 自動退室時間を延長する関数
  const extendAutoExit = async () => {
    if (!roomId || position === undefined) {
      toast({
        title: 'エラー',
        description: '座席情報が不完全です',
        variant: 'destructive',
      });
      return;
    }

    try {
      setIsUpdating(true);
      const response = await fetch('/api/extend-auto-exit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          roomId,
          position,
          hours: 2, // 追加で2時間延長
        }),
      });

      if (!response.ok) {
        throw new Error('自動退室時間の延長に失敗しました');
      }

      const data = await response.json();
      
      if (data.success) {
        toast({
          title: '自動退室時間を延長しました',
          description: `新しい退室時間: ${formatCurrentDateTime()}`,
        });
      } else {
        throw new Error(data.error || '自動退室時間の延長に失敗しました');
      }
    } catch (error) {
      console.error('自動退室延長エラー:', error);
      toast({
        title: 'エラー',
        description: error instanceof Error ? error.message : '不明なエラーが発生しました',
        variant: 'destructive',
      });
    } finally {
      setIsUpdating(false);
    }
  };

  // 自動退室が設定されていない場合
  if (!status.isScheduled) {
    return null;
  }

  // コンパクト表示モード（アイコンと時間のみ）
  if (isCompact) {
    return (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <div className={`flex items-center text-xs text-gray-500 ${className}`}>
              <Clock className="h-3 w-3 mr-1" />
              <span>{status.formattedTime}</span>
            </div>
          </TooltipTrigger>
          <TooltipContent>
            <p>自動退室まで: {status.formattedTime}</p>
            {status.scheduledTime && (
              <p className="text-xs">
                退室予定時刻: {status.scheduledTime.toLocaleString()}
              </p>
            )}
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    );
  }

  // 残り時間が少ない場合の警告表示
  const isWarning = status.remainingTime !== null && status.remainingTime <= 10 * 60 * 1000; // 10分以下
  const isDanger = status.remainingTime !== null && status.remainingTime <= 5 * 60 * 1000;   // 5分以下
  
  return (
    <div className={`bg-gray-50 p-3 rounded-md border ${isWarning ? 'border-amber-300' : 'border-gray-200'} ${className}`}>
      <div className="flex items-start justify-between">
        <div className="flex items-center">
          {isDanger ? (
            <AlertCircle className="h-4 w-4 text-red-500 mr-2" />
          ) : isWarning ? (
            <AlertCircle className="h-4 w-4 text-amber-500 mr-2" />
          ) : (
            <Clock className="h-4 w-4 text-blue-500 mr-2" />
          )}
          <div>
            <h4 className={`text-sm font-medium ${isDanger ? 'text-red-700' : isWarning ? 'text-amber-700' : 'text-gray-700'}`}>
              自動退室まで
            </h4>
            <p className={`text-lg font-bold ${isDanger ? 'text-red-600' : isWarning ? 'text-amber-600' : 'text-blue-600'}`}>
              {status.formattedTime}
            </p>
            {status.scheduledTime && (
              <p className="text-xs text-gray-500 mt-1">
                退室予定時刻: {status.scheduledTime.toLocaleString()}
              </p>
            )}
          </div>
        </div>
        
        {roomId && position !== undefined && (
          <Button
            size="sm"
            variant="outline"
            onClick={extendAutoExit}
            disabled={isUpdating}
            className="ml-2"
          >
            {isUpdating ? '更新中...' : '時間延長'}
          </Button>
        )}
      </div>
    </div>
  );
}
</file>

<file path="components/BGMPlayer.tsx">
import { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Volume2, VolumeX } from 'lucide-react';

interface BGMPlayerProps {
  title?: string;
}

export default function BGMPlayer({ title = 'Lofi Jazz - Relaxing Jazz Music' }: BGMPlayerProps) {
  const [isMuted, setIsMuted] = useState(false);
  
  return (
    <Card className="bg-[#f2f2f2]/95 shadow-md">
      <div className="p-4 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <span className="text-amber-500 text-xl">♪</span>
          <h2 className="font-medium">現在のBGM</h2>
        </div>
        
        <div className="flex items-center gap-4">
          <span className="text-gray-600 text-sm">{title}</span>
          <button 
            className="p-1.5 border border-gray-300 rounded-full hover:bg-gray-100 transition-colors"
            onClick={() => setIsMuted(!isMuted)}
          >
            {isMuted ? <VolumeX className="h-4 w-4 text-gray-500" /> : <Volume2 className="h-4 w-4 text-gray-500" />}
          </button>
        </div>
      </div>
    </Card>
  );
}
</file>

<file path="components/Console.tsx">
"use client";

import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { Progress } from "@/components/ui/progress";
import { Play, Pause, RotateCcw } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { usePomodoro } from "@/hooks/use-pomodoro";

export default function Console() {
  const [mounted, setMounted] = useState(false);
  const [initialized, setInitialized] = useState(false);
  const { toast } = useToast();
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  // ポモドーロタイマーの状態とアクション
  const {
    mode,
    formattedTimeLeft,
    isActive,
    progress,
    currentMode,
    workSessionsCompleted,
    startTimer,
    pauseTimer,
    resetTimer,
    switchMode
  } = usePomodoro();

  // コンソールメッセージ
  const [messages, setMessages] = useState<Array<{ 
    type: string; 
    content: string; 
    timestamp: string;
  }>>([
    { 
      type: 'system', 
      content: 'システムを初期化中...',
      timestamp: new Date().toISOString()
    }
  ]);

  useEffect(() => {
    // マウント状態を設定
    setMounted(true);
    
    // 初期化メッセージを追加
    setTimeout(() => {
      addMessage('system', 'CONNECTシステムへようこそ。');
      setInitialized(true);
      
      // ポモドーロの状態に応じたメッセージを表示
      if (isActive) {
        addMessage('timer', `ポモドーロタイマー実行中：${currentMode.name}モード（${formattedTimeLeft}）`);
      } else {
        addMessage('timer', `ポモドーロタイマー待機中：${currentMode.name}モードで開始する準備ができています。`);
      }
    }, 1500);
  }, []);

  // タイマーの状態が変わったときのメッセージ
  useEffect(() => {
    if (!mounted || !initialized) return;
    
    if (mode === 'WORK') {
      addMessage('timer', '作業モードに切り替わりました。集中して取り組みましょう。');
    } else if (mode === 'BREAK') {
      addMessage('timer', '休憩モードに切り替わりました。短い休憩で気分転換しましょう。');
    } else if (mode === 'LONG_BREAK') {
      addMessage('timer', '長い休憩モードに切り替わりました。十分に休息をとりましょう。');
    }
  }, [mode, mounted, initialized]);

  // メッセージ追加関数
  const addMessage = (type: string, content: string) => {
    setMessages(prev => [
      ...prev, 
      { 
        type, 
        content, 
        timestamp: new Date().toISOString() 
      }
    ]);
    
    // 自動スクロール
    setTimeout(() => {
      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, 100);
  };

  // タイマーコントロール関数
  const handleTimerControl = () => {
    if (isActive) {
      pauseTimer();
      addMessage('timer', 'ポモドーロタイマーを一時停止しました。');
    } else {
      startTimer();
      addMessage('timer', `ポモドーロタイマーを開始しました：${currentMode.name}モード（${formattedTimeLeft}）`);
    }
  };

  // タイマーリセット関数
  const handleTimerReset = () => {
    resetTimer();
    addMessage('timer', 'ポモドーロタイマーをリセットしました。');
  };

  // モード切替関数
  const handleModeSwitch = (newMode: 'WORK' | 'BREAK' | 'LONG_BREAK') => {
    switchMode(newMode);
    addMessage('timer', `タイマーモードを${newMode === 'WORK' ? '作業' : newMode === 'BREAK' ? '休憩' : '長い休憩'}に切り替えました。`);
  };

  return (
    <div className="w-full h-full flex flex-col">
      {/* タイマーコントロール */}
      <div className="border-b p-4 flex items-center justify-between bg-background/80 backdrop-blur-sm">
        <div className="flex-1">
          <div className="flex items-center gap-2">
            <div className={`${currentMode.bgColor} w-3 h-3 rounded-full`}></div>
            <h3 className="font-medium">
              {currentMode.name}モード：{formattedTimeLeft}
            </h3>
            {workSessionsCompleted > 0 && (
              <span className="text-xs text-muted-foreground">
                完了セッション：{workSessionsCompleted}
              </span>
            )}
          </div>
          <Progress
            value={progress}
            className={`h-1.5 mt-2 ${currentMode.bgColor}`}
          />
        </div>
        <div className="flex gap-2 ml-4">
          <Button
            variant="outline"
            size="icon"
            onClick={handleTimerControl}
            title={isActive ? "一時停止" : "開始"}
          >
            {isActive ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
          </Button>
          <Button
            variant="outline"
            size="icon"
            onClick={handleTimerReset}
            title="リセット"
          >
            <RotateCcw className="h-4 w-4" />
          </Button>
        </div>
      </div>

      {/* コンソール出力エリア */}
      <div className="flex-1 overflow-y-auto p-4 bg-background/40 font-mono text-sm">
        {!mounted ? (
          <>
            <Skeleton className="h-4 w-3/4 mb-2" />
            <Skeleton className="h-4 w-1/2 mb-2" />
            <Skeleton className="h-4 w-2/3" />
          </>
        ) : (
          <>
            {messages.map((msg, index) => (
              <div 
                key={index} 
                className={`mb-2 ${
                  msg.type === 'error' ? 'text-red-500' : 
                  msg.type === 'system' ? 'text-blue-500' : 
                  msg.type === 'timer' ? 'text-green-500' : 
                  'text-foreground'
                }`}
              >
                <span className="opacity-70">
                  [{new Date(msg.timestamp).toLocaleTimeString()}]
                </span>{' '}
                {msg.content}
              </div>
            ))}
            <div ref={messagesEndRef} />
          </>
        )}
      </div>
    </div>
  );
}
</file>

<file path="components/FocusRoom.tsx">
import { useEffect, useState, useRef } from "react";
import { Badge } from "@/components/ui/badge";
import { VolumeX } from "lucide-react";
import UserCard from "@/components/UserCard";

interface Seat {
  id: string;
  username: string | null;
  task?: string | null;
  enterTime?: Date | string | null;
  autoExitScheduled?: Date | string | null;
  profileImageUrl?: string | null;
  timestamp: Date | string;
}

interface FocusRoomProps {
  seats: Seat[];
  roomId: string;
}

export default function FocusRoom({ seats, roomId }: FocusRoomProps) {
  const [currentUserPage, setCurrentUserPage] = useState(0);
  const [userAnimationState, setUserAnimationState] = useState("idle");
  const [nextUserPageToShow, setNextUserPageToShow] = useState(1);
  const userSliderRef = useRef(null);
  
  const USERS_PER_PAGE = 8; // 2x4グリッドの場合
  const activeSeats = seats.filter(seat => seat.username !== null);
  const TOTAL_USER_PAGES = Math.ceil(activeSeats.length / USERS_PER_PAGE) || 1;
  
  useEffect(() => {
    // 5秒ごとに自動でページを切り替え
    const pageInterval = setInterval(() => {
      if (TOTAL_USER_PAGES <= 1) return; // 1ページ以下の場合は切り替えない
      
      const nextPage = (currentUserPage + 1) % TOTAL_USER_PAGES;
      setNextUserPageToShow(nextPage);
      setUserAnimationState("sliding-out");
      
      // アニメーション処理
      setTimeout(() => {
        setCurrentUserPage(nextPage);
        setUserAnimationState("sliding-in");
        setTimeout(() => setUserAnimationState("idle"), 800);
      }, 800);
    }, 5000);
    
    return () => clearInterval(pageInterval);
  }, [currentUserPage, TOTAL_USER_PAGES]);
  
  // 現在のページのユーザーを取得
  const getCurrentPageUsers = () => {
    const startIndex = currentUserPage * USERS_PER_PAGE;
    return activeSeats.slice(startIndex, startIndex + USERS_PER_PAGE);
  };
  
  // 次のページのユーザーを取得
  const getNextPageUsers = () => {
    const startIndex = nextUserPageToShow * USERS_PER_PAGE;
    return activeSeats.slice(startIndex, startIndex + USERS_PER_PAGE);
  };

  return (
    <div className="bg-[#f2f2f2]/95 rounded-lg shadow-md overflow-hidden mb-4">
      <div className="p-4 flex justify-between items-center border-b border-gray-200">
        <div className="flex items-center gap-2">
          <VolumeX className="h-5 w-5 text-red-500" />
          <h3 className="text-lg font-medium">フォーカスルーム</h3>
        </div>
        <div className="flex items-center gap-2">
          <Badge className="bg-red-500 text-white text-xs px-2 py-0.5">会話不可</Badge>
          <Badge variant="outline" className="bg-white text-gray-600 border-gray-300">{activeSeats.length}人</Badge>
        </div>
      </div>

      <div className="relative min-h-[400px]" ref={userSliderRef}>
        <div className="p-4">
          <div
            className={`grid grid-cols-2 md:grid-cols-4 gap-4 transition-all duration-800 ease-in-out ${
              userAnimationState === "sliding-out"
                ? "card-slide-out"
                : userAnimationState === "sliding-in"
                  ? "card-slide-in"
                  : ""
            }`}
          >
            {userAnimationState === "sliding-in"
              ? getNextPageUsers().map(seat => (
                  <UserCard 
                    key={seat.id} 
                    user={{
                      id: seat.id,
                      name: seat.username || '',
                      task: seat.task,
                      enterTime: seat.enterTime,
                      profileImageUrl: seat.profileImageUrl
                    }} 
                  />
                ))
              : getCurrentPageUsers().map(seat => (
                  <UserCard 
                    key={seat.id} 
                    user={{
                      id: seat.id,
                      name: seat.username || '',
                      task: seat.task,
                      enterTime: seat.enterTime,
                      profileImageUrl: seat.profileImageUrl
                    }} 
                  />
                ))
            }
          </div>
        </div>
      </div>

      <div className="px-4 py-2 bg-gray-100 border-t border-gray-200 flex justify-center">
        <div className="flex gap-2">
          {Array.from({ length: TOTAL_USER_PAGES }).map((_, index) => (
            <div
              key={index}
              className={`w-2 h-2 rounded-full ${currentUserPage === index ? "bg-amber-500" : "bg-gray-300"}`}
            />
          ))}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="components/Room.tsx">
"use client";

import { Users } from "lucide-react";
import Seat from "./Seat";

interface Seat {
  id: string;
  username: string | null;
  task?: string | null;
  enterTime?: Date | string | null;
  autoExitScheduled?: Date | string | null;
  timestamp: Date | string | number;
}

interface RoomProps {
  room: {
    id: string;
    seats: Seat[];
    type?: 'focus' | 'chat';
  };
}

export default function Room({ room }: RoomProps) {
  return (
    <div>
      <div className="flex items-center gap-2 mb-4">
        <Users className="h-5 w-5" />
        <h2 className="text-xl font-semibold">Room {room.id}</h2>
      </div>
      
      <div className="grid grid-cols-2 gap-4">
        {room.seats.map((seat) => (
          <Seat key={seat.id} seat={seat} />
        ))}
      </div>
    </div>
  );
}
</file>

<file path="components/Seat.tsx">
"use client";

import { User } from "lucide-react";
import { calculateElapsedTime, getElapsedTimeStyle } from "@/lib/utils";

interface SeatProps {
  seat: {
    id: string;
    username: string | null;
    task?: string | null;
    enterTime?: Date | string | null;
    autoExitScheduled?: Date | string | null;
    timestamp: Date | string | number;
  };
}

export default function Seat({ seat }: SeatProps) {
  const isOccupied = Boolean(seat.username);
  const elapsedTime = seat.enterTime ? calculateElapsedTime(seat.enterTime) : "";
  const timeStyle = seat.enterTime ? getElapsedTimeStyle(seat.enterTime) : "";
  
  return (
    <div
      className={`
        p-4 rounded-lg
        ${isOccupied ? 'bg-primary/10' : 'bg-muted'}
      `}
    >
      <div className="flex items-center gap-3 mb-1">
        <User className={`h-5 w-5 ${isOccupied ? 'text-primary' : 'text-muted-foreground'}`} />
        <span className={isOccupied ? 'text-primary font-medium' : 'text-muted-foreground'}>
          {seat.username || 'Empty'}
        </span>
      </div>
      
      {isOccupied && (
        <div className="mt-1 pl-8">
          {seat.task && <p className="text-sm text-muted-foreground truncate">{seat.task}</p>}
          {elapsedTime && <p className={`text-sm font-medium ${timeStyle}`}>経過: {elapsedTime}</p>}
        </div>
      )}
    </div>
  );
}
</file>

<file path="components/YoutubeComments.tsx">
import { useState, useEffect } from 'react';
import Image from 'next/image';
import { Card } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';

interface Comment {
  id: string;
  author: string;
  profileImageUrl: string;
  text: string;
  publishedAt: string;
}

export default function YoutubeComments() {
  const [comments, setComments] = useState<Comment[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // ポーリング間隔（ミリ秒）
  const [pollingInterval, setPollingInterval] = useState(10000);

  useEffect(() => {
    // コメントをポーリングする関数
    const fetchComments = async () => {
      try {
        setLoading(true);
        const response = await fetch('/api/youtube-comments');
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'コメントの取得に失敗しました');
        }
        
        const data = await response.json();
        setComments(data.comments);
        setPollingInterval(data.pollingIntervalMillis || 5000);
        setError(null);
      } catch (err) {
        setError(err instanceof Error ? err.message : '未知のエラーが発生しました');
        console.error('コメント取得エラー:', err);
      } finally {
        setLoading(false);
      }
    };

    // 初回の取得
    fetchComments();

    // ポーリングの設定
    const intervalId = setInterval(fetchComments, pollingInterval);

    // クリーンアップ
    return () => {
      clearInterval(intervalId);
    };
  }, [pollingInterval]); // ポーリング間隔が変わったら再設定

  // 日付をフォーマットする関数
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('ja-JP');
  };

  return (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold mb-4">YouTube ライブコメント</h2>
      
      {loading && comments.length === 0 && (
        <p className="text-muted-foreground">コメントを読み込み中...</p>
      )}
      
      {error && (
        <div className="bg-destructive/10 text-destructive p-4 rounded-md">
          <p>{error}</p>
        </div>
      )}
      
      <div className="space-y-2">
        {comments.map(comment => (
          <Card key={comment.id} className="p-4">
            <div className="flex items-start gap-3">
              <Avatar className="h-10 w-10">
                <AvatarImage src={comment.profileImageUrl} alt={comment.author} />
                <AvatarFallback>{comment.author.slice(0, 2)}</AvatarFallback>
              </Avatar>
              <div className="flex-1">
                <div className="flex items-center gap-2">
                  <h3 className="font-semibold">{comment.author}</h3>
                  <span className="text-xs text-muted-foreground">
                    {comment.publishedAt && formatDate(comment.publishedAt)}
                  </span>
                </div>
                <p className="mt-1">{comment.text}</p>
              </div>
            </div>
          </Card>
        ))}
        
        {comments.length === 0 && !loading && !error && (
          <p className="text-muted-foreground">コメントはまだありません</p>
        )}
      </div>
    </div>
  );
}
</file>

<file path="docs/auto-exit-implementation.md">
# 自動退室機能の実装

## 概要

ユーザーが入室してから2時間経過すると、自動的に退室処理を行う機能を実装します。この機能により、ユーザーが明示的に退室コマンドを実行し忘れた場合でも、座席が永久に占有されることを防ぎます。

## 技術的アプローチ

自動退室機能を実装するには、以下の2つの主要なアプローチがあります：

### 1. サーバーサイドでのクロンジョブ的アプローチ

サーバーレス環境（Netlify Functions）では永続的なバックグラウンドプロセスを実行できないため、定期的なAPIコールを利用します。

#### 実装方法

1. **定期的なAPIエンドポイントの呼び出し**
   - 外部サービス（例：UptimeRobot）を使用して、数分おきに特定のエンドポイントを呼び出す
   - または、フロントエンドからの定期的な呼び出しをスケジュールする

2. **専用の退室チェックAPIエンドポイント**
   ```typescript
   // app/api/check-auto-exit/route.ts
   export async function GET() {
     const client = await clientPromise;
     const db = client.db('coworking');
     
     // 現在時刻を取得
     const currentTime = new Date();
     
     // 自動退室時間を過ぎた座席を検索
     const expiredSeats = await db.collection('seats').find({
       username: { $ne: null },  // ユーザーが着席している
       autoExitScheduled: { $lt: currentTime }  // 自動退室時間が現在時刻より前
     }).toArray();
     
     // 各座席を処理
     for (const seat of expiredSeats) {
       // 座席を空席に設定
       await db.collection('seats').updateOne(
         { _id: seat._id },
         { 
           $set: { 
             username: null,
             task: null,
             enterTime: null,
             autoExitScheduled: null
           } 
         }
       );
       
       // オプション: 退室メッセージをYouTubeチャットに投稿
       // await sendAutoExitMessage(seat.username, seat.room_id, seat.position);
     }
     
     return NextResponse.json({
       processed: expiredSeats.length,
       timestamp: currentTime
     });
   }
   ```

### 2. データベースの変更ストリームとSSEを活用するアプローチ

MongoDB Change Streamsを利用して、期限切れの座席を監視し、SSE接続を通じてリアルタイムで状態を更新します。

#### 実装方法

1. **SSEハンドラ内でのチェック**
   ```typescript
   // app/api/sse/route.ts の拡張
   export async function GET() {
     // 既存のSSE実装に追加
     const stream = new ReadableStream({
       async start(controller) {
         // ... 既存のコード ...
         
         // 定期的に自動退室チェックを実行
         const checkAutoExit = async () => {
           const currentTime = new Date();
           const expiredSeats = await db.collection('seats').find({
             username: { $ne: null },
             autoExitScheduled: { $lt: currentTime }
           }).toArray();
           
           if (expiredSeats.length > 0) {
             // 期限切れの座席を更新
             for (const seat of expiredSeats) {
               await db.collection('seats').updateOne(
                 { _id: seat._id },
                 { 
                   $set: { 
                     username: null,
                     task: null,
                     enterTime: null,
                     autoExitScheduled: null
                   } 
                 }
               );
             }
             
             // 更新データをクライアントに送信（既存のフローを活用）
             const updatedData = await fetchRoomData();
             controller.enqueue(encoder.encode(`data: ${JSON.stringify(updatedData)}\n\n`));
           }
         };
         
         // 1分ごとに自動退室チェックを実行
         const autoExitInterval = setInterval(checkAutoExit, 60000);
         
         return () => {
           clearInterval(autoExitInterval);
           // ... 既存のクリーンアップコード ...
         };
       }
     });
     
     // ... 既存のコード ...
   }
   ```

## 実装上の注意点

### 1. タイムゾーン考慮

- 日本時間（JST）を基準にして退室時間を計算
- サーバー時間とクライアント時間の差異に注意

```typescript
// 日本時間で2時間後を計算
const twoHoursLater = new Date();
twoHoursLater.setHours(twoHoursLater.getHours() + 2);
```

### 2. エラーハンドリング

- データベース接続エラーへの対応
- 処理中の例外キャッチと適切なログ記録

```typescript
try {
  // 自動退室処理
} catch (error) {
  console.error('自動退室処理中にエラーが発生しました:', error);
  // エラーメトリクスの記録やアラート通知
}
```

### 3. パフォーマンス最適化

- インデックス作成で検索を高速化

```javascript
// MongoDBインデックスの作成
db.seats.createIndex({ "username": 1, "autoExitScheduled": 1 });
```

- バッチ処理での効率化

```typescript
// 複数の座席を一括で更新
const result = await db.collection('seats').updateMany(
  { 
    username: { $ne: null },
    autoExitScheduled: { $lt: currentTime }
  },
  { 
    $set: { 
      username: null,
      task: null,
      enterTime: null,
      autoExitScheduled: null
    } 
  }
);
```

## フロントエンド表示の連携

### 1. 残り時間表示

ユーザーカードに残り時間を表示することで、自動退室までの時間をユーザーに知らせます。

```tsx
// 残り時間を計算する関数
function calculateRemainingTime(autoExitTime: Date): string {
  const now = new Date();
  const diffMs = autoExitTime.getTime() - now.getTime();
  
  if (diffMs <= 0) return "間もなく退室";
  
  const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
  const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
  
  if (diffHours > 0) {
    return `残り ${diffHours}時間${diffMinutes}分`;
  } else {
    return `残り ${diffMinutes}分`;
  }
}

// コンポーネント内での使用例
const remainingTime = calculateRemainingTime(new Date(seat.autoExitScheduled));
```

### 2. 視覚的フィードバック

残り時間に応じて視覚的なフィードバックを提供します：

```tsx
// 残り時間に基づくスタイルの適用
function getRemainingTimeStyle(autoExitTime: Date) {
  const now = new Date();
  const diffMs = autoExitTime.getTime() - now.getTime();
  const diffMinutes = diffMs / (1000 * 60);
  
  if (diffMinutes < 10) {
    return "text-red-500"; // 残り10分未満は赤色
  } else if (diffMinutes < 30) {
    return "text-orange-400"; // 残り30分未満はオレンジ色
  } else {
    return "text-amber-400"; // 通常は金色
  }
}
```

## テスト計画

1. **単体テスト**
   - 自動退室時間の計算ロジックのテスト
   - データベース更新処理のテスト

2. **統合テスト**
   - 実際にタイマーを進めた場合の動作確認
   - フロントエンドの表示更新確認

3. **エッジケース**
   - サーバー再起動時の挙動
   - 大量のユーザーが同時に期限切れになる場合の挙動
</file>

<file path="docs/command-processing.md">
# コマンド処理機能設計

## 概要

YouTubeライブチャットからコメントを取得し、特定のコマンドパターンを検出して適切なアクションを実行する機能の設計について説明します。基本的なコマンド構文は以下の通りです：

1. 入室: `/work タスク名`
2. 退室: `/finish`

## コマンド構文と処理ロジック

### 入室コマンド

```
/work タスク名
```

- **処理手順**:
  1. `/work` で始まるコメントを検出
  2. コマンド後のテキストをタスク名として抽出
  3. コメント投稿者の情報を取得
  4. 既に入室している場合は更新、そうでない場合は新規入室として処理
  5. 座席データを保存（ユーザー名、タスク名、入室時刻、自動退室時刻）
  6. 確認メッセージをYouTubeチャットに投稿

- **バリデーション**:
  - タスク名が空の場合はエラー
  - タスク名が長すぎる場合は切り詰め処理（50文字まで）
  - 同一ユーザーが再度入室コマンドを使用した場合はタスク更新として扱う

### 退室コマンド

```
/finish
```

- **処理手順**:
  1. `/finish` コマンドを検出
  2. コメント投稿者の情報を取得
  3. ユーザーが入室済みかを確認
  4. 入室済みの場合、座席を空席に設定
  5. 退室メッセージをYouTubeチャットに投稿

- **バリデーション**:
  - 入室していないユーザーが `/finish` を使用した場合は無視

## 自動退室処理

- **処理ロジック**:
  1. 入室時に現在時刻から2時間後の時刻を自動退室時刻として記録
  2. 定期的に（1分ごとなど）データベースをチェックし、自動退室時刻を過ぎた座席を検索
  3. 該当する座席を空席に設定
  4. 自動退室メッセージをYouTubeチャットに投稿（オプション）

## 実装方針

### コマンド検出

```typescript
// コメントからコマンドを検出する関数
function detectCommand(commentText: string): {
  command: 'work' | 'finish' | null;
  taskName?: string;
} {
  if (commentText.startsWith('/work')) {
    // タスク名抽出（/work の後のスペースを1つ削除）
    const taskName = commentText.substring(6).trim();
    return { command: 'work', taskName };
  }
  
  if (commentText.startsWith('/finish')) {
    return { command: 'finish' };
  }
  
  return { command: null };
}
```

### コマンド処理の流れ

1. YouTube APIからコメントを取得
2. 各コメントに対してコマンド検出を実行
3. 検出されたコマンドに基づき適切な処理を実行
4. 処理結果に応じてYouTubeチャットに応答

```typescript
// コマンド処理の擬似コード
async function processComments(comments: Comment[]) {
  for (const comment of comments) {
    const { command, taskName } = detectCommand(comment.text);
    
    if (command === 'work') {
      await handleWorkCommand(comment.author, taskName);
    } else if (command === 'finish') {
      await handleFinishCommand(comment.author);
    }
  }
}
```

### データベースインタラクション

1. 入室時にデータベースを更新

```typescript
// 入室処理の擬似コード
async function handleWorkCommand(username: string, taskName: string) {
  // 既存の座席を検索
  const existingSeat = await findSeatByUsername(username);
  
  if (existingSeat) {
    // 既存の座席を更新
    await updateSeat(existingSeat.id, {
      task: taskName,
      enterTime: new Date(),
      autoExitScheduled: new Date(Date.now() + 2 * 60 * 60 * 1000) // 2時間後
    });
  } else {
    // 新しい座席を割り当て
    const availableSeat = await findAvailableSeat();
    if (availableSeat) {
      await assignSeat(availableSeat.id, {
        username,
        task: taskName,
        enterTime: new Date(),
        autoExitScheduled: new Date(Date.now() + 2 * 60 * 60 * 1000) // 2時間後
      });
    }
  }
  
  // YouTube チャットに確認メッセージを送信
  await sendChatMessage(`${username}さんが「${taskName}」に取り組むため入室しました！`);
}
```

## エラーハンドリング

1. **不正なコマンド形式**:
   - 無効なコマンド形式は無視
   - タスク名がない場合はデフォルト値「作業中」を使用

2. **座席割り当て失敗**:
   - 利用可能な座席がない場合はエラーメッセージを返す
   - データベース接続エラーの場合は再試行ロジックを実装

3. **YouTube API エラー**:
   - API レート制限に達した場合のバックオフ戦略
   - 接続エラー時の再接続ロジック

## 留意点

1. **パフォーマンス最適化**:
   - 頻繁なデータベースクエリを最小限に抑える
   - YouTube API コールの回数を制限する

2. **セキュリティ**:
   - ユーザー入力のサニタイズ（XSS対策）
   - データベースクエリの安全な構築（インジェクション対策）

3. **テスト計画**:
   - コマンド検出のユニットテスト
   - 自動退室機能のテスト
   - エッジケースの処理検証
</file>

<file path="docs/implementation-plan.md">
# 実装計画

## 概要

YouTubeコメントで入退室コマンドを処理し、自動退室機能と新しいUIを実装するための計画を詳細に記述します。実装は段階的に行い、各フェーズでテストとレビューを行います。

## フェーズ1: データモデル拡張

### 目標
MongoDBのデータモデルを拡張し、タスク情報と時間管理に必要なフィールドを追加します。

### タスク

1. **座席（Seat）モデルの拡張**
   - `task` フィールドの追加
   - `enterTime` フィールドの追加 
   - `autoExitScheduled` フィールドの追加

2. **データベースインデックスの最適化**
   - ユーザー名検索用のインデックス作成
   - 自動退室チェック用のインデックス作成

### コード変更
- `lib/mongodb.ts`: 型定義の更新
- 必要に応じたデータベース初期化スクリプトの修正

## フェーズ2: コマンド処理機能の実装

### 目標
YouTubeコメントから新しいコマンド（`/work` と `/finish`）を検出し処理する機能を実装します。

### タスク

1. **コマンド検出ロジックの実装**
   - `detectCommand` 関数の実装
   - パターンマッチングとタスク名抽出

2. **コマンドハンドラの実装**
   - `handleWorkCommand` 関数の実装
   - `handleFinishCommand` 関数の実装

3. **コメント処理の拡張**
   - 既存のYouTubeコメント処理部分の拡張

### コード変更
- `app/api/youtube-comments/route.ts`: コマンド検出と処理追加
- `lib/utils.ts`: コマンド解析ユーティリティ追加
- `lib/messages.ts`: 新しいメッセージテンプレートの追加

## フェーズ3: 自動退室機能の実装

### 目標
入室から2時間後に自動的にユーザーを退室させる機能を実装します。

### タスク

1. **自動退室チェックAPIエンドポイントの作成**
   - `app/api/check-auto-exit/route.ts` 作成
   - 期限切れ座席の検索と更新処理

2. **SSEハンドラ内での自動退室チェック実装**
   - `app/api/sse/route.ts` の拡張
   - 定期的なチェックとクライアント通知

3. **フロントエンドからの定期呼び出し設定**
   - 安全なバックアップ手段として

### コード変更
- `app/api/check-auto-exit/route.ts`: 新規作成
- `app/api/sse/route.ts`: 自動退室チェック機能追加
- `app/page.tsx`: 必要に応じたポーリング実装

## フェーズ4: フロントエンドUI実装

### 目標
提供されたデザインに基づいてUI全体を刷新し、新機能に対応したコンポーネントを実装します。

### タスク

1. **新しいレイアウトの実装**
   - 動画背景と半透明オーバーレイ
   - ヘッダーとフッターの実装
   - レスポンシブデザイン対応

2. **ポモドーロタイマーの実装**
   - 現在時刻に基づくタイマー計算
   - モード切替と視覚的表示

3. **フォーカスルーム（ユーザーカード）の実装**
   - ユーザーカードコンポーネント作成
   - ページネーションとアニメーション実装
   - 残り時間表示実装

4. **スタイルの適用**
   - Tailwind CSSクラスの適用
   - アニメーションとトランジション定義

### コード変更
- `app/page.tsx`: 全体的なUI構造更新
- `app/globals.css`: 追加スタイルの定義
- `components/`: 新しいUIコンポーネントの作成または更新

## フェーズ5: 統合とテスト

### 目標
すべての機能を統合し、正常に動作することを確認します。

### タスク

1. **機能統合テスト**
   - コマンド処理の確認
   - 自動退室機能の確認
   - UIの動作確認

2. **エッジケース検証**
   - 同一ユーザーの複数回入室
   - 無効なコマンド処理
   - 自動退室タイミングの検証

3. **パフォーマンステスト**
   - 多数のユーザー同時接続時の挙動
   - MongoDB負荷テスト

### コード変更
- 必要に応じたバグ修正
- パフォーマンス最適化

## 具体的な実装手順

### 1. データモデルの準備

```typescript
// lib/mongodb.ts に追加
export type Seat = {
  _id: string;
  room_id: string;
  position: number;
  username: string | null;
  task: string | null;        // 新規追加
  enterTime: Date | null;     // 新規追加
  autoExitScheduled: Date | null;  // 新規追加
  timestamp: Date;
  created_at: Date;
};
```

### 2. コマンド処理機能

```typescript
// lib/utils.ts に追加
export function detectCommand(commentText: string): {
  command: 'work' | 'finish' | null;
  taskName?: string;
} {
  if (commentText.startsWith('/work')) {
    const taskName = commentText.substring(6).trim() || '作業中';
    return { command: 'work', taskName };
  }
  
  if (commentText.startsWith('/finish')) {
    return { command: 'finish' };
  }
  
  return { command: null };
}
```

### 3. 座席更新処理

```typescript
// app/api/seats/route.ts の更新
export async function POST(request: Request) {
  try {
    const { roomId, position, username, task } = await request.json();
    const client = await clientPromise;
    const db = client.db('coworking');

    // 入室時間と自動退室時間を計算
    const enterTime = new Date();
    const autoExitTime = new Date(enterTime);
    autoExitTime.setHours(autoExitTime.getHours() + 2); // 2時間後

    const result = await db.collection('seats').findOneAndUpdate(
      { room_id: roomId, position: position },
      {
        $set: {
          username: username,
          task: task || null,
          enterTime: username ? enterTime : null,
          autoExitScheduled: username ? autoExitTime : null,
          timestamp: new Date()
        }
      },
      { returnDocument: 'after' }
    );

    if (!result.value) {
      return NextResponse.json(
        { error: 'Seat not found' },
        { status: 404 }
      );
    }

    return NextResponse.json(result.value);
  } catch (error) {
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
```

### 4. 自動退室チェックエンドポイント

```typescript
// app/api/check-auto-exit/route.ts
import { NextResponse } from 'next/server';
import clientPromise from '@/lib/mongodb';

export async function GET() {
  try {
    const client = await clientPromise;
    const db = client.db('coworking');
    
    const currentTime = new Date();
    console.log(`[AutoExit] Checking for seats to auto-exit at ${currentTime}`);
    
    const result = await db.collection('seats').updateMany(
      { 
        username: { $ne: null },
        autoExitScheduled: { $lt: currentTime }
      },
      { 
        $set: { 
          username: null,
          task: null,
          enterTime: null,
          autoExitScheduled: null
        } 
      }
    );
    
    console.log(`[AutoExit] ${result.modifiedCount} seats were auto-exited`);
    
    return NextResponse.json({
      processed: result.modifiedCount,
      timestamp: currentTime
    });
  } catch (error) {
    console.error('[AutoExit] Error processing auto-exit:', error);
    return NextResponse.json(
      { error: 'Auto-exit processing failed' },
      { status: 500 }
    );
  }
}
```

### 5. UIコンポーネント例

```tsx
// components/UserCard.tsx
import Image from "next/image"
import { calculateRemainingTime, getRemainingTimeStyle } from "@/lib/utils";

interface UserCardProps {
  user: {
    id: string;
    name: string;
    avatar: string;
    task: string;
    autoExitTime: Date;
  }
}

export default function UserCard({ user }: UserCardProps) {
  const remainingTime = calculateRemainingTime(user.autoExitTime);
  const timeStyle = getRemainingTimeStyle(user.autoExitTime);
  
  return (
    <div className="bg-white/20 rounded-lg p-3 flex items-center gap-3 hover:bg-white/30 transition-all duration-300 shadow-md">
      <div className="w-12 h-12 bg-white/10 rounded-full overflow-hidden flex-shrink-0">
        <Image
          src={user.avatar || "/placeholder.svg"}
          alt={user.name}
          width={48}
          height={48}
          className="object-cover w-full h-full"
        />
      </div>
      <div className="min-w-0 flex-1">
        <p className="text-white text-lg font-bold truncate">{user.name}</p>
        <div className="flex items-center justify-between">
          <span className="text-sm text-white/80">{user.task}</span>
          <span className={`text-md font-semibold ${timeStyle}`}>{remainingTime}</span>
        </div>
      </div>
    </div>
  );
}
```

## スケジュール

1. **フェーズ1: データモデル拡張** - 1日
2. **フェーズ2: コマンド処理機能** - 2日
3. **フェーズ3: 自動退室機能** - 2日
4. **フェーズ4: フロントエンドUI** - 3日
5. **フェーズ5: 統合とテスト** - 2日

**合計期間**: 約10日（各フェーズの間にバッファを含む）
</file>

<file path="docs/project-requiremet.md">
以下は、これまでの議論を基にしたオンラインコワーキングスペースのプロジェクト概要をMarkdown形式でまとめたものです。

オンラインコワーキングスペース プロジェクト概要
プロジェクト概要
YouTubeのライブ配信コメントをリアルタイムで取得し、コメント内のコマンド（例: /30）に基づいてユーザーを特定の部屋に着席させるオンラインコワーキングスペースを構築します。ユーザーが着席すると、BOTがライブチャットに反応メッセージを投稿し、座席の状態をリアルタイムで画面に表示します。Next.jsを使用して開発し、Server-Sent Events（SSE）でリアルタイム更新を実現します。ユーザー認証は不要で、Netlifyでのホスティングを前提とします。

技術スタック
フロントエンド: Next.js（Reactベース）
バックエンド: Next.js API Routes（サーバーレス関数）
リアルタイム通信: Server-Sent Events（SSE）
ホスティング: Netlify

機能要件
YouTube APIの統合
YouTubeライブ配信のコメントをリアルタイムで取得（liveChatMessages.listを使用）。
BOTがライブチャットにメッセージを投稿（liveChatMessages.insertを使用）。
コマンド検出
コメントから/30のようなコマンドを検出し、部屋番号を抽出。

座席管理
サーバーサイドで部屋ごとの座席状態を管理（外部データベース推奨）。
コマンドに基づいて座席を更新。
BOTの反応
座席更新後、BOTがライブチャットにメッセージを投稿（例: 「ユーザーが部屋30に着席しました！」）。
フロントエンド表示
部屋リストと座席状態を視覚的に表示。
SSEを使用して座席状態をリアルタイムで更新。

ファイル構成
プロジェクトルート
.env.local: 環境変数（YouTube APIキーなど）
netlify.toml: Netlifyデプロイ設定
package.json: 依存関係とスクリプト
next.config.js: Next.jsカスタム設定
/pages
index.js: メイン画面（部屋リストと座席状態）
_app.js: グローバルスタイルとレイアウト
_document.js: HTMLドキュメントのカスタマイズ（必要に応じて）
/pages/api
comments.js: ライブチャットコメントの取得
seats.js: 座席状態の取得・更新
send-message.js: BOTメッセージの投稿
sse.js: SSEエンドポイント（座席状態のリアルタイム更新）
/components
Room.js: 部屋ごとの座席状態を表示
Seat.js: 個々の座席（空席orユーザー名）
Chat.js: YouTubeライブチャットの埋め込み（オプション）
/lib
youtube.js: YouTube APIクライアントとAPI呼び出し
sse.js: クライアントサイドのSSE接続管理
/styles
globals.css: グローバルスタイル
Room.module.css: Room.js用のスタイル
Seat.module.css: Seat.js用のスタイル
画面構成
メイン画面（index.js）
ヘッダー: タイトル（例: "オンラインコワーキングスペース"）
部屋リスト: グリッド表示で各部屋の座席状態を示す（Room.jsを使用）
ライブチャット（オプション）: YouTubeライブチャットを埋め込み
部屋コンポーネント（Room.js）
部屋番号（例: "Room 30"）
座席リスト（Seat.jsを複数表示）
座席コンポーネント（Seat.js）
空席: "空席"と表示（グレー背景）
着席中: ユーザー名を表示（緑背景）
YouTube APIセットアップ
Google Cloud Platformでプロジェクト作成
新しいプロジェクトを作成（例: OnlineCoworkingSpace）。
YouTube Data APIを有効化
APIライブラリから「YouTube Data API v3」を有効化。
APIキー作成
認証情報からAPIキーを生成し、コピー。
OAuth 2.0設定（メッセージ投稿用）
OAuth同意画面を設定し、クライアントIDとシークレットを取得。
環境変数に追加
.env.localにAPIキーやクライアント情報を設定。
実装のポイント
コメント取得と処理（/api/comments.js）
5秒ごとにYouTube APIを呼び出し、最新コメントを取得。
コマンド（/30など）を検出し、座席を更新。
BOTメッセージ送信（/api/send-message.js）
座席更新後、YouTube APIでBOTメッセージを投稿。
SSEの実装（/api/sse.js）
サーバーサイド: text/event-streamで座席状態の更新を送信。
クライアントサイド: EventSourceで接続し、UIを更新。
注意点
APIキーの管理: .env.localで管理し、クライアントに露出しない。
クォータ制限: YouTube APIの利用制限を考慮し、ポーリング頻度を調整（例: 5秒間隔）。
ステート管理: Netlify Functionsはステートレスなため、外部データベースを使用。
リアルタイム性: SSEを活用し、クライアントに即座に更新を反映。
その他
ユーザー認証は不要。
Netlifyでのホスティングを前提に、サーバーレス環境に配慮。
</file>

<file path="docs/refactoring-strategy.md">
オンラインコワーキングスペース リファクタリング戦略
1. 現状評価と目標設定
現状評価:

技術スタック: Next.js (App Router), TypeScript, MongoDB, Tailwind CSS, Shadcn UI, Server-Sent Events (SSE), YouTube Data API。モダンで適切な技術選定。
コード構成: app, components, lib, scripts, docs に分離されており、基本的な構造は良好。
機能: YouTubeコメント連携、コマンド処理、座席管理、リアルタイム更新 (SSE)、自動退室、ポモドーロタイマー表示、UIコンポーネント群。
潜在的な課題:
リアルタイム処理の複雑性: SSEハンドラ(api/sse/route.ts)がDB変更監視と定期的な自動退室チェックの両方を担っており、複雑化・不安定化のリスクがある。
コマンド処理の責務: api/youtube-comments/route.ts がコメント取得(GET)とDB更新(コマンド処理による副作用)の両方を行っており、REST原則から逸脱している。また、クライアント(page.tsx)からのポーリング呼び出しに依存している。
状態管理: Seat/Roomの状態は主にSSE経由で更新されるが、接続断時の復旧ロジックやクライアント側での一貫性担保が課題となる可能性がある。
ロジックの重複: ポモドーロタイマー関連ロジックが Header.tsx (時刻ベース) と PomodoroTimer.tsx (本来のタイマー) の両方に存在する可能性がある (現状 PomodoroTimer.tsx が主要に見えるが、Header.tsx の時刻ベース計算は複雑で不安定要素)。localStorage への依存も懸念。
自動退室ロジックの重複: api/check-auto-exit/route.ts と api/sse/route.ts 内のチェックロジックが重複している。
テスト: 自動テスト（ユニット、インテグレーション）が存在しない。
エラーハンドリング: 各所に try-catch はあるが、より一貫性のあるエラー報告・監視体制が必要。
型定義: lib/mongodb.ts に主要な型があるが、APIレスポンスやコンポーネントPropsなど、より網羅的な型付けが望ましい。
ドキュメント: docs フォルダは存在するが、コード変更に伴う継続的な更新が必要。
JavaScriptファイル: lib/youtube.js, scripts/test-mongodb-cjs.js など、TypeScriptプロジェクト内にJavaScriptファイルが混在している (lib/youtube.ts もあるため重複)。
リファクタリング目標:

保守性の向上: コードの可読性、理解しやすさ、変更の容易さを向上させる。
信頼性の向上: バグを減らし、エラーハンドリングを強化し、システムの安定性を高める。特にリアルタイム処理と状態管理。
パフォーマンスの最適化: APIレスポンス、データベースアクセス、フロントエンドレンダリングの効率を改善する。
テスト容易性の向上: ユニットテスト、インテグレーションテストを導入しやすくする。
関心の分離: 各コンポーネントやモジュールの責務を明確にする。
2. リファクタリング戦略（フェーズ分け）
フェーズ 0: 準備と基盤整備

テスト環境構築:
Jest / React Testing Library / Playwright 等のテストフレームワークを導入。
基本的なテストカバレッジレポート設定。
リンティング・フォーマット:
ESLint / Prettier のルールを確認・統一し、CIでのチェックを強制。
TypeScript移行:
lib/youtube.js -> lib/youtube.ts へ完全移行・統合。不要な .js ファイルを削除。
scripts 内の .js ファイルも可能な限り .ts へ移行 (ts-node 活用)。
依存関係整理:
package.json を確認し、不要な依存関係を削除。バージョンを最新安定版に更新検討。
フェーズ 1: コアロジックの整理と責務分離

ポモドーロタイマーロジック統合:
Header.tsx と PomodoroTimer.tsx のタイマーロジックを分析。
推奨: PomodoroTimer.tsx のロジックを主とし、現在時刻ベースの複雑な計算（特に determineTimeModeFromCurrentTime）は削除または大幅に簡略化する。状態管理（Context API や Zustand など）を導入し、Header と PomodoroTimer で状態を共有する。localStorage への直接依存を減らし、状態管理ライブラリ経由にする。
自動退室ロジック統合:
api/sse/route.ts 内の定期チェックを主とし、api/check-auto-exit/route.ts は削除または補助的な役割（手動トリガー等）に限定する。SSEハンドラ内のチェックロジックの安定性を高める。
YouTubeコメント処理とコマンド実行の分離:
api/youtube-comments/route.ts は コメント取得 に専念させる。GETリクエストでDB更新を行うのをやめる。
推奨:
バックエンドで独立したポーリングプロセス（例: 定期実行される別のAPIルートや、サーバーレス環境なら外部スケジューラからのWebhookトリガー）を実装し、コメントを取得。
取得したコメントをキュー（例: Vercel KV や MongoDB の一時コレクション）に入れる。
別のAPIルート (api/process-command/route.ts など）がキューからコマンドを処理し、DB更新とYouTubeへの応答メッセージ送信を行う。
これにより、コメント取得とコマンド実行の責務が分離され、GETリクエストの副作用がなくなる。
代替案（シンプル）: page.tsx の setInterval を維持し、api/youtube-comments でコメント取得。コマンド検出 後、クライアントから別の POST /api/commands エンドポイントを叩いて処理を依頼する。
フェーズ 2: リアルタイム処理の改善

SSEハンドラ (api/sse/route.ts) のリファクタリング:
MongoDB Change Stream のエラーハンドリング強化（再接続ロジックなど）。
自動退室チェックロジックをより分離・明確化。
クライアント切断時のリソースリーク防止 (isControllerClosed 周辺のロジックを再確認・簡素化）。
初期データ送信と変更ストリーム監視のコードを整理。
クライアント側SSEハンドリング (page.tsx) の改善:
EventSource のエラーハンドリング、再接続ロジックを堅牢にする。
SSEからのデータ受信・状態更新ロジックをカスタムフック (useSeatData など) に抽出し、page.tsx をクリーンにする。
フェーズ 3: フロントエンドと状態管理の改善

page.tsx の責務軽減:
SSE接続管理、YouTubeコメントポーリング（フェーズ1でバックエンド化しない場合）などのロジックをカスタムフックやContext Providerに移動。
コンポーネント粒度の見直し:
FocusRoom.tsx のアニメーションロジックが複雑な場合、状態管理ライブラリや専用のアニメーションライブラリの利用を検討。
UIコンポーネント (components/ui) はShadcnベースで問題ないが、ドメイン固有のロジックを持つコンポーネント (UserCard, FocusRoom) は適切か確認。
状態管理戦略の明確化:
現在の座席/ルームデータはSSEプッシュ型。クライアント側での状態保持、表示更新ロジックを明確にする。必要であれば Zustand や Jotai などの軽量ライブラリ導入を検討し、グローバル/共有状態を一元管理する。use-toast のようなフックも状態管理の一部と見なせる。
フェーズ 4: テストカバレッジ向上

ユニットテスト:
lib/utils.ts 内のヘルパー関数 (detectCommand, calculateRemainingTime 等）。
lib/messages.ts のテンプレート生成。
コンポーネントの表示ロジック（UserCard, PomodoroTimer など）。
インテグレーションテスト:
APIエンドポイントのテスト（Mock Service Worker や Supertest を使用）。コマンド処理、SSE接続、DB操作を含むシナリオ。
フロントエンドとバックエンドを連携させたテスト（例: コマンド送信 -> UI更新）。
E2Eテスト (オプション):
主要なユーザーフロー（入室、退室、自動退室の確認）を Playwright などで自動化。
フェーズ 5: ドキュメントとクリーンアップ

ドキュメント更新:
docs/ 内のドキュメントをリファクタリング内容に合わせて更新。
コード内のコメント（JSDoc/TSDoc）を充実させる。特にAPIや複雑なロジック。
コードクリーンアップ:
未使用の変数、関数、インポート、コンポーネントを削除。
console.log 等のデバッグコードを削除または適切なロガーに置き換え。
.env.example を作成し、必要な環境変数を明記。
3. 実施上の注意点
段階的実施: 各フェーズごとに変更をマージし、動作確認を行う。一度に大きな変更を加えない。
テスト駆動: 新しいコードやリファクタリングされたコードには必ずテストを追加する。既存機能が壊れていないことを確認するリグレッションテストが重要。
コードレビュー: すべての変更に対してチーム内でコードレビューを実施する。
計測: パフォーマンス改善を目指す場合は、リファクタリング前後のベンチマークを取得する。
後方互換性: APIの変更など、外部（もしあれば）やフロントエンドに影響がある場合は、互換性に注意するか、バージョン管理を行う。
</file>

<file path="docs/ui-implementation.md">
# UI実装要件

## 概要

提供されたデザインサンプルに基づいて、オンラインコワーキングスペースのUIを刷新します。現在のシンプルなレイアウトから、よりモダンで視覚的に魅力的なデザインへとアップグレードします。

## デザイン要素

### 全体的なレイアウト

1. **背景**
   - 動画背景（`mv_video.mp4`）またはプレースホルダー画像
   - 半透明のオーバーレイ（暗色）

2. **ヘッダー**
   - ロゴ/タイトル "CONNECT"
   - 現在の日時表示
   - ポモドーロタイマー（作業中/休憩中表示、残り時間、プログレスバー）

3. **メインコンテンツ**
   - 現在の参加者セクション
   - フォーカスルーム（サイレントルーム）
   - 現在のBGM情報

4. **フッター**
   - コピーライト情報

## コンポーネント詳細

### ヘッダーコンポーネント

1. **タイトルバー**
   - `text-3xl font-extrabold tracking-widest text-amber-400` のスタイル
   - 白色のボーダーライン

2. **情報バー**
   - 現在日時表示セクション
     - 日付（年月日と曜日）
     - 時刻（時:分:秒）
   - ポモドーロタイマーセクション
     - モード表示（作業中/休憩中バッジ）
     - 残り時間表示
     - プログレスバー

### 参加者セクション

1. **情報カード**
   - 半透明の背景
   - 「現在の参加者」見出し
   - ライブ配信中バッジ
   - オンライン人数表示
   - 参加者リスト（バッジ表示）

### フォーカスルームコンポーネント

1. **ヘッダー**
   - アイコン（VolumeX）
   - 「フォーカスルーム」タイトル
   - 「会話不可」バッジ
   - 参加者数表示

2. **ユーザーカードグリッド**
   - 2x4または2x2のグリッドレイアウト（レスポンシブ）
   - ユーザーカードのページネーション
   - ページインジケーター

3. **ユーザーカード**
   - アバター画像
   - ユーザー名
   - タスク名
   - 経過時間/残り時間

### BGM情報セクション

- 音楽アイコン
- 現在再生中のBGMタイトル
- 再生状態表示

## アニメーションと遷移効果

1. **ユーザーカードスライダー**
   - カードがスライドアウト/スライドインするアニメーション
   - 5秒ごとに自動ページング

2. **状態変更アニメーション**
   - ポモドーロタイマーの状態変更時のアニメーション
   - プログレスバーのスムーズな更新

## レスポンシブデザイン要件

1. **モバイル向け**
   - 単一カラムレイアウト
   - 縮小されたカードサイズ
   - フォントサイズ調整

2. **タブレット向け**
   - 2x2グリッドレイアウト

3. **デスクトップ向け**
   - 2x4グリッドレイアウト（ユーザーカード）
   - 豊富な余白と大きめの要素

## カラーパレット

1. **主要色**
   - 背景: 動画背景 + 半透明黒オーバーレイ
   - アクセント: `text-amber-400`（黄金色）
   - 作業中状態: `bg-green-500`
   - 休憩中状態: `bg-blue-500`

2. **セカンダリカラー**
   - カード背景: `bg-white/20`（20%不透明度の白）
   - 境界線: `border-white/10`（10%不透明度の白）
   - テキスト: 白色と半透明白色のバリエーション

## フォント設定

- デフォルトフォント: システムフォント
- 見出し: `font-bold` または `font-extrabold`
- タイマー表示: `text-2xl font-bold`
- 通常テキスト: `text-sm` または `text-md`

## 実装優先順位

1. 背景と全体レイアウト構造
2. ヘッダーコンポーネント（日時表示とタイマー）
3. フォーカスルームとユーザーカード表示
4. アニメーションとページング機能
5. レスポンシブデザインの微調整
</file>

<file path="docs/work-command-features.md">
# ワークコマンド機能追加要件

## 概要

現在のオンラインコワーキングスペースシステムに、ユーザーのタスク管理と滞在時間管理機能を追加します。ユーザーはYouTubeライブチャットで特定のコマンドを使用して入室・退室でき、一定時間後に自動退室される機能を実装します。

## 新機能要件

### コマンド機能拡張

1. **入室コマンド**
   - コマンド形式: `/work タスク名`
   - 機能: ユーザーが指定したタスク名とともに入室
   - 例: `/work プログラミング学習`

2. **退室コマンド**
   - コマンド形式: `/finish`
   - 機能: ユーザーが明示的に退室

3. **自動退室機能**
   - 条件: 入室から2時間経過
   - 機能: システムが自動的にユーザーを退室させる

### データモデル拡張

現在のデータモデルに以下の情報を追加します：

1. **座席（Seat）データの拡張**
   - `task`: ユーザーが取り組んでいるタスク名
   - `enterTime`: 入室時刻（タイムスタンプ）
   - `autoExitScheduled`: 自動退室予定時刻（タイムスタンプ）

### UI変更

1. **ユーザーカード表示**
   - ユーザー名
   - アバター画像
   - タスク名
   - 経過時間表示（または残り時間）

2. **全体レイアウト**
   - 提供されたデザインサンプルをベースにしたモダンなUI
   - サイレントルーム（フォーカスルーム）のコンセプトを取り入れる
   - ポモドーロタイマーの統合

## 技術的な実装詳細

### バックエンド（API）拡張

1. **コマンド処理機能の強化**
   - `/api/youtube-comments/route.ts` の拡張
   - コマンドパターンの追加 (`/work` と `/finish`)
   - タスク名の抽出処理

2. **座席データ管理**
   - `/api/seats/route.ts` の拡張
   - タスク情報および時間情報の記録
   - 自動退室処理のためのスケジューリング

3. **自動退室処理**
   - バックグラウンドプロセスまたはスケジュールタスク実装
   - 入室時刻から2時間後に退室処理を実行
   - 定期的に期限切れのセッションをチェック

### フロントエンド拡張

1. **UI実装**
   - 提供されたデザインに基づくコンポーネント作成
   - ユーザーカードの実装
   - 残り時間表示の実装

2. **リアルタイム更新**
   - Server-Sent Events (SSE) を使用した残り時間の更新
   - ユーザー状態変更の反映

## 実装計画

1. **データモデル拡張**
   - MongoDB のスキーマ拡張
   - タスク名と時間情報の追加

2. **バックエンドAPI拡張**
   - コマンド処理の追加
   - 自動退室機能の実装

3. **フロントエンドUI実装**
   - 新しいコンポーネントの作成
   - 提供されたデザインの適用

4. **テストとデバッグ**
   - コマンド処理のテスト
   - 自動退室機能のテスト
   - UIの動作確認

## 留意点

1. **データベース移行**
   - 既存のユーザーデータを損なわないよう注意
   - 下位互換性の確保

2. **エラーハンドリング**
   - 無効なコマンド形式への対応
   - タスク名が長すぎる場合の対応

3. **パフォーマンス**
   - 自動退室処理による過負荷防止
   - 効率的なデータベースクエリの実装
</file>

<file path="hooks/use-auto-exit.ts">
import { useState, useEffect, useCallback } from 'react';
import { AutoExitStatus } from '@/lib/types';
import { getAutoExitStatus, formatRemainingTime } from '@/lib/client-utils';

/**
 * 自動退室ステータスをリアルタイムで管理するカスタムフック
 * @param scheduledTimeISOString ISO8601形式の自動退室予定時間 (nullの場合は退室予定なし)
 * @param refreshInterval 更新間隔（ミリ秒）
 * @returns 自動退室状態と更新関数
 */
export function useAutoExit(
  scheduledTimeISOString: string | null | undefined,
  refreshInterval: number = 1000
): {
  status: AutoExitStatus;
  updateScheduledTime: (newTime: Date | string | null) => void;
} {
  // 自動退室状態を管理するステート
  const [status, setStatus] = useState<AutoExitStatus>(() => 
    getAutoExitStatus(scheduledTimeISOString || null)
  );
  
  // 自動退室時間を更新する関数
  const updateScheduledTime = useCallback((newTime: Date | string | null) => {
    setStatus(getAutoExitStatus(newTime));
  }, []);
  
  // propsが変更された場合にステータスを更新
  useEffect(() => {
    updateScheduledTime(scheduledTimeISOString || null);
  }, [scheduledTimeISOString, updateScheduledTime]);
  
  // 定期的に残り時間を更新
  useEffect(() => {
    // 自動退室予定がない場合はタイマーを設定しない
    if (!status.isScheduled || !status.scheduledTime) {
      return;
    }
    
    const updateRemainingTime = () => {
      setStatus(prevStatus => {
        if (!prevStatus.scheduledTime) return prevStatus;
        
        const now = new Date();
        const scheduledTime = prevStatus.scheduledTime;
        const remainingMs = scheduledTime.getTime() - now.getTime();
        
        // 残り時間がない場合 (期限切れ)
        if (remainingMs <= 0) {
          return {
            ...prevStatus,
            remainingTime: 0,
            formattedTime: '時間切れ'
          };
        }
        
        // 残り時間を更新
        return {
          ...prevStatus,
          remainingTime: remainingMs,
          formattedTime: formatRemainingTime(remainingMs)
        };
      });
    };
    
    // 初回更新
    updateRemainingTime();
    
    // 定期的に更新するタイマーを設定
    const intervalId = setInterval(updateRemainingTime, refreshInterval);
    
    // クリーンアップ
    return () => clearInterval(intervalId);
  }, [status.isScheduled, status.scheduledTime, refreshInterval]);
  
  return {
    status,
    updateScheduledTime
  };
}
</file>

<file path="hooks/use-pomodoro.ts">
import { useEffect, useCallback } from 'react';
import { formatTime, usePomodoroStore, POMODORO_MODES, TimerMode } from '@/lib/store';

/**
 * ポモドーロタイマーを使用するためのカスタムフック
 * コンポーネントでタイマー状態を簡単に使えるようにラップ
 */
export const usePomodoro = () => {
  // Zustandストアから状態と操作を取得
  const {
    mode,
    timeLeft,
    isActive,
    progress,
    workSessionsCompleted,
    startTimer,
    pauseTimer,
    resetTimer,
    switchMode,
    updateFromCurrentTime,
    tickTimer
  } = usePomodoroStore();

  // タイマーのティック処理（1秒ごとに実行）
  useEffect(() => {
    // サーバーサイドレンダリングではタイマーを実行しない
    if (typeof window === 'undefined') return;

    // ブラウザ環境でのみタイマーを設定
    const timerInterval = setInterval(() => {
      // 2秒に1回、現在時刻ベースの更新も確認
      if (Date.now() % 4000 < 2000) {
        updateFromCurrentTime();
      }
      
      // 毎秒タイマーをティック
      tickTimer();
    }, 1000);

    // コンポーネントのクリーンアップ時にタイマーを解除
    return () => clearInterval(timerInterval);
  }, [tickTimer, updateFromCurrentTime]);

  // フォーマット済みの残り時間
  const formattedTimeLeft = formatTime(timeLeft);

  // 現在のモード設定
  const currentMode = {
    WORK: {
      name: '作業',
      color: 'bg-green-500', 
      bgColor: 'bg-green-500', // UIコンポーネント用
      textColor: 'text-green-500'
    },
    BREAK: {
      name: '休憩',
      color: 'bg-blue-500',
      bgColor: 'bg-blue-500', // UIコンポーネント用
      textColor: 'text-blue-500'
    },
    LONG_BREAK: {
      name: '長い休憩',
      color: 'bg-indigo-500',
      bgColor: 'bg-indigo-500', // UIコンポーネント用
      textColor: 'text-indigo-500'
    }
  }[mode];

  // モード切り替えのハンドラー（メモ化して再レンダリングを減らす）
  const handleSwitchMode = useCallback((newMode: TimerMode) => {
    switchMode(newMode);
  }, [switchMode]);

  // 公開するインターフェース
  return {
    // 状態
    mode,
    timeLeft,
    formattedTimeLeft,
    isActive,
    progress,
    workSessionsCompleted,
    currentMode,
    
    // アクション
    startTimer,
    pauseTimer,
    resetTimer,
    switchMode: handleSwitchMode
  };
};
</file>

<file path="hooks/use-seat-data.ts">
import { useState, useCallback } from 'react';
import { useSSE, SSEConnectionState } from './use-sse';
import { toast } from './use-toast';

export interface Seat {
  id: string;
  username: string | null;
  task?: string | null;
  enterTime?: Date | string | null;
  autoExitScheduled?: Date | string | null;
  timestamp: Date | string;
}

export interface RoomData {
  id: string;
  seats: Seat[];
  type?: 'focus' | 'chat';
}

interface SSEData {
  rooms: RoomData[];
  error?: string;
}

interface UseSeatDataResult {
  rooms: RoomData[];
  isLoading: boolean;
  connectionState: SSEConnectionState;
  refreshData: () => void;
}

/**
 * 座席データ管理のためのカスタムフック
 * SSE接続とデータ処理を行う
 */
export function useSeatData(): UseSeatDataResult {
  const [rooms, setRooms] = useState<RoomData[]>([]);

  // システムメッセージを処理するコールバック
  const handleSystemMessage = useCallback((message: { message: string; type: 'info' | 'warning' | 'error' }) => {
    // トースト通知を表示
    toast({
      title: message.type === 'error' ? 'エラー' : 
             message.type === 'warning' ? '警告' : 'お知らせ',
      description: message.message,
      variant: message.type === 'error' ? 'destructive' : 'default',
    });
  }, []);

  // SSEデータを処理するコールバック
  const handleMessage = useCallback((data: SSEData) => {
    if (data.rooms && Array.isArray(data.rooms)) {
      console.log(`[SeatData] Received ${data.rooms.length} rooms from SSE`);
      setRooms(data.rooms);
    } else if (data.error) {
      console.error('[SeatData] Error in SSE data:', data.error);
      toast({
        title: 'データ取得エラー',
        description: data.error,
        variant: 'destructive',
      });
    }
  }, []);

  // SSE接続を使用してデータを取得
  const { 
    data,
    connectionState,
    connect: refreshData
  } = useSSE<SSEData>({
    endpoint: '/api/sse',
    onMessage: handleMessage,
    onSystemMessage: handleSystemMessage,
    onConnect: () => {
      console.log('[SeatData] SSE connection established');
    },
    onDisconnect: () => {
      console.log('[SeatData] SSE connection closed');
    },
    onError: (error) => {
      console.error('[SeatData] SSE connection error:', error);
    },
    maxRetries: 5, // 最大再試行回数
    initialBackoffDelay: 2000, // 初期バックオフ（2秒）
    maxBackoffDelay: 30000, // 最大バックオフ（30秒）
  });

  // 接続状態からローディング状態を判断
  const isLoading = 
    connectionState === 'connecting' || 
    connectionState === 'reconnecting' || 
    (connectionState === 'connected' && !data);

  return {
    rooms,
    isLoading,
    connectionState,
    refreshData
  };
}
</file>

<file path="hooks/use-sse.ts">
import { useState, useEffect, useRef, useCallback } from 'react';

export type SSEConnectionState = 'connecting' | 'connected' | 'reconnecting' | 'disconnected' | 'error';

interface SystemMessage {
  message: string;
  type: 'info' | 'warning' | 'error';
  timestamp: string;
}

interface SSEHookOptions {
  endpoint: string;
  onSystemMessage?: (message: SystemMessage) => void;
  onMessage?: (data: any) => void;
  onConnect?: () => void;
  onDisconnect?: () => void;
  onError?: (error: Event) => void;
  maxRetries?: number;
  initialBackoffDelay?: number;
  maxBackoffDelay?: number;
}

interface SSEHookResult<T> {
  data: T | null;
  connectionState: SSEConnectionState;
  lastSystemMessage: SystemMessage | null;
  connect: () => void;
  disconnect: () => void;
  isReconnecting: boolean;
  retryCount: number;
}

/**
 * Server-Sent Events (SSE) のカスタムフック
 * 指数バックオフによる再接続ロジックとエラーハンドリングを実装
 */
export function useSSE<T = any>(options: SSEHookOptions): SSEHookResult<T> {
  const {
    endpoint,
    onSystemMessage,
    onMessage,
    onConnect,
    onDisconnect,
    onError,
    maxRetries = 10,
    initialBackoffDelay = 1000,
    maxBackoffDelay = 60000,
  } = options;

  const [data, setData] = useState<T | null>(null);
  const [connectionState, setConnectionState] = useState<SSEConnectionState>('connecting');
  const [lastSystemMessage, setLastSystemMessage] = useState<SystemMessage | null>(null);
  const [isReconnecting, setIsReconnecting] = useState(false);
  const [retryCount, setRetryCount] = useState(0);

  const eventSourceRef = useRef<EventSource | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  /**
   * 指数バックオフの待機時間を計算
   */
  const calculateBackoff = useCallback((retry: number) => {
    // 2のべき乗で待機時間を増やし、最大値でキャップ
    const exponentialDelay = Math.min(
      maxBackoffDelay,
      initialBackoffDelay * Math.pow(2, retry) * (1 + Math.random() * 0.2) // ジッターを加える
    );
    return Math.round(exponentialDelay);
  }, [initialBackoffDelay, maxBackoffDelay]);

  /**
   * SSE接続を開始
   */
  const connect = useCallback(() => {
    // 既存の接続があれば閉じる
    if (eventSourceRef.current) {
      eventSourceRef.current.close();
    }

    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }

    // 接続中の状態に更新
    setConnectionState(isReconnecting ? 'reconnecting' : 'connecting');

    try {
      const eventSource = new EventSource(endpoint);
      eventSourceRef.current = eventSource;

      // 接続時のハンドラ
      eventSource.onopen = () => {
        console.log('[SSE:Hook] Connection established');
        setConnectionState('connected');
        setIsReconnecting(false);
        setRetryCount(0);
        onConnect?.();
      };

      // 通常メッセージのハンドラ
      eventSource.onmessage = (event) => {
        try {
          const parsedData = JSON.parse(event.data);
          setData(parsedData);
          onMessage?.(parsedData);
        } catch (err) {
          console.error('[SSE:Hook] Error parsing SSE data:', err, event.data);
        }
      };

      // システムメッセージのハンドラ
      eventSource.addEventListener('system-message', (event: MessageEvent) => {
        try {
          const systemMessage = JSON.parse(event.data) as SystemMessage;
          setLastSystemMessage(systemMessage);
          onSystemMessage?.(systemMessage);
          
          console.log(`[SSE:Hook] System message received: ${systemMessage.message} (${systemMessage.type})`);
        } catch (err) {
          console.error('[SSE:Hook] Error parsing system message:', err, event.data);
        }
      });

      // エラーハンドラ
      eventSource.onerror = (error) => {
        console.error('[SSE:Hook] Connection error:', error);
        
        // 接続が切れた場合
        if (eventSource.readyState === EventSource.CLOSED) {
          setConnectionState('disconnected');
          onDisconnect?.();
          
          // 最大再試行回数を超えていない場合は再接続を試みる
          if (retryCount < maxRetries) {
            const nextRetryCount = retryCount + 1;
            setRetryCount(nextRetryCount);
            setIsReconnecting(true);
            
            const delayMs = calculateBackoff(nextRetryCount);
            console.log(`[SSE:Hook] Will attempt to reconnect in ${delayMs}ms (retry ${nextRetryCount}/${maxRetries})`);
            
            // 指定時間後に再接続
            reconnectTimeoutRef.current = setTimeout(() => {
              if (eventSourceRef.current?.readyState === EventSource.CLOSED) {
                console.log(`[SSE:Hook] Attempting to reconnect (retry ${nextRetryCount}/${maxRetries})`);
                connect();
              }
            }, delayMs);
          } else {
            console.error(`[SSE:Hook] Maximum reconnection attempts (${maxRetries}) reached`);
            setConnectionState('error');
          }
        }
        
        onError?.(error);
      };
    } catch (err) {
      console.error('[SSE:Hook] Failed to create EventSource:', err);
      setConnectionState('error');
    }
  }, [
    endpoint, 
    isReconnecting, 
    retryCount, 
    maxRetries, 
    calculateBackoff, 
    onConnect, 
    onMessage, 
    onSystemMessage,
    onDisconnect,
    onError
  ]);

  /**
   * SSE接続を閉じる
   */
  const disconnect = useCallback(() => {
    if (eventSourceRef.current) {
      console.log('[SSE:Hook] Closing connection');
      eventSourceRef.current.close();
      eventSourceRef.current = null;
    }

    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }

    setConnectionState('disconnected');
    onDisconnect?.();
  }, [onDisconnect]);

  // コンポーネントマウント時にSSE接続を開始
  useEffect(() => {
    connect();

    // クリーンアップ時に接続を閉じる
    return () => {
      disconnect();
    };
  }, [endpoint]);

  return {
    data,
    connectionState,
    lastSystemMessage,
    connect,
    disconnect,
    isReconnecting,
    retryCount
  };
}
</file>

<file path="hooks/use-toast.ts">
'use client';

// Inspired by react-hot-toast library
import * as React from 'react';

import type { ToastActionElement, ToastProps } from '@/components/ui/toast';

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST',
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType['ADD_TOAST'];
      toast: ToasterToast;
    }
  | {
      type: ActionType['UPDATE_TOAST'];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType['DISMISS_TOAST'];
      toastId?: ToasterToast['id'];
    }
  | {
      type: ActionType['REMOVE_TOAST'];
      toastId?: ToasterToast['id'];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: 'REMOVE_TOAST',
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'ADD_TOAST':
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case 'UPDATE_TOAST':
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      };

    case 'DISMISS_TOAST': {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      };
    }
    case 'REMOVE_TOAST':
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, 'id'>;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: 'UPDATE_TOAST',
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });

  dispatch({
    type: 'ADD_TOAST',
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),
  };
}

export { useToast, toast };
</file>

<file path="lib/autoExit.ts">
import { Db, ObjectId } from 'mongodb';
import { sendChatMessage, getLiveChatId } from '@/lib/youtube';
import { messageTemplates } from '@/lib/messages';

/**
 * 自動退室状態の型定義
 */
export interface AutoExitStatus {
  isScheduled: boolean;
  scheduledTime: Date | null;
  remainingTime: number | null; // ミリ秒単位
  formattedTime: string | null; // 表示用フォーマット
}

/**
 * 自動退室が必要なユーザーをチェックして退室処理を行う
 * @param db MongoDB データベース接続
 * @param sendNotification YouTube通知メッセージを送信するかどうか
 * @returns 処理された座席の数と詳細情報
 */
export async function checkAndProcessAutoExit(
  db: Db,
  sendNotification: boolean = false
): Promise<{
  processedCount: number;
  details: Array<{
    username: string | null;
    roomId: string;
    position: number;
    success: boolean;
    error?: string;
  }>;
}> {
  const results = {
    processedCount: 0,
    details: [] as Array<{
      username: string | null;
      roomId: string;
      position: number;
      success: boolean;
      error?: string;
    }>
  };

  try {
    const seatsCollection = db.collection('seats');
    const currentTime = new Date();
    
    console.log(`[AutoExit] ${currentTime.toISOString()}に自動退室チェックを実行`);
    
    // 期限切れの座席を検索（入室中かつ自動退室時間が現在時刻より前）
    const expiredSeats = await seatsCollection.find({
      username: { $ne: null },
      autoExitScheduled: { $lt: currentTime }
    }).toArray();
    
    if (expiredSeats.length === 0) {
      console.log('[AutoExit] 期限切れの座席はありませんでした');
      return results;
    }
    
    console.log(`[AutoExit] ${expiredSeats.length}件の期限切れ座席を処理します`);
    
    // YouTube通知のための準備
    let liveChatId: string | null = null;
    if (sendNotification) {
      const videoId = process.env.YOUTUBE_VIDEO_ID;
      if (videoId) {
        try {
          liveChatId = await getLiveChatId(videoId);
        } catch (error) {
          console.error('[AutoExit] YouTubeのliveChatID取得中にエラーが発生しました:', error);
        }
      }
    }
    
    // 各座席を処理
    for (const seat of expiredSeats) {
      const username = seat.username;
      const roomId = seat.room_id;
      const position = seat.position;
      
      try {
        // 座席を空席に設定
        await seatsCollection.updateOne(
          { _id: seat._id },
          { 
            $set: { 
              username: null, 
              authorId: null, 
              task: null, 
              enterTime: null, 
              autoExitScheduled: null,
              timestamp: new Date()
            } 
          }
        );
        
        console.log(`[AutoExit] ${username}を自動退室しました (部屋: ${roomId}, 座席: ${position})`);
        
        // 自動退室メッセージをYouTubeチャットに送信（設定されている場合）
        if (sendNotification && liveChatId && username) {
          await sendChatMessage(
            liveChatId, 
            messageTemplates.autoExited(username, roomId, position)
          );
        }
        
        results.processedCount++;
        results.details.push({
          username,
          roomId,
          position,
          success: true
        });
      } catch (error) {
        console.error(`[AutoExit] 座席(${roomId}-${position})の自動退室処理中にエラーが発生:`, error);
        results.details.push({
          username,
          roomId,
          position,
          success: false,
          error: error instanceof Error ? error.message : '不明なエラー'
        });
      }
    }
    
    return results;
  } catch (error) {
    console.error('[AutoExit] 自動退室処理全体でエラーが発生しました:', error);
    throw error;
  }
}

/**
 * 指定された部屋・位置のユーザーの自動退室時間を更新/設定する
 * @param db MongoDB データベース接続
 * @param roomId 部屋ID
 * @param position 座席位置
 * @param hours 入室時間から何時間後に自動退室するか (デフォルト: 2時間)
 * @returns 更新結果
 */
export async function scheduleAutoExit(
  db: Db,
  roomId: string,
  position: number,
  hours: number = 2
): Promise<{ success: boolean; error?: string }> {
  try {
    const seatsCollection = db.collection('seats');
    
    // 座席情報を取得
    const seat = await seatsCollection.findOne({
      room_id: roomId,
      position: position
    });
    
    if (!seat || !seat.username) {
      return { 
        success: false, 
        error: '指定された座席が見つからないか、ユーザーが着席していません' 
      };
    }
    
    // 入室時間から自動退室時間を計算
    const enterTime = seat.enterTime ? new Date(seat.enterTime) : new Date();
    const autoExitTime = new Date(enterTime);
    autoExitTime.setHours(autoExitTime.getHours() + hours);
    
    // 自動退室時間を更新
    await seatsCollection.updateOne(
      { _id: seat._id },
      { $set: { autoExitScheduled: autoExitTime } }
    );
    
    console.log(`[AutoExit] ${seat.username}の自動退室を${autoExitTime.toISOString()}に設定しました`);
    
    return { success: true };
  } catch (error) {
    console.error('[AutoExit] 自動退室スケジュール設定中にエラーが発生しました:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : '不明なエラー' 
    };
  }
}

/**
 * 自動退室のステータスを取得する
 * @param scheduledTime 自動退室時間
 * @returns 自動退室状態の情報
 */
export function getAutoExitStatus(scheduledTime: Date | string | null): AutoExitStatus {
  if (!scheduledTime) {
    return {
      isScheduled: false,
      scheduledTime: null,
      remainingTime: null,
      formattedTime: null
    };
  }

  const autoExitTime = typeof scheduledTime === 'string' 
    ? new Date(scheduledTime) 
    : scheduledTime;
  
  const now = new Date();
  const remainingMs = autoExitTime.getTime() - now.getTime();

  // 既に期限切れの場合
  if (remainingMs <= 0) {
    return {
      isScheduled: true,
      scheduledTime: autoExitTime,
      remainingTime: 0,
      formattedTime: '時間切れ'
    };
  }

  return {
    isScheduled: true,
    scheduledTime: autoExitTime,
    remainingTime: remainingMs,
    formattedTime: formatRemainingTime(remainingMs)
  };
}

/**
 * 残り時間をフォーマットする
 * @param milliseconds 残りミリ秒
 * @returns フォーマットされた時間文字列 (例: "1時間23分")
 */
export function formatRemainingTime(milliseconds: number): string {
  if (milliseconds <= 0) {
    return '時間切れ';
  }

  const seconds = Math.floor(milliseconds / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  
  if (hours > 0) {
    const remainingMinutes = minutes % 60;
    if (remainingMinutes > 0) {
      return `${hours}時間${remainingMinutes}分`;
    }
    return `${hours}時間`;
  } else if (minutes > 0) {
    const remainingSeconds = seconds % 60;
    if (remainingSeconds > 0 && minutes < 10) {
      // 10分未満なら秒も表示
      return `${minutes}分${remainingSeconds}秒`;
    }
    return `${minutes}分`;
  } else {
    return `${seconds}秒`;
  }
}

/**
 * 現在の日付と時刻をフォーマットする
 * @returns フォーマットされた日時文字列 (例: "2023/04/06 15:30")
 */
export function formatCurrentDateTime(): string {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');
  
  return `${year}/${month}/${day} ${hours}:${minutes}`;
}
</file>

<file path="lib/client-utils.ts">
import { AutoExitStatus } from './types';

/**
 * 自動退室のステータスを取得する（クライアント側で安全に使用できる）
 * @param scheduledTime 自動退室時間
 * @returns 自動退室状態の情報
 */
export function getAutoExitStatus(scheduledTime: Date | string | null): AutoExitStatus {
  if (!scheduledTime) {
    return {
      isScheduled: false,
      scheduledTime: null,
      remainingTime: null,
      formattedTime: null
    };
  }

  const autoExitTime = typeof scheduledTime === 'string' 
    ? new Date(scheduledTime) 
    : scheduledTime;
  
  const now = new Date();
  const remainingMs = autoExitTime.getTime() - now.getTime();

  // 既に期限切れの場合
  if (remainingMs <= 0) {
    return {
      isScheduled: true,
      scheduledTime: autoExitTime,
      remainingTime: 0,
      formattedTime: '時間切れ'
    };
  }

  return {
    isScheduled: true,
    scheduledTime: autoExitTime,
    remainingTime: remainingMs,
    formattedTime: formatRemainingTime(remainingMs)
  };
}

/**
 * 残り時間をフォーマットする
 * @param milliseconds 残りミリ秒
 * @returns フォーマットされた時間文字列 (例: "1時間23分")
 */
export function formatRemainingTime(milliseconds: number): string {
  if (milliseconds <= 0) {
    return '時間切れ';
  }

  const seconds = Math.floor(milliseconds / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  
  if (hours > 0) {
    const remainingMinutes = minutes % 60;
    if (remainingMinutes > 0) {
      return `${hours}時間${remainingMinutes}分`;
    }
    return `${hours}時間`;
  } else if (minutes > 0) {
    const remainingSeconds = seconds % 60;
    if (remainingSeconds > 0 && minutes < 10) {
      // 10分未満なら秒も表示
      return `${minutes}分${remainingSeconds}秒`;
    }
    return `${minutes}分`;
  } else {
    return `${seconds}秒`;
  }
}

/**
 * 現在の日付と時刻をフォーマットする
 * @returns フォーマットされた日時文字列 (例: "2023/04/06 15:30")
 */
export function formatCurrentDateTime(): string {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');
  
  return `${year}/${month}/${day} ${hours}:${minutes}`;
}

/**
 * 経過時間を計算する
 * @param startTime 開始時間
 * @returns フォーマットされた経過時間 (例: "1時間23分")
 */
export function calculateElapsedTime(startTime: Date | string | null): string {
  if (!startTime) return "0分";
  
  const start = typeof startTime === 'string' ? new Date(startTime) : startTime;
  const now = new Date();
  const elapsedMs = now.getTime() - start.getTime();
  
  if (elapsedMs <= 0) return "0分";
  
  const seconds = Math.floor(elapsedMs / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  
  if (hours > 0) {
    return `${hours}時間${minutes % 60}分`;
  } else {
    return `${minutes}分`;
  }
}

/**
 * 経過時間に応じたスタイルを取得する
 * @param startTime 開始時間
 * @returns CSSクラス名
 */
export function getElapsedTimeStyle(startTime: Date | string | null): string {
  if (!startTime) return "text-blue-400";
  
  const start = typeof startTime === 'string' ? new Date(startTime) : startTime;
  const now = new Date();
  const elapsedMs = now.getTime() - start.getTime();
  const minutes = Math.floor(elapsedMs / (1000 * 60));
  
  if (minutes >= 120) { // 2時間以上
    return "text-red-500";
  } else if (minutes >= 60) { // 1時間以上
    return "text-orange-500";
  } else if (minutes >= 30) { // 30分以上
    return "text-amber-500";
  } else {
    return "text-blue-400";
  }
}
</file>

<file path="lib/messages.ts">
export interface MessageTemplate {
  seatTaken: (username: string, roomId: string, position: number, taskName?: string) => string;
  seatVacated: (username: string, roomId: string, position: number) => string;
  taskUpdated: (username: string, taskName: string) => string;
  welcome: (username: string) => string;
  error: (message: string) => string;
  noSeatAvailable: (username: string) => string;
  autoExited: (username: string, roomId: string, position: number) => string;
}

export const messageTemplates: MessageTemplate = {
  seatTaken: (username: string, roomId: string, position: number, taskName?: string) =>
    `🪑 ${username}さんが「${taskName || '作業中'}」のため、部屋${roomId}の座席${position}に着席しました！`,
  
  seatVacated: (username: string, roomId: string, position: number) =>
    `👋 ${username}さんが部屋${roomId}の座席${position}から退席しました。`,
  
  taskUpdated: (username: string, taskName: string) =>
    `📝 ${username}さんが作業内容を「${taskName}」に更新しました。`,
  
  welcome: (username: string) =>
    `👋 ようこそ、${username}さん！`,
  
  error: (message: string) =>
    `❌ エラーが発生しました: ${message}`,
    
  noSeatAvailable: (username: string) =>
    `😓 申し訳ありませんが、${username}さん向けの空席がありません。後ほど再度お試しください。`,
    
  autoExited: (username: string, roomId: string, position: number) =>
    `⏱ ${username}さんが2時間経過したため、部屋${roomId}の座席${position}から自動退席しました。`,
};
</file>

<file path="lib/mongodb.ts">
import { MongoClient } from 'mongodb';

if (!process.env.MONGODB_URI) {
  throw new Error('Please add your Mongo URI to .env.local');
}

const uri = process.env.MONGODB_URI;
const options = {};

let client;
let clientPromise: Promise<MongoClient>;

if (process.env.NODE_ENV === 'development') {
  // In development mode, use a global variable so that the value
  // is preserved across module reloads caused by HMR (Hot Module Replacement).
  let globalWithMongo = global as typeof globalThis & {
    _mongoClientPromise?: Promise<MongoClient>;
  };

  if (!globalWithMongo._mongoClientPromise) {
    client = new MongoClient(uri, options);
    globalWithMongo._mongoClientPromise = client.connect();
  }
  clientPromise = globalWithMongo._mongoClientPromise;
} else {
  // In production mode, it's best to not use a global variable.
  client = new MongoClient(uri, options);
  clientPromise = client.connect();
}

export default clientPromise;

export type Room = {
  _id: string;
  created_at: Date;
};

export type Seat = {
  _id: string;
  room_id: string;
  position: number;
  username: string | null;
  authorId: string | null;
  task: string | null;
  enterTime: Date | null;
  autoExitScheduled: Date | null;
  profileImageUrl: string | null;
  timestamp: Date;
  created_at: Date;
};
</file>

<file path="lib/sseUtils.ts">
import { Db } from 'mongodb';

/**
 * MongoDB から部屋と座席のデータを取得し、クライアント用にフォーマットする
 * @param db MongoDB データベース接続
 * @returns フォーマットされた部屋と座席のデータ
 */
export async function fetchRoomData(db: Db) {
  console.log('[SSE:Utils] Fetching room data from MongoDB');
  try {
    const rooms = await db.collection('rooms').find().toArray();
    console.log(`[SSE:Utils] Retrieved ${rooms.length} rooms`);
    const seats = await db.collection('seats').find().toArray();
    console.log(`[SSE:Utils] Retrieved ${seats.length} seats`);

    // roomsが空の場合は、シートを直接配列の最初の要素として使用する
    if (rooms.length === 0) {
      console.log('[SSE:Utils] No rooms found, creating a default room with all seats');
      const defaultRoom = {
        id: 'focus-room',
        type: 'focus',
        seats: seats.map(seat => ({
          id: seat._id.toString(),
          username: seat.username,
          task: seat.task,
          enterTime: seat.enterTime,
          autoExitScheduled: seat.autoExitScheduled,
          timestamp: seat.timestamp
        }))
      };
      return { rooms: [defaultRoom] };
    }

    const roomsWithSeats = rooms.map(room => ({
      id: room._id,
      seats: seats
        .filter(seat => seat.room_id === room._id)
        .sort((a, b) => a.position - b.position)
        .map(seat => ({
          id: seat._id.toString(),
          username: seat.username,
          task: seat.task,
          enterTime: seat.enterTime,
          autoExitScheduled: seat.autoExitScheduled,
          timestamp: seat.timestamp
        }))
    }));

    console.log('[SSE:Utils] Room data formatted successfully');
    return { rooms: roomsWithSeats };
  } catch (error) {
    console.error('[SSE:Utils] Error fetching room data:', error);
    return { rooms: [], error: 'Failed to fetch data' };
  }
}

/**
 * 指数バックオフ付きの再接続試行回数とタイムアウトを計算する
 * @param retryCount 現在の試行回数
 * @param baseDelay 基本の待機時間（ミリ秒）
 * @param maxDelay 最大待機時間（ミリ秒）
 * @returns 次回待機時間（ミリ秒）
 */
export function calculateBackoff(retryCount: number, baseDelay: number = 1000, maxDelay: number = 30000): number {
  // 指数バックオフ（2のべき乗）とランダム要素（ジッター）を加える
  const exponentialDelay = Math.min(
    maxDelay,
    baseDelay * Math.pow(2, retryCount) * (1 + Math.random() * 0.2)
  );
  return Math.round(exponentialDelay);
}

/**
 * システムメッセージをクライアントに送信するためのSSEメッセージを生成する
 * @param message メッセージ内容
 * @param type メッセージタイプ（info, warning, error など）
 * @returns フォーマットされたSSEメッセージ
 */
export function createSystemMessage(message: string, type: 'info' | 'warning' | 'error' = 'info'): string {
  return `event: system-message\ndata: ${JSON.stringify({ message, type, timestamp: new Date().toISOString() })}\n\n`;
}

/**
 * MongoDB Change Streamの接続状態を追跡するためのクラス
 * グローバルな状態を管理し、複数のSSE接続間で自動退室チェックの重複を防ぐ
 */
export class ChangeStreamManager {
  private static instance: ChangeStreamManager;
  private activeConnections: number = 0;

  private constructor() {}

  public static getInstance(): ChangeStreamManager {
    if (!ChangeStreamManager.instance) {
      ChangeStreamManager.instance = new ChangeStreamManager();
    }
    return ChangeStreamManager.instance;
  }

  /**
   * 新しいSSE接続を登録する
   * @returns 登録後のアクティブ接続数
   */
  public registerConnection(): number {
    this.activeConnections++;
    console.log(`[SSE:Manager] New connection registered. Active connections: ${this.activeConnections}`);
    // 最初の接続が登録されたことを示すフラグを返す
    return this.activeConnections;
  }

  /**
   * SSE接続の終了を登録する
   * @returns 残りのアクティブ接続数
   */
  public unregisterConnection(): number {
    this.activeConnections = Math.max(0, this.activeConnections - 1);
    console.log(`[SSE:Manager] Connection unregistered. Active connections: ${this.activeConnections}`);
    return this.activeConnections;
  }

  /**
   * 現在のアクティブな接続数を取得する
   * @returns アクティブな接続数
   */
  public getActiveConnections(): number {
    return this.activeConnections;
  }

  /**
   * このインスタンスで自動退室チェックを開始すべきか判断する
   * (通常、最初の接続時にtrueを返す)
   * @returns 開始すべきならtrue
   */
  public shouldStartAutoExitCheckOnRegister(): boolean {
    // activeConnectionsがインクリメントされた直後に呼ばれる想定
    return this.activeConnections === 1;
  }
}
</file>

<file path="lib/store.ts">
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

// ポモドーロモードの型
export type TimerMode = 'WORK' | 'BREAK' | 'LONG_BREAK';

// ポモドーロタイマーの設定
export const POMODORO_MODES = {
  WORK: {
    name: '作業中',
    duration: 25 * 60, // 25分（秒単位）
    color: 'bg-amber-500',
    nextMode: 'BREAK' as TimerMode,
    nextName: '休憩'
  },
  BREAK: {
    name: '休憩中',
    duration: 5 * 60, // 5分（秒単位）
    color: 'bg-green-500',
    nextMode: 'WORK' as TimerMode,
    nextName: '作業'
  },
  LONG_BREAK: {
    name: '長休憩',
    duration: 15 * 60, // 15分（秒単位）
    color: 'bg-blue-500',
    nextMode: 'WORK' as TimerMode,
    nextName: '作業'
  }
};

// 現在時刻をフォーマットする関数（再利用性のために外部化）
export const formatTime = (seconds: number): string => {
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
};

// 現在時刻に基づいてモードを判定する関数
export const determineTimeModeFromCurrentTime = (now: Date): {mode: TimerMode, timeLeft: number} => {
  const minutes = now.getMinutes();
  
  // 55-59分は休憩モード
  if (minutes >= 55 && minutes <= 59) {
    // 残り時間を計算（60分 - 現在分:秒）
    const nextHour = new Date(now);
    nextHour.setHours(nextHour.getHours() + 1, 0, 0, 0);
    const timeLeftMs = nextHour.getTime() - now.getTime();
    const timeLeftSec = Math.ceil(timeLeftMs / 1000);
    return { mode: "BREAK", timeLeft: timeLeftSec };
  }
  
  // 25-29分は休憩モード
  if (minutes >= 25 && minutes <= 29) {
    // 残り時間を計算（30分 - 現在分:秒）
    const nextHalfHour = new Date(now);
    nextHalfHour.setMinutes(30, 0, 0);
    const timeLeftMs = nextHalfHour.getTime() - now.getTime();
    const timeLeftSec = Math.ceil(timeLeftMs / 1000);
    return { mode: "BREAK", timeLeft: timeLeftSec };
  }
  
  // それ以外はフォーカスモード
  // 残り時間の計算（次の休憩時間までの時間）
  let targetMinute = 25;
  if (minutes >= 30 && minutes < 55) {
    targetMinute = 55;
  } else if (minutes >= 0 && minutes < 25) {
    targetMinute = 25;
  }
  
  const nextTarget = new Date(now);
  nextTarget.setMinutes(targetMinute, 0, 0);
  
  // 既に目標時間を過ぎている場合は次の時間帯に調整
  if (nextTarget.getTime() <= now.getTime()) {
    nextTarget.setHours(nextTarget.getHours() + 1);
  }
  
  const timeLeftMs = nextTarget.getTime() - now.getTime();
  const timeLeftSec = Math.ceil(timeLeftMs / 1000);
  
  return { mode: "WORK", timeLeft: timeLeftSec };
};

// ポモドーロタイマーの状態
interface PomodoroState {
  mode: TimerMode;
  timeLeft: number;
  isActive: boolean;
  progress: number;
  workSessionsCompleted: number;
  lastTimeBasedUpdate: number;
  
  // アクション
  startTimer: () => void;
  pauseTimer: () => void;
  resetTimer: () => void;
  switchMode: (mode: TimerMode) => void;
  updateRemainingTime: (seconds: number) => void;
  updateFromCurrentTime: () => void;
  tickTimer: () => void;
}

// ポモドーロタイマーのストア作成
export const usePomodoroStore = create<PomodoroState>()(
  persist(
    (set, get) => {
      // 現在時刻ベースの初期値を計算
      const { mode: initialMode, timeLeft: initialTimeLeft } = determineTimeModeFromCurrentTime(new Date());

      return {
        // 初期状態
        mode: initialMode,
        timeLeft: initialTimeLeft,
        isActive: true,
        progress: 0,
        workSessionsCompleted: 0,
        lastTimeBasedUpdate: Date.now(),

        // アクション
        startTimer: () => set({ isActive: true }),
        
        pauseTimer: () => set({ isActive: false }),
        
        resetTimer: () => {
          const currentMode = get().mode;
          set({
            timeLeft: POMODORO_MODES[currentMode].duration,
            isActive: false,
            progress: 0
          });
        },
        
        switchMode: (mode: TimerMode) => set({
          mode,
          timeLeft: POMODORO_MODES[mode].duration,
          progress: 0
        }),
        
        updateRemainingTime: (seconds: number) => {
          const currentMode = get().mode;
          const totalDuration = POMODORO_MODES[currentMode].duration;
          const progress = ((totalDuration - seconds) / totalDuration) * 100;
          
          set({
            timeLeft: seconds,
            progress: Math.min(Math.max(progress, 0), 100) // 0-100の範囲に制限
          });

          // ブラウザのタイトルを更新
          if (typeof document !== 'undefined') {
            const formattedTime = formatTime(seconds);
            const modeName = POMODORO_MODES[currentMode].name;
            const activeSymbol = get().isActive ? '▶' : '⏸';
            document.title = `${activeSymbol} ${formattedTime} - ${modeName}`;
          }
        },
        
        updateFromCurrentTime: () => {
          const now = Date.now();
          // 最小2秒の間隔をあけて更新（頻繁な更新を避ける）
          if (now - get().lastTimeBasedUpdate >= 2000) {
            const { mode, timeLeft } = determineTimeModeFromCurrentTime(new Date());
            set({
              mode,
              timeLeft,
              isActive: true,
              lastTimeBasedUpdate: now
            });
            
            // 残り時間の更新（タイトル更新などのため）
            get().updateRemainingTime(timeLeft);
          }
        },
        
        tickTimer: () => {
          if (!get().isActive) return;
          
          const currentTimeLeft = get().timeLeft;
          
          if (currentTimeLeft <= 0) {
            // タイマー終了時、次のモードに切り替え
            const currentMode = get().mode;
            const nextMode = POMODORO_MODES[currentMode].nextMode;
            
            // 作業モードが終了したらセッション数を増やす
            const newWorkSessionsCompleted = 
              currentMode === 'WORK' 
                ? get().workSessionsCompleted + 1 
                : get().workSessionsCompleted;
            
            set({
              mode: nextMode,
              timeLeft: POMODORO_MODES[nextMode].duration,
              progress: 0,
              workSessionsCompleted: newWorkSessionsCompleted
            });
          } else {
            // タイマーをカウントダウン
            get().updateRemainingTime(currentTimeLeft - 1);
          }
        }
      };
    },
    {
      name: 'pomodoro-timer-storage',
      // ブラウザ以外の環境でlocalStorageが使えない場合のフォールバック
      skipHydration: typeof window === 'undefined'
    }
  )
);
</file>

<file path="lib/types.ts">
// クライアント・サーバー共通の型定義

/**
 * YouTube API の型定義
 */
export interface Author {
  displayName: string;
  profileImageUrl: string;
  channelId: string;
}

export interface MessageSnippet {
  displayMessage: string;
  publishedAt: string;
}

export interface ChatItem {
  id: string;
  snippet: MessageSnippet;
  authorDetails: Author;
}

export interface ChatResponse {
  items: ChatItem[];
  nextPageToken: string;
  pollingIntervalMillis: number;
}

/**
 * 自動退室状態の型定義
 */
export interface AutoExitStatus {
  isScheduled: boolean;
  scheduledTime: Date | null;
  remainingTime: number | null; // ミリ秒単位
  formattedTime: string | null; // 表示用フォーマット
}

/**
 * 座席の型定義
 */
export interface Seat {
  id: string;
  room_id: string;
  position: number;
  username: string | null;
  authorId?: string | null;
  task?: string | null;
  enterTime?: Date | string | null;
  autoExitScheduled?: Date | string | null;
  profileImageUrl?: string | null;
  timestamp: Date | string;
}

/**
 * ユーザーカード用の型定義（クライアント側で使用）
 */
export interface UserCardData {
  id: string;
  name: string;
  avatar?: string;
  task?: string | null;
  autoExitScheduled?: Date | string | null;
  enterTime?: Date | string | null;
}

/**
 * コマンド実行結果の型定義
 */
export interface CommandResult {
  success: boolean;
  action?: 'enter' | 'exit' | 'update' | 'none' | 'create';
  seat?: {
    roomId: string;
    position: number;
    username?: string | null;
    previousUsername?: string;
    task?: string | null;
    id?: string;
  };
  message?: string;
  error?: string;
}

/**
 * YouTube API エラーの型定義
 */
export class YouTubeAPIError extends Error {
  status?: number;
  code?: string;
  
  constructor(message: string, status?: number, code?: string) {
    super(message);
    this.name = 'YouTubeAPIError';
    this.status = status;
    this.code = code;
  }
}

/**
 * コマンドの型定義
 */
export interface Command {
  command: string;
  taskName?: string;
  authorName: string;
  authorId: string;
  commentId: string;
  commentText: string;
}

/**
 * 自動退室機能の処理結果
 */
export interface AutoExitProcessResult {
  processedCount: number;
  details: Array<{
    username: string | null;
    roomId: string;
    position: number;
    success: boolean;
    error?: string;
  }>;
}
</file>

<file path="lib/utils.ts">
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

/**
 * コメントからコマンドを検出する関数
 * @param commentText コメントテキスト
 * @returns コマンド情報（種類とタスク名）
 */
export function detectCommand(commentText: string): {
  command: 'work' | 'finish' | null;
  taskName?: string;
} {
  if (commentText.startsWith('/work')) {
    // /work コマンドの処理
    // /work の後のスペースを削除してタスク名を抽出
    const taskName = commentText.substring(5).trim();
    return { command: 'work', taskName: taskName || '作業中' }; // タスク名がない場合はデフォルト値
  }
  
  if (commentText.trim() === '/finish') {
    // /finish コマンドの処理 (完全一致で判定)
    return { command: 'finish' };
  }
  
  return { command: null }; // コマンドなし
}

/**
 * 自動退室までの残り時間を計算する関数
 * @param autoExitTime 自動退室予定時刻
 * @returns フォーマットされた残り時間文字列
 */
export function calculateRemainingTime(autoExitTime: Date | string | null): string {
  if (!autoExitTime) return "";
  
  const exitTime = typeof autoExitTime === 'string' ? new Date(autoExitTime) : autoExitTime;
  const now = new Date();
  const diffMs = exitTime.getTime() - now.getTime();
  
  if (diffMs <= 0) return "間もなく";
  
  const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
  const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
  
  if (diffHours > 0) {
    return diffMinutes > 0 ? `${diffHours}時間${diffMinutes}分` : `${diffHours}時間`;
  } else {
    return `${diffMinutes}分`;
  }
}

/**
 * 残り時間に応じたスタイルクラス名を取得する関数
 * @param autoExitTime 自動退室予定時刻
 * @returns テキストカラークラス名
 */
export function getRemainingTimeStyle(autoExitTime: Date | string | null): string {
  if (!autoExitTime) return "";
  
  const exitTime = typeof autoExitTime === 'string' ? new Date(autoExitTime) : autoExitTime;
  const now = new Date();
  const diffMs = exitTime.getTime() - now.getTime();
  const diffMinutes = diffMs / (1000 * 60);
  
  if (diffMinutes < 10) {
    return "text-red-500"; // 残り10分未満は赤色
  } else if (diffMinutes < 30) {
    return "text-orange-400"; // 残り30分未満はオレンジ色
  } else {
    return "text-amber-400"; // 通常は金色
  }
}

/**
 * 入室してからの経過時間を計算する関数
 * @param enterTime 入室時刻
 * @returns フォーマットされた経過時間文字列
 */
export function calculateElapsedTime(enterTime: Date | string | null): string {
  if (!enterTime) return "";
  
  const startTime = typeof enterTime === 'string' ? new Date(enterTime) : enterTime;
  const now = new Date();
  const diffMs = now.getTime() - startTime.getTime();
  
  if (diffMs <= 0) return "0分";
  
  const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
  const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
  
  if (diffHours > 0) {
    return diffMinutes > 0 ? `${diffHours}時間${diffMinutes}分` : `${diffHours}時間`;
  } else {
    return `${diffMinutes}分`;
  }
}

/**
 * 経過時間に応じたスタイルクラス名を取得する関数
 * @param enterTime 入室時刻
 * @returns テキストカラークラス名
 */
export function getElapsedTimeStyle(enterTime: Date | string | null): string {
  if (!enterTime) return "";
  
  const startTime = typeof enterTime === 'string' ? new Date(enterTime) : enterTime;
  const now = new Date();
  const diffMs = now.getTime() - startTime.getTime();
  const diffMinutes = diffMs / (1000 * 60);
  
  if (diffMinutes > 120) {
    return "text-green-500"; // 2時間以上は緑色
  } else if (diffMinutes > 60) {
    return "text-amber-400"; // 1時間以上は金色
  } else {
    return "text-blue-400"; // 1時間未満は青色
  }
}
</file>

<file path="scripts/create-indexes.ts">
import clientPromise from '../lib/mongodb';

async function createIndexes() {
  try {
    console.log("Connecting to MongoDB...");
    const client = await clientPromise;
    const db = client.db();
    
    console.log("Creating indexes for 'seats' collection...");
    
    // username フィールドのインデックス作成
    await db.collection('seats').createIndex(
      { username: 1 },
      { background: true, name: "idx_username" }
    );
    console.log("Created index for 'username'");
    
    // 自動退室チェック用の複合インデックス作成
    await db.collection('seats').createIndex(
      { autoExitScheduled: 1, username: 1 },
      { background: true, name: "idx_auto_exit" }
    );
    console.log("Created composite index for 'autoExitScheduled' and 'username'");
    
    // authorId フィールドのインデックス作成
    await db.collection('seats').createIndex(
      { authorId: 1 },
      { background: true, name: "idx_author_id" }
    );
    console.log("Created index for 'authorId'");
    
    // room_id と position の複合インデックス作成
    await db.collection('seats').createIndex(
      { room_id: 1, position: 1 },
      { background: true, unique: true, name: "idx_room_position" }
    );
    console.log("Created composite unique index for 'room_id' and 'position'");
    
    console.log("All indexes created successfully!");
    
    // 既存のインデックス一覧を表示
    const indexes = await db.collection('seats').indexes();
    console.log("Current indexes:");
    console.log(indexes);
    
    process.exit(0);
  } catch (error) {
    console.error("Error creating indexes:", error);
    process.exit(1);
  }
}

createIndexes();
</file>

<file path="scripts/init-db.ts">
import clientPromise from '@/lib/mongodb';

async function initializeDatabase() {
  try {
    const client = await clientPromise;
    const db = client.db('coworking');

    // Create rooms
    const rooms = ['30', '31'];
    await Promise.all(rooms.map(async (roomId) => {
      await db.collection('rooms').updateOne(
        { _id: roomId },
        {
          $setOnInsert: {
            created_at: new Date()
          }
        },
        { upsert: true }
      );
    }));

    // Create seats
    for (const roomId of rooms) {
      for (let position = 1; position <= 4; position++) {
        await db.collection('seats').updateOne(
          { room_id: roomId, position },
          {
            $setOnInsert: {
              username: null,
              timestamp: new Date(),
              created_at: new Date()
            }
          },
          { upsert: true }
        );
      }
    }

    console.log('Database initialized successfully');
  } catch (error) {
    console.error('Failed to initialize database:', error);
    process.exit(1);
  }
}

initializeDatabase();
</file>

<file path="scripts/poll-youtube-chat.ts">
// YouTubeライブチャットのコメントを定期的にポーリングするスクリプト（TypeScript版）

import dotenv from 'dotenv';
import { getLiveChatMessages, getLiveChatId } from '../lib/youtube';

// 環境変数を読み込む
dotenv.config({ path: '.env.local' });

// コメントアイテムの型定義
interface ChatItem {
  authorDetails?: {
    displayName?: string;
    [key: string]: any;
  };
  snippet?: {
    displayMessage?: string;
    publishedAt?: string;
    [key: string]: any;
  };
  [key: string]: any;
}

// チャットデータの型定義
interface ChatData {
  items?: ChatItem[];
  pollingIntervalMillis?: number;
  nextPageToken?: string;
  [key: string]: any;
}

// 検出したコマンドを処理する関数
function processCommand(author: string, command: string, roomNumber: string): void {
  console.log(`[コマンド処理] ユーザー「${author}」を部屋「${roomNumber}」に割り当てます。`);
  // ここで座席管理システムなどと連携する処理を追加
  // 例: データベースの更新、通知の送信など
}

// ポーリング処理を行う関数
async function pollYouTubeChat(): Promise<void> {
  try {
    // 環境変数から動画IDを取得
    const videoId = process.env.YOUTUBE_VIDEO_ID;
    
    if (!videoId) {
      console.error('YOUTUBE_VIDEO_IDが設定されていません。');
      return;
    }
    
    console.log('YouTubeライブチャットのポーリングを開始します...');
    console.log(`動画ID: ${videoId}`);
    
    // 動画IDからライブチャットIDを取得
    const liveChatId = await getLiveChatId(videoId);
    
    if (!liveChatId) {
      console.error('ライブチャットIDが取得できませんでした。ライブ配信が終了しているか確認してください。');
      return;
    }
    
    console.log(`ライブチャットID: ${liveChatId}`);
    
    // ポーリングループを開始
    await pollChatLoop(liveChatId);
    
  } catch (error) {
    console.error('エラーが発生しました:', error);
  }
}

// 継続的なポーリングを行うループ関数
async function pollChatLoop(liveChatId: string, pageToken: string | null = null): Promise<void> {
  try {
    // コメントデータを取得
    const chatData: ChatData = await getLiveChatMessages(liveChatId, pageToken || undefined);
    
    // 次回のポーリング間隔
    const nextPollTime = chatData.pollingIntervalMillis || 5000; // デフォルトは5秒
    
    // 次のページトークン
    const nextPageToken = chatData.nextPageToken;
    
    // ステータス表示
    const timestamp = new Date().toLocaleString('ja-JP');
    console.log(`\n[${timestamp}] コメント取得成功 (${chatData.items?.length || 0}件)`);
    
    // 取得したコメントを処理
    if (chatData.items && chatData.items.length > 0) {
      chatData.items.forEach(item => {
        const author = item.authorDetails?.displayName || '不明なユーザー';
        const text = item.snippet?.displayMessage || '';
        const publishTime = new Date(item.snippet?.publishedAt || '').toLocaleString('ja-JP');
        
        console.log(`[${publishTime}] ${author}: ${text}`);
        
        // コマンド検出 (例: /30)
        const commandMatch = text.match(/\/(\d+)/);
        if (commandMatch) {
          const roomNumber = commandMatch[1];
          console.log(`    → コマンド「/${roomNumber}」を検出しました！`);
          
          // 検出したコマンドを処理
          processCommand(author, text, roomNumber);
        }
      });
    }
    
    // 次回のポーリング時間を表示
    console.log(`次回のポーリングまで ${nextPollTime}ms 待機します...`);
    
    // 指定された間隔後に再帰的に呼び出し
    setTimeout(() => {
      pollChatLoop(liveChatId, nextPageToken || null);
    }, nextPollTime);
    
  } catch (error) {
    console.error('ポーリング中にエラーが発生しました:', error);
    
    // エラー発生時は少し待ってから再試行
    console.log('10秒後に再試行します...');
    setTimeout(() => {
      pollChatLoop(liveChatId, pageToken);
    }, 10000);
  }
}

// メイン処理を実行
pollYouTubeChat().catch(error => {
  console.error('予期せぬエラーが発生しました:', error);
});
</file>

<file path="scripts/test-youtube-api.ts">
// テスト用スクリプト: YouTube APIを利用してライブチャットのコメントを取得する（TypeScript版）

import dotenv from 'dotenv';
import { getLiveChatMessages, getLiveChatId } from '../lib/youtube';

// 環境変数を読み込む
dotenv.config({ path: '.env.local' });

// メインの非同期関数
async function testYouTubeApi(): Promise<void> {
  try {
    console.log('YouTube API接続テストを開始します...');
    
    // 環境変数から動画IDを取得
    const videoId = process.env.YOUTUBE_VIDEO_ID;
    
    if (!videoId) {
      console.log('YOUTUBE_VIDEO_IDが設定されていません。');
      return;
    }
    
    console.log(`動画ID: ${videoId}`);
    
    // 動画IDからライブチャットIDを取得
    console.log('ライブチャットIDを取得しています...');
    const liveChatId = await getLiveChatId(videoId);
    
    if (!liveChatId) {
      console.log('ライブチャットIDが取得できませんでした。');
      console.log('この動画はライブ配信ではないか、ライブ配信が終了している可能性があります。');
      return;
    }
    
    console.log(`ライブチャットID: ${liveChatId}`);
    
    // ライブチャットのコメントを取得
    console.log('ライブチャットコメントを取得しています...');
    const chatData = await getLiveChatMessages(liveChatId);
    
    // 取得したデータを表示
    console.log('ライブチャット情報:');
    console.log(`ポーリング間隔: ${chatData.pollingIntervalMillis}ms`);
    console.log(`次のページトークン: ${chatData.nextPageToken}`);
    console.log(`コメント数: ${chatData.items?.length || 0}`);
    
    // 各コメントの内容を表示
    if (chatData.items && chatData.items.length > 0) {
      console.log('\n=== 最新のコメント ===');
      chatData.items.forEach((item, index) => {
        const author = item.authorDetails?.displayName || '不明なユーザー';
        const text = item.snippet?.displayMessage || '';
        const timestamp = new Date(item.snippet?.publishedAt || '').toLocaleString('ja-JP');
        
        console.log(`\n#${index + 1} [${timestamp}] ${author}:`);
        console.log(`    "${text}"`);
        
        // コマンド検出 (例: /30) のテスト
        const commandMatch = text.match(/\/(\d+)/);
        if (commandMatch) {
          const roomNumber = commandMatch[1];
          console.log(`    ※ コマンド検出: /「${roomNumber}」の部屋に割り当て`);
        }
      });
    } else {
      console.log('\nコメントはありません。');
    }
    
    console.log('\nYouTube API接続テスト完了');
  } catch (error) {
    console.error('エラーが発生しました:', error);
  }
}

// スクリプト実行
testYouTubeApi();
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path=".prettierrc">
{
  "semi": true,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "es5",
  "printWidth": 100,
  "arrowParens": "avoid"
}
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
</file>

<file path="implementation-tasks.md">
# オンラインコワーキングスペース 機能追加 タスクリスト

## フェーズ1: データモデル拡張

-   [x] `lib/mongodb.ts` の `Seat` 型定義に `task`, `enterTime`, `autoExitScheduled` フィールドを追加する
-   [x] MongoDB の `seats` コレクションに `username` フィールド用のインデックスを作成する (`{ "username": 1 }`)
-   [x] MongoDB の `seats` コレクションに自動退室チェック用の複合インデックスを作成する (`{ "autoExitScheduled": 1, "username": 1 }`)
-   [x] MongoDB の `seats` コレクションにユーザー識別用の `authorId` フィールドを追加し、インデックスを作成する (`{ "authorId": 1 }`)

## フェーズ2: コマンド処理機能の実装

-   [x] `lib/utils.ts` を作成（または更新）し、`detectCommand` 関数を実装する
-   [x] `lib/utils.ts` に残り時間計算用の `calculateRemainingTime` 関数を実装する
-   [x] `lib/utils.ts` に残り時間スタイル用の `getRemainingTimeStyle` 関数を実装する
-   [x] `lib/messages.ts` に `/work` (入室/更新)、`/finish` (退室)、満席時のメッセージテンプレートを追加する
-   [x] `app/api/youtube-comments/route.ts` に `detectCommand` をインポートし、コメントごとに実行するロジックを追加する
-   [x] `app/api/youtube-comments/route.ts` 内で、`/work` コマンド検出時に `authorId` で既存座席を確認する処理を実装する
-   [x] `app/api/youtube-comments/route.ts` 内で、`/work` コマンド検出時に新規入室処理（空席検索とDB更新: `username`, `authorId`, `task`, `enterTime`, `autoExitScheduled` 設定）を実装する
-   [x] `app/api/youtube-comments/route.ts` 内で、`/work` コマンド検出時に既存席更新処理（DB更新: `task`, `enterTime`, `autoExitScheduled` 更新）を実装する
-   [x] `app/api/youtube-comments/route.ts` 内で、`/finish` コマンド検出時に `authorId` で座席を検索し、DB更新（関連フィールドを `null` 化）する処理を実装する
-   [x] `app/api/youtube-comments/route.ts` 内で、コマンド処理成功時に `sendChatMessage` を使用してYouTubeチャットに応答メッセージを送信する処理を実装する
-   [x] コマンド処理におけるエラーハンドリングを実装する（例: 満席時、DBエラー時）

## フェーズ3: 自動退室機能の実装

-   [x] `app/api/check-auto-exit/route.ts` APIエンドポイントを作成し、期限切れ座席を検索して更新するロジックを実装する
-   [x] `app/api/sse/route.ts` の `start` メソッド内で、自動退室チェック関数 (`checkAutoExit`) を定義する
-   [x] `app/api/sse/route.ts` の `start` メソッド内で、`setInterval` を使用して `checkAutoExit` を定期実行する（例: 1分ごと）
-   [x] `app/api/sse/route.ts` の `checkAutoExit` 関数内で、座席が更新された場合に最新の座席情報を取得し、SSEでクライアントに送信する処理を実装する
-   [x] `app/api/sse/route.ts` のストリームクリーンアップ時に `clearInterval` を呼び出す処理を追加する
-   [ ] (代替/補助) 必要に応じて、外部Cronジョブから `/api/check-auto-exit` を呼び出す設定を行う

## フェーズ4: フロントエンドUI実装

-   [x] `app/page.tsx` の全体レイアウトを更新し、背景ビデオ/画像、ヘッダー、フッター構造を適用する
-   [x] ヘッダーコンポーネント (`components/Header.tsx` または `app/page.tsx` 内) に現在日時表示機能を実装し、1秒ごとに更新する
-   [x] ポモドーロタイマーコンポーネント (`components/PomodoroTimer.tsx` または `app/page.tsx` 内) を実装し、モード、残り時間、プログレスバーを表示・更新する
-   [x] `app/page.tsx` でSSEから受信した座席データ (`rooms` または `seats`) を管理するステートを実装する
-   [x] フォーカスルームコンポーネント (`components/FocusRoom.tsx`) を作成し、ルームヘッダーとユーザーカードグリッドを表示する
-   [x] `components/FocusRoom.tsx` にユーザーカードのページネーション機能（ステート、表示ロジック、インジケーター）を実装する
-   [x] `components/FocusRoom.tsx` にページ切り替え時のスライドアニメーション（ステート管理、CSSクラス適用）を実装する
-   [x] ユーザーカードコンポーネント (`components/UserCard.tsx`) を作成し、アバター、名前、タスクを表示する
-   [x] `components/UserCard.tsx` に `calculateRemainingTime` と `getRemainingTimeStyle` を使用して残り時間とそのスタイルを表示する機能を実装する
-   [x] `app/globals.css` にカードスライドアニメーション用のCSSクラス (`card-slide-out`, `card-slide-in`) を定義する
-   [x] UI全体のレスポンシブデザイン対応を行う（Tailwindのブレークポイント活用）

## フェーズ5: 統合とテスト

-   [ ] `/work` コマンドによる入室、タスク表示、残り時間表示のテスト
-   [ ] `/finish` コマンドによる退室とUI反映のテスト
-   [ ] 既存ユーザーによる `/work` コマンドでのタスク更新テスト
-   [ ] 無効なコマンドや引数なしコマンドの処理テスト
-   [ ] 自動退室機能が指定時間後に動作し、UIに反映されるかのテスト
-   [ ] SSEによる他のユーザーの入退室や自動退室がリアルタイムで反映されるかのテスト
-   [ ] ポモドーロタイマーのモード切替、時間更新、プログレスバー表示のテスト
-   [ ] 異なる画面サイズ（モバイル、タブレット、デスクトップ）での表示崩れがないかのテスト
-   [ ] 長いタスク名や特殊文字を含むタスク名の処理テスト
-   [ ] 満席時の `/work` コマンド処理テスト
-   [ ] APIエラー（YouTube, DB）発生時のフォールバックやエラー表示のテスト
-   [ ] (任意) 複数ユーザーでの同時操作テスト
-   [ ] (任意) パフォーマンステスト（高負荷時のレスポンス確認）
</file>

<file path="jest.config.js">
// Jest configuration for Next.js with TypeScript
const nextJest = require('next/jest');

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
});

// Add any custom config to be passed to Jest
const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  testEnvironment: 'jest-environment-jsdom',
  moduleNameMapper: {
    // Handle module aliases (this will be automatically configured for you soon)
    '^@/components/(.*)$': '<rootDir>/components/$1',
    '^@/app/(.*)$': '<rootDir>/app/$1',
    '^@/lib/(.*)$': '<rootDir>/lib/$1',
    '^@/hooks/(.*)$': '<rootDir>/hooks/$1',
  },
  testPathIgnorePatterns: ['<rootDir>/node_modules/', '<rootDir>/.next/'],
  transform: {
    // Use babel-jest to transpile tests with the next/babel preset
    '^.+\\.(js|jsx|ts|tsx)$': ['babel-jest', { presets: ['next/babel'] }],
  },
  transformIgnorePatterns: [
    '/node_modules/',
    '^.+\\.module\\.(css|sass|scss)$',
  ],
  collectCoverage: true,
  collectCoverageFrom: [
    'app/**/*.{js,jsx,ts,tsx}',
    'components/**/*.{js,jsx,ts,tsx}',
    'lib/**/*.{js,jsx,ts,tsx}',
    'hooks/**/*.{js,jsx,ts,tsx}',
    '!**/*.d.ts',
    '!**/node_modules/**',
  ],
};

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
module.exports = createJestConfig(customJestConfig);
</file>

<file path="jest.setup.js">
// Learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

// Mock the TextEncoder/TextDecoder which are used in SSE implementation
global.TextEncoder = require('util').TextEncoder;
global.TextDecoder = require('util').TextDecoder;

// Mock localStorage
if (typeof window !== 'undefined') {
  // Browserの場合、mock不要
} else {
  // Node.jsの場合、localStorageをモック
  const localStorageMock = (function() {
    let store = {};
    return {
      getItem(key) {
        return store[key] || null;
      },
      setItem(key, value) {
        store[key] = String(value);
      },
      removeItem(key) {
        delete store[key];
      },
      clear() {
        store = {};
      }
    };
  })();
  
  Object.defineProperty(global, 'localStorage', {
    value: localStorageMock
  });
}

// Mock Next.js router
jest.mock('next/navigation', () => ({
  useRouter() {
    return {
      push: jest.fn(),
      replace: jest.fn(),
      prefetch: jest.fn(),
      back: jest.fn(),
    };
  },
  useSearchParams() {
    return {
      get: jest.fn(),
    };
  },
  usePathname() {
    return '';
  },
}));
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss';

const config: Config = {
  darkMode: ['class'],
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic':
          'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0',
          },
          to: {
            height: 'var(--radix-accordion-content-height)',
          },
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)',
          },
          to: {
            height: '0',
          },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
};
export default config;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="app/api/check-auto-exit/route.ts">
import { NextResponse } from 'next/server';
import clientPromise from '@/lib/mongodb';
import { Db, ObjectId } from 'mongodb';
import { getLiveChatId, sendChatMessage } from '@/lib/youtube';
import { messageTemplates } from '@/lib/messages';
import { AutoExitProcessResult } from '@/lib/types';

/**
 * 自動退室が必要なユーザーをチェックして退室処理を行う
 * @param db MongoDB データベース接続
 * @param sendNotification YouTube通知メッセージを送信するかどうか
 * @returns 処理された座席の数と詳細情報
 */
async function checkAndProcessAutoExit(
  db: Db,
  sendNotification: boolean = false
): Promise<AutoExitProcessResult> {
  const results: AutoExitProcessResult = {
    processedCount: 0,
    details: [] 
  };

  try {
    const seatsCollection = db.collection('seats');
    const currentTime = new Date();
    
    console.log(`[AutoExit] ${currentTime.toISOString()}に自動退室チェックを実行`);
    
    // 期限切れの座席を検索（入室中かつ自動退室時間が現在時刻より前）
    const expiredSeats = await seatsCollection.find({
      username: { $ne: null },
      autoExitScheduled: { $lt: currentTime }
    }).toArray();
    
    if (expiredSeats.length === 0) {
      console.log('[AutoExit] 期限切れの座席はありませんでした');
      return results;
    }
    
    console.log(`[AutoExit] ${expiredSeats.length}件の期限切れ座席を処理します`);
    
    // YouTube通知のための準備
    let liveChatId: string | null = null;
    if (sendNotification) {
      const videoId = process.env.YOUTUBE_VIDEO_ID;
      if (videoId) {
        try {
          liveChatId = await getLiveChatId(videoId);
        } catch (error) {
          console.error('[AutoExit] YouTubeのliveChatID取得中にエラーが発生しました:', error);
        }
      }
    }
    
    // 各座席を処理
    for (const seat of expiredSeats) {
      const username = seat.username;
      const roomId = seat.room_id;
      const position = seat.position;
      
      try {
        // 座席を空席に設定
        await seatsCollection.updateOne(
          { _id: seat._id },
          { 
            $set: { 
              username: null, 
              authorId: null, 
              task: null, 
              enterTime: null, 
              autoExitScheduled: null,
              timestamp: new Date()
            } 
          }
        );
        
        console.log(`[AutoExit] ${username}を自動退室しました (部屋: ${roomId}, 座席: ${position})`);
        
        // 自動退室メッセージをYouTubeチャットに送信（設定されている場合）
        if (sendNotification && liveChatId && username) {
          await sendChatMessage(
            liveChatId, 
            messageTemplates.autoExited(username, roomId, position)
          );
        }
        
        results.processedCount++;
        results.details.push({
          username,
          roomId,
          position,
          success: true
        });
      } catch (error) {
        console.error(`[AutoExit] 座席(${roomId}-${position})の自動退室処理中にエラーが発生:`, error);
        results.details.push({
          username,
          roomId,
          position,
          success: false,
          error: error instanceof Error ? error.message : '不明なエラー'
        });
      }
    }
    
    return results;
  } catch (error) {
    console.error('[AutoExit] 自動退室処理全体でエラーが発生しました:', error);
    throw error;
  }
}

/**
 * POST /api/check-auto-exit
 * 自動退室チェックを実行するAPIエンドポイント
 */
export async function POST(request: Request) {
  console.log('[API] 自動退室チェックリクエストを受信');
  
  try {
    // リクエストボディを解析
    const { sendNotification = false } = await request.json();
    
    // MongoDBに接続
    const client = await clientPromise;
    const db = client.db('coworking');
    
    // 自動退室チェックを実行
    const result = await checkAndProcessAutoExit(db, sendNotification);
    
    return NextResponse.json({
      success: true, 
      processedCount: result.processedCount,
      details: result.details
    });
    
  } catch (error) {
    console.error('[API] 自動退室チェック中にエラーが発生:', error);
    
    return NextResponse.json(
      { error: '自動退室チェックに失敗しました', details: (error as Error).message },
      { status: 500 }
    );
  }
}

/**
 * GET /api/check-auto-exit
 * システムからの定期実行用エンドポイント
 */
export async function GET() {
  console.log('[API] 自動退室チェックのGETリクエストを受信 (システム実行)');
  
  try {
    // MongoDBに接続
    const client = await clientPromise;
    const db = client.db('coworking');
    
    // 自動退室チェックを実行（通知送信は有効）
    const result = await checkAndProcessAutoExit(db, true);
    
    return NextResponse.json({
      success: true, 
      processedCount: result.processedCount,
      details: result.details
    });
    
  } catch (error) {
    console.error('[API] 自動退室チェック中にエラーが発生:', error);
    
    return NextResponse.json(
      { error: '自動退室チェックに失敗しました', details: (error as Error).message },
      { status: 500 }
    );
  }
}
</file>

<file path="app/api/sse/route.ts">
import { NextResponse } from 'next/server';
import clientPromise from '@/lib/mongodb';
import { checkAndProcessAutoExit } from '@/lib/autoExit';
import { fetchRoomData, calculateBackoff, createSystemMessage, ChangeStreamManager } from '@/lib/sseUtils';
import { ChangeStream, ChangeStreamDocument, Db } from 'mongodb';

export async function GET() {
  console.log('[SSE] Handler started');
  try {
    console.log('[SSE] Connecting to MongoDB...');
    const client = await clientPromise;
    const db: Db = client.db('coworking');
    console.log('[SSE] MongoDB connection established');
    const encoder = new TextEncoder();

    // シングルトンのChangeStreamManagerを取得
    const manager = ChangeStreamManager.getInstance();

    // コントローラーがクローズされたかを追跡するフラグ
    let isControllerClosed = false;
    // 再接続の試行回数
    let changeStreamRetryCount = 0;
    // アクティブなChangeStream
    let seatsChangeStream: ChangeStream | null = null;
    let notificationsChangeStream: ChangeStream | null = null;
    // この接続が管理する自動退室チェックのインターバルID
    let autoExitIntervalId: NodeJS.Timeout | null = null;

    const stream = new ReadableStream({
      async start(controller) {
        console.log('[SSE] Stream initialization started');
        // このSSE接続を登録
        manager.registerConnection();

        // 自動退室チェック関数
        const checkAutoExit = async () => {
          // コントローラーがクローズされていたら何もしない
          if (isControllerClosed) {
            console.log('[SSE] Auto-exit check skipped: Controller closed.');
            // インターバルもクリアすべき
            if (autoExitIntervalId) {
               clearInterval(autoExitIntervalId);
               autoExitIntervalId = null;
               console.log('[SSE] Auto-exit interval cleared due to closed controller during check.');
            }
            return;
          }
          try {
            console.log('[SSE] 自動退室チェックを実行します');
            const results = await checkAndProcessAutoExit(db, false); // 通知は無効

            if (results.processedCount > 0) {
              console.log(`[SSE] ${results.processedCount}件の座席を自動退室処理しました`);
              if (!isControllerClosed) {
                const updatedData = await fetchRoomData(db);
                controller.enqueue(encoder.encode(`data: ${JSON.stringify(updatedData)}\n\n`));
                controller.enqueue(encoder.encode(
                  createSystemMessage(`${results.processedCount}人のユーザーが自動退室しました`, 'info')
                ));
                console.log('[SSE] 自動退室後のデータをクライアントに送信しました');
              }
            } else {
              console.log('[SSE] 期限切れの座席はありませんでした');
            }
          } catch (error) {
            console.error('[SSE] 自動退室チェック中にエラーが発生しました:', error);
             if (!isControllerClosed) {
                controller.enqueue(encoder.encode(
                  createSystemMessage(`自動退室チェック中にエラー発生: ${(error as Error).message}`, 'error')
                ));
            }
          }
        };

        // seats コレクションの Change Stream を設定する関数
        const setupSeatsChangeStream = async () => {
          try {
            if (seatsChangeStream) {
               await seatsChangeStream.close().catch((err: Error) => console.error('[SSE] Error closing previous seats change stream:', err));
               seatsChangeStream = null; // Clear reference
            }

            console.log('[SSE] Setting up MongoDB seats change stream');
            seatsChangeStream = db.collection('seats').watch();
            console.log('[SSE] Seats change stream initialized');

            // --- 自動退室チェックの開始ロジック ---
            // このインスタンスで、かつ最初の接続の場合のみインターバルを開始する
            if (manager.shouldStartAutoExitCheckOnRegister() && !autoExitIntervalId) {
              console.log('[SSE] Starting auto-exit check interval for this instance.');
              autoExitIntervalId = setInterval(checkAutoExit, 60000); // 1分ごと
            } else if (autoExitIntervalId) {
               console.log('[SSE] Auto-exit check interval is already running for this connection.');
            }
             else {
              console.log('[SSE] Auto-exit check interval not started (not the first connection for this instance or already running).');
            }
            // --- ここまで ---

            seatsChangeStream.on('change', async (changeEvent: ChangeStreamDocument) => {
              if (isControllerClosed) {
                console.log('[SSE] Controller is already closed, ignoring change event');
                return;
              }
              console.log('[SSE] Change detected in seats collection:', JSON.stringify(changeEvent.operationType));
              try {
                console.log('[SSE] Fetching updated data after change');
                const data = await fetchRoomData(db);
                console.log('[SSE] Sending updated data to client');
                if (!isControllerClosed) {
                    controller.enqueue(encoder.encode(`data: ${JSON.stringify(data)}\n\n`));
                }
              } catch (error) {
                console.error('[SSE] Error processing change stream update:', error);
                if (!isControllerClosed) {
                  controller.enqueue(encoder.encode(`data: ${JSON.stringify({ error: 'Update failed' })}\n\n`));
                  controller.enqueue(encoder.encode(
                    createSystemMessage('データ更新中にエラーが発生しました', 'error')
                  ));
                }
              }
            });

            seatsChangeStream.on('error', async (error: Error) => {
              console.error('[SSE] Seats change stream error:', error);
              if (!isControllerClosed) {
                controller.enqueue(encoder.encode(
                  createSystemMessage('サーバーとの接続に問題が発生しました。再接続を試みています...', 'warning')
                ));
              }

              console.log('[SSE] Closing seats change stream due to error');
              if (seatsChangeStream) {
                await seatsChangeStream.close().catch((err: Error) => console.error('[SSE] Error closing seats change stream on error:', err));
                seatsChangeStream = null; // Clear reference after closing
              }

              const MAX_RETRIES = 10;
              if (changeStreamRetryCount < MAX_RETRIES && !isControllerClosed) {
                changeStreamRetryCount++;
                const delayMs = calculateBackoff(changeStreamRetryCount);
                console.log(`[SSE] Will attempt to reconnect change stream in ${delayMs}ms (retry ${changeStreamRetryCount}/${MAX_RETRIES})`);

                setTimeout(async () => {
                  if (!isControllerClosed) {
                    console.log(`[SSE] Attempting to reconnect to change stream (retry ${changeStreamRetryCount}/${MAX_RETRIES})`);
                    try {
                      await setupChangeStream();
                      // 再接続成功したらリトライカウントをリセット
                      changeStreamRetryCount = 0; // リセット！
                      console.log('[SSE] Successfully reconnected to change stream');

                      if (!isControllerClosed) {
                        controller.enqueue(encoder.encode(
                          createSystemMessage('サーバーとの接続が回復しました', 'info')
                        ));
                        const refreshedData = await fetchRoomData(db);
                        controller.enqueue(encoder.encode(`data: ${JSON.stringify(refreshedData)}\n\n`));
                      }
                    } catch (reconnectError) {
                      console.error('[SSE] Failed to reconnect to change stream:', reconnectError);
                      // 再接続失敗した場合、さらに待機するか、エラー処理を継続
                    }
                  }
                }, delayMs);
              } else if (!isControllerClosed) {
                console.error(`[SSE] Maximum reconnection attempts (${MAX_RETRIES}) reached or controller closed`);
                controller.enqueue(encoder.encode(
                  createSystemMessage('サーバーとの接続が失われました。ページを再読み込みしてください。', 'error')
                ));
              }
            });
          } catch (setupError) {
            console.error('[SSE] Error setting up seats change stream:', setupError);
            if (!isControllerClosed) {
                controller.enqueue(encoder.encode(
                    createSystemMessage('座席データのストリーム監視設定に失敗しました。', 'error')
                ));
            }
            throw setupError; // エラーを上に伝播させる
          }
        };

        // notifications コレクションの Change Stream を設定する関数
        const setupNotificationsChangeStream = async () => {
          try {
            if (notificationsChangeStream) {
              await notificationsChangeStream.close().catch((err: Error) => 
                console.error('[SSE] Error closing previous notifications change stream:', err));
              notificationsChangeStream = null;
            }

            console.log('[SSE] Setting up MongoDB notifications change stream');
            notificationsChangeStream = db.collection('notifications').watch();
            console.log('[SSE] Notifications change stream initialized');

            notificationsChangeStream.on('change', async (changeEvent: ChangeStreamDocument) => {
              if (isControllerClosed) {
                console.log('[SSE] Controller is already closed, ignoring notifications change event');
                return;
              }

              // 挿入操作のみを処理
              if (changeEvent.operationType === 'insert') {
                try {
                  const notification = changeEvent.fullDocument;
                  if (notification) {
                    console.log('[SSE] New notification detected:', notification.message);
                    
                    // システムメッセージとして送信
                    if (!isControllerClosed) {
                      controller.enqueue(encoder.encode(
                        createSystemMessage(
                          notification.message,
                          notification.type || 'info'
                        )
                      ));
                    }
                  }
                } catch (error) {
                  console.error('[SSE] Error processing notification change:', error);
                }
              }
            });

            notificationsChangeStream.on('error', async (error: Error) => {
              console.error('[SSE] Notifications change stream error:', error);
              
              if (notificationsChangeStream) {
                await notificationsChangeStream.close().catch((err: Error) => 
                  console.error('[SSE] Error closing notifications change stream on error:', err));
                notificationsChangeStream = null;
              }
              
              // エラー発生時は一定時間後に再接続を試みる
              if (!isControllerClosed) {
                setTimeout(async () => {
                  if (!isControllerClosed) {
                    try {
                      await setupNotificationsChangeStream();
                      console.log('[SSE] Successfully reconnected to notifications change stream');
                    } catch (reconnectError) {
                      console.error('[SSE] Failed to reconnect to notifications change stream:', reconnectError);
                    }
                  }
                }, 5000); // 5秒後に再接続
              }
            });
          } catch (setupError) {
            console.error('[SSE] Error setting up notifications change stream:', setupError);
            // 通知ストリームのエラーは非致命的として扱い、メイン処理は継続
          }
        };

        // 両方のChangeStreamを初期化する関数
        const setupChangeStream = async () => {
          await setupSeatsChangeStream();
          await setupNotificationsChangeStream();
        };

        try {
          console.log('[SSE] Preparing to send initial data');
          const initialData = await fetchRoomData(db);
          console.log('[SSE] Sending initial data to client');
          controller.enqueue(encoder.encode(`data: ${JSON.stringify(initialData)}\n\n`));

          await setupChangeStream();

          // クリーンアップ関数
          const cleanup = () => {
            console.log('[SSE] Cleaning up resources...');
            
            // インターバルをクリア
            if (autoExitIntervalId) {
              clearInterval(autoExitIntervalId);
              autoExitIntervalId = null;
            }
            
            // ChangeStreamを閉じる
            if (seatsChangeStream) {
              seatsChangeStream.close().catch(err => console.error('[SSE] Error closing seats change stream during cleanup:', err));
              seatsChangeStream = null;
            }
            
            if (notificationsChangeStream) {
              notificationsChangeStream.close().catch(err => console.error('[SSE] Error closing notifications change stream during cleanup:', err));
              notificationsChangeStream = null;
            }
            
            // 接続を登録解除
            manager.unregisterConnection();
            console.log('[SSE] Cleanup completed');
          };
          
          // クリーンアップ関数を返す
          return cleanup;

        } catch (initError) {
          console.error('[SSE] Error during initialization:', initError);
          controller.enqueue(encoder.encode(
            createSystemMessage('初期化中にエラーが発生しました: ' + (initError as Error).message, 'error')
          ));
          controller.error(initError);
          return () => {
            manager.unregisterConnection();
            if (autoExitIntervalId) clearInterval(autoExitIntervalId);
            if (seatsChangeStream) seatsChangeStream.close().catch(console.error);
            if (notificationsChangeStream) notificationsChangeStream.close().catch(console.error);
          };
        }
      },
      
      cancel() {
        console.log('[SSE] Stream cancelled by client');
        isControllerClosed = true;
        
        // インターバルをクリア
        if (autoExitIntervalId) {
          clearInterval(autoExitIntervalId);
          autoExitIntervalId = null;
        }
        
        // ChangeStreamを閉じる
        if (seatsChangeStream) {
          seatsChangeStream.close().catch(err => console.error('[SSE] Error closing seats change stream during cancel:', err));
          seatsChangeStream = null;
        }
        
        if (notificationsChangeStream) {
          notificationsChangeStream.close().catch(err => console.error('[SSE] Error closing notifications change stream during cancel:', err));
          notificationsChangeStream = null;
        }
        
        // 接続を登録解除
        manager.unregisterConnection();
        console.log('[SSE] Stream cancellation cleanup completed');
      }
    });

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache, no-transform',
        'Connection': 'keep-alive',
      },
    });
  } catch (error) {
    console.error('[SSE] Unhandled error:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}
</file>

<file path="app/api/youtube-comments/route.ts">
import { NextResponse } from 'next/server';
// CommonJS形式のライブラリをインポート
import { getLiveChatMessages, getLiveChatId } from '@/lib/youtube';
import { detectCommand } from '@/lib/utils';

// インメモリキャッシュ（サーバー再起動時にリセットされます）
const liveChatIdCache: Record<string, string> = {};
// 処理済みコメントIDを保存するSet
const processedCommentIds = new Set<string>();

// コメントアイテムの型定義
interface ChatItem {
  id: string;
  snippet?: {
    displayMessage?: string;
    publishedAt?: string;
  };
  authorDetails?: {
    displayName?: string;
    profileImageUrl?: string;
    channelId?: string;  // チャンネルID（ユーザー識別用）
  };
}

/**
 * YouTubeライブコメント取得API
 * コメント取得のみを担当し、コマンド実行（DB更新）は行わない
 */
export async function GET() {
  try {
    // 環境変数から動画IDを取得
    console.log('[Comments API] コメント取得開始');
    const videoId = process.env.YOUTUBE_VIDEO_ID;
    // BOTのチャンネルID（環境変数から取得または直接指定）
    const botChannelId = process.env.YOUTUBE_BOT_CHANNEL_ID || '';
    
    if (!videoId) {
      return NextResponse.json({ error: 'YOUTUBE_VIDEO_IDが設定されていません' }, { status: 400 });
    }
    
    // キャッシュからliveChatIdを取得
    let liveChatId = liveChatIdCache[videoId];
    
    // キャッシュにない場合のみAPIを呼び出し
    if (!liveChatId) {
      console.log(`[Comments API] liveChatIdのキャッシュがないため、API経由で取得します (videoId: ${videoId})`);
      const fetchedLiveChatId = await getLiveChatId(videoId);
      
      if (fetchedLiveChatId) {
        // キャッシュに保存
        liveChatId = fetchedLiveChatId;
        console.log(`[Comments API] liveChatIdをキャッシュに保存します (videoId: ${videoId}, liveChatId: ${liveChatId})`);
        liveChatIdCache[videoId] = liveChatId;
      } else {
        return NextResponse.json({ error: 'ライブチャットIDが取得できませんでした' }, { status: 404 });
      }
    } else {
      console.log(`[Comments API] キャッシュからliveChatIdを取得しました (videoId: ${videoId}, liveChatId: ${liveChatId})`);
    }
    
    // ページトークンをクエリから取得（初回は null）
    const pageToken = null; // 注: 実装を簡単にするため固定
    
    // コメントデータを取得
    const chatData = await getLiveChatMessages(liveChatId, pageToken);
    
    // 検出済みコマンドの配列を準備
    const detectedCommands = [];
    
    // コメントごとにコマンド検出を行う
    for (const item of chatData.items || []) {
      const commentId = item.id;
      const commentText = item.snippet?.displayMessage || '';
      const authorName = item.authorDetails?.displayName;
      const authorId = item.authorDetails?.channelId;
      
      // 以下の条件でコメント処理をスキップ
      // 1. 投稿者情報がない
      // 2. 既に処理済みのコメント
      // 3. BOT自身の投稿
      if (!authorName || !authorId) continue; // 投稿者情報がない場合はスキップ
      if (processedCommentIds.has(commentId)) {
        console.log(`[Comments API] スキップ: 既に処理済みのコメント (ID: ${commentId})`);
        continue;
      }
      if (botChannelId && authorId === botChannelId) {
        console.log(`[Comments API] スキップ: BOT自身の投稿 (ID: ${commentId})`);
        // BOT自身の投稿はセットに追加して今後処理しないようにする
        processedCommentIds.add(commentId);
        continue;
      }
      
      console.log(`[Comments API] コメント検出: ${authorName} - ${commentText}`);
      
      // コマンド検出
      const { command, taskName } = detectCommand(commentText);
      
      if (command) {
        // コマンドを検出した場合、コマンド情報を配列に追加
        detectedCommands.push({
          command,
          taskName,
          authorName,
          authorId,
          commentId,
          commentText,
          profileImageUrl: item.authorDetails?.profileImageUrl
        });
        
        console.log(`[Comments API] コマンド検出: ${command} by ${authorName} (${taskName || 'タスクなし'})`);
        
        // 処理済みとしてマーク
        processedCommentIds.add(commentId);
      }
    }
    
    // 処理済みID数が多くなりすぎないように、最新の1000件だけを保持
    if (processedCommentIds.size > 1000) {
      const idsToKeep = Array.from(processedCommentIds).slice(-1000);
      processedCommentIds.clear();
      idsToKeep.forEach(id => processedCommentIds.add(id));
      console.log(`[Comments API] 処理済みIDキャッシュをクリーンアップしました (残り: ${processedCommentIds.size}件)`);
    }
    
    // コメントデータを整形 (UI表示用)
    const comments = chatData.items?.map((item: ChatItem) => ({
      id: item.id,
      author: item.authorDetails?.displayName || '不明なユーザー',
      profileImageUrl: item.authorDetails?.profileImageUrl,
      text: item.snippet?.displayMessage || '',
      publishedAt: item.snippet?.publishedAt
    })) || [];
    
    return NextResponse.json({
      comments,
      commands: detectedCommands,
      nextPageToken: chatData.nextPageToken,
      pollingIntervalMillis: chatData.pollingIntervalMillis || 5000
    });
    
  } catch (error) {
    console.error('[Comments API] YouTube API エラー:', error);
    return NextResponse.json({ error: 'コメントの取得に失敗しました' }, { status: 500 });
  }
}
</file>

<file path="app/page.tsx">
"use client";

import { useEffect, useState, useRef, useCallback } from "react";
import Room from "@/components/Room";
import { Card } from "@/components/ui/card";
import FocusRoom from "@/components/FocusRoom";
import Header from "@/components/Header";
import BGMPlayer from "@/components/BGMPlayer";
import NotificationTicker, { Notification } from "@/components/NotificationTicker";
import { toast } from "@/hooks/use-toast";
import { useSeatData, RoomData, Seat } from "@/hooks/use-seat-data";
import { useSSE, SSEConnectionState } from "@/hooks/use-sse";
import { AlertCircle, WifiOff, Loader2 } from "lucide-react";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { Command } from "@/lib/types";

// 通知の最大保持数
const MAX_NOTIFICATIONS = 20;

// SSEデータの型
interface SSEData {
  rooms: RoomData[];
  error?: string;
}

// システムメッセージの型
interface SystemMessagePayload {
  message: string;
  type: 'info' | 'warning' | 'error';
  timestamp: string; // ISO String
  id?: string; // バックエンドでユニークIDを付与するのが望ましい
}

export default function Home() {
  // 元のSSEから座席データを取得コードを無効化
  // const { rooms, isLoading, connectionState, refreshData } = useSeatData();
  
  // 独自のSSE接続を使用
  const [rooms, setRooms] = useState<RoomData[]>([]);
  const [notifications, setNotifications] = useState<Notification[]>([]);
  
  // コマンド処理の状態管理
  const [isProcessingCommand, setIsProcessingCommand] = useState(false);
  const processingCommandsRef = useRef<Set<string>>(new Set());

  // お知らせメッセージ処理
  const handleSystemMessage = useCallback((messagePayload: SystemMessagePayload) => {
    console.log('[Page] System Message Received:', messagePayload);
    const newNotification: Notification = {
      // バックエンドでIDが付与されていない場合、クライアントで生成
      id: messagePayload.id || `${Date.now()}-${Math.random()}`,
      message: messagePayload.message,
      timestamp: new Date(messagePayload.timestamp).getTime(),
      type: messagePayload.type,
    };

    setNotifications(prev => {
      // 重複チェック（同じメッセージが短時間で複数来ないように）
      // if (prev.length > 0 && prev[0].message === newNotification.message && (Date.now() - prev[0].timestamp < 2000)) {
      //   return prev;
      // }
      const updated = [newNotification, ...prev];
      return updated.slice(0, MAX_NOTIFICATIONS); // 最大件数制限
    });

    // トースト通知も表示
    toast({
      title: messagePayload.type === 'error' ? 'エラー' : 
             messagePayload.type === 'warning' ? '警告' : 'お知らせ',
      description: messagePayload.message,
      variant: messagePayload.type === 'error' ? 'destructive' : 'default',
    });
  }, []);

  // 座席データメッセージ処理
  const handleSeatDataMessage = useCallback((data: SSEData) => {
    if (data.rooms && Array.isArray(data.rooms)) {
      console.log(`[Page] Received ${data.rooms.length} rooms from SSE`);
      setRooms(data.rooms);
    } else if (data.error) {
      console.error('[Page] Error in SSE data:', data.error);
      // エラー通知はお知らせティッカーかトーストで表示
      handleSystemMessage({ 
        message: data.error, 
        type: 'error', 
        timestamp: new Date().toISOString()
      });
    }
  }, [handleSystemMessage]);

  // SSE接続フック
  const {
    connectionState,
    connect: refreshData,
  } = useSSE<SSEData>({
    endpoint: '/api/sse',
    onMessage: handleSeatDataMessage, // 座席データ用ハンドラ
    onSystemMessage: handleSystemMessage, // お知らせ用ハンドラ
    onConnect: () => {
      console.log('[Page] SSE connection established');
    },
    onDisconnect: () => {
      console.log('[Page] SSE connection closed');
    },
    onError: (error) => {
      console.error('[Page] SSE connection error:', error);
    },
    maxRetries: 5, // 最大再試行回数
  });

  // isLoading状態の計算
  const isLoading = connectionState === 'connecting' || connectionState === 'reconnecting';
  
  useEffect(() => {
    // YouTubeコメント取得のポーリング
    const fetchYoutubeComments = async () => {
      try {
        console.log('YouTubeコメントの取得を開始');
        const response = await fetch('/api/youtube-comments');
        
        if (!response.ok) {
          throw new Error(`YouTube API responded with status: ${response.status}`);
        }
        
        const data = await response.json();
        
        // コマンドを処理（あれば）
        if (data.commands && Array.isArray(data.commands) && data.commands.length > 0) {
          console.log(`${data.commands.length}件のコマンドを検出しました:`, data.commands);
          setIsProcessingCommand(true);
          
          // 各コマンドを処理
          for (const cmd of data.commands) {
            await processCommand(cmd);
          }
          
          setIsProcessingCommand(false);
        }
      } catch (error) {
        console.error('YouTubeコメント取得エラー:', error);
        toast({
          title: 'YouTubeコメント取得エラー',
          description: (error as Error).message,
          variant: 'destructive',
        });
      }
    };
    
    // コマンドをAPI経由で処理する関数
    const processCommand = async (command: Command) => {
      // 既に処理中のコマンドかチェック（二重実行防止）
      if (processingCommandsRef.current.has(command.commentId)) {
        console.log(`コマンドID ${command.commentId} は既に処理中のためスキップします`);
        return;
      }
      
      // 処理中としてマーク
      processingCommandsRef.current.add(command.commentId);
      
      try {
        console.log(`コマンド処理: ${command.command} by ${command.authorName}`);
        
        // コマンド実行APIをコール
        const response = await fetch('/api/commands', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            command: command.command,
            username: command.authorName,
            authorId: command.authorId,
            videoId: command.commentId.split('_')[0], // コメントIDからビデオID部分を抽出
            taskName: command.taskName
          }),
        });
        
        if (!response.ok) {
          throw new Error(`Command API responded with status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
          console.log(`コマンド ${command.command} の処理成功:`, result);
          
          // 成功時に通知表示
          if (command.command === 'work') {
            toast({
              title: `${command.authorName} が入室しました`,
              description: `タスク: ${command.taskName || '未設定'}`,
              variant: 'default',
            });
          } else if (command.command === 'finish') {
            toast({
              title: `${command.authorName} が退室しました`,
              variant: 'default',
            });
          }
        } else {
          console.error(`コマンド ${command.command} の処理に失敗:`, result.error);
          toast({
            title: 'コマンド処理エラー',
            description: result.error || '不明なエラーが発生しました',
            variant: 'destructive',
          });
        }
      } catch (error) {
        console.error('コマンド処理中にエラーが発生:', error);
        toast({
          title: 'コマンド処理エラー',
          description: (error as Error).message || 'サーバーとの通信中にエラーが発生しました',
          variant: 'destructive',
        });
      } finally {
        // 処理が完了したらセットから削除（一定時間後）
        setTimeout(() => {
          processingCommandsRef.current.delete(command.commentId);
        }, 10000); // 10秒後に削除
      }
    };
    
    // 初回実行
    fetchYoutubeComments();
    
    // 定期的に実行 (10秒ごと)
    const commentInterval = setInterval(fetchYoutubeComments, 10000);

    return () => {
      clearInterval(commentInterval);
    };
  }, []);

  // フォーカスルームとチャットルームを分離
  const focusRooms = rooms.filter(room => room.type === 'focus');
  const chatRooms = rooms.filter(room => room.type === 'chat' || !room.type);

  // 接続状態に応じたメッセージを表示
  const renderConnectionStatus = () => {
    switch (connectionState) {
      case 'connecting':
        return (
          <Alert className="mb-4 bg-yellow-50 border-yellow-200">
            <Loader2 className="h-4 w-4 animate-spin text-yellow-500" />
            <AlertTitle>接続中...</AlertTitle>
            <AlertDescription>サーバーに接続しています。しばらくお待ちください。</AlertDescription>
          </Alert>
        );
      case 'reconnecting':
        return (
          <Alert className="mb-4 bg-yellow-50 border-yellow-200">
            <Loader2 className="h-4 w-4 animate-spin text-yellow-500" />
            <AlertTitle>再接続中...</AlertTitle>
            <AlertDescription>
              サーバーとの接続が切断されました。再接続を試みています。
              <Button variant="outline" size="sm" className="ml-2 mt-2" onClick={refreshData}>
                今すぐ再接続
              </Button>
            </AlertDescription>
          </Alert>
        );
      case 'error':
        return (
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>接続エラー</AlertTitle>
            <AlertDescription>
              サーバーとの接続中にエラーが発生しました。
              <Button variant="outline" size="sm" className="ml-2 mt-2" onClick={refreshData}>
                再接続する
              </Button>
            </AlertDescription>
          </Alert>
        );
      case 'disconnected':
        return (
          <Alert className="mb-4 bg-gray-100 border-gray-200">
            <WifiOff className="h-4 w-4 text-gray-500" />
            <AlertTitle>切断されました</AlertTitle>
            <AlertDescription>
              サーバーとの接続が終了しました。
              <Button variant="outline" size="sm" className="ml-2 mt-2" onClick={refreshData}>
                再接続する
              </Button>
            </AlertDescription>
          </Alert>
        );
      default:
        return null;
    }
  };

  return (
    <main className="min-h-screen bg-[#505762] pt-16"> {/* pt-16 はヘッダー分 */}
      {/* ヘッダー */}
      <Header />

      {/* お知らせティッカー */}
      <NotificationTicker notifications={notifications} />

      {/* メインコンテンツ (pt をお知らせティッカーの高さ分追加) */}
      <div className="container mx-auto px-4 py-4 pt-10"> {/* pt-10 = ticker height */}
        {/* 接続状態表示 */}
        {renderConnectionStatus()}

        {/* 参加者情報 */}
        <Card className="mb-4 bg-[#f2f2f2]/95 shadow-md">
          <div className="p-4">
            <h2 className="font-medium text-lg mb-2">現在の参加者</h2>
            <div className="flex items-center gap-2 text-muted-foreground">
              <span>オンライン: {rooms.flatMap(room => room.seats?.filter(seat => seat.username) || []).length}人</span>
              {isProcessingCommand && (
                <span className="flex items-center text-sm text-blue-500">
                  <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                  コマンド処理中...
                </span>
              )}
            </div>
            <div className="flex flex-wrap gap-2 mt-3">
              <button className="px-3 py-1 bg-gray-200 rounded-full text-sm">すべて</button>
              <button className="px-3 py-1 bg-gray-200 rounded-full text-sm">ルーム1</button>
              <button className="px-3 py-1 bg-gray-200 rounded-full text-sm">ルーム2</button>
              <button className="px-3 py-1 bg-gray-200 rounded-full text-sm">ルーム3</button>
              <button className="px-3 py-1 bg-gray-200 rounded-full text-sm">ルーム4</button>
              <button className="px-3 py-1 bg-gray-200 rounded-full text-sm">ルーム5</button>
            </div>
          </div>
        </Card>
        
        {/* フォーカスルーム */}
        <div className="mb-4">
          {!isLoading && rooms.length > 0 && rooms.some(room => room.seats && room.seats.length > 0) ? (
            <FocusRoom
              seats={rooms.flatMap(room => room.seats || [])}
              roomId="focus-room"
            />
          ) : (
            <div className="bg-[#f2f2f2]/95 rounded-lg p-8 text-center text-gray-600">
              <Loader2 className="h-8 w-8 mx-auto mb-4 animate-spin text-gray-400" />
              座席情報を読み込み中...
            </div>
          )}
        </div>
        
        {/* BGM */}
        <BGMPlayer />

        {/* チャットルーム（非表示） */}
        <div className="hidden">
          {chatRooms.map(room => (
            <Room key={room.id} room={room} />
          ))}
        </div>
      </div>
      
      {/* フッター */}
      <footer className="py-6 border-t border-white/10 text-white/70">
        <div className="container mx-auto px-4 text-center text-sm">
          <p>© 2023 focuscraft - プライバシー・ポリシー・利用規約</p>
        </div>
      </footer>
    </main>
  );
}
</file>

<file path="components/Header.tsx">
"use client";

import { useEffect, useState } from "react";
import { format } from "date-fns";
import { ja } from "date-fns/locale";
import { Clock } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { usePomodoro } from "@/hooks/use-pomodoro";

// ヘッダー用に簡略化したタイマー情報
const POMODORO_MODES = {
  WORK: {
    name: "作業中",
    duration: 25 * 60, // 25分（秒単位）
    color: "bg-amber-500",
    bgColor: "bg-amber-500",
    textColor: "text-amber-600",
    badgeColor: "bg-amber-500"
  },
  BREAK: {
    name: "休憩中",
    duration: 5 * 60, // 5分（秒単位）
    color: "bg-green-500",
    bgColor: "bg-green-500",
    textColor: "text-green-600",
    badgeColor: "bg-green-500"
  },
  LONG_BREAK: {
    name: "長休憩",
    duration: 15 * 60, // 15分（秒単位）
    color: "bg-blue-500",
    bgColor: "bg-blue-500",
    textColor: "text-blue-600",
    badgeColor: "bg-blue-500"
  }
};

// フォーマット関数（PomodoroTimerと同じ実装）
const formatTime = (seconds: number): string => {
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
};

// 現在時刻に基づいてモードを判定する関数
const determineTimeModeFromCurrentTime = (now: Date): {mode: string, timeLeft: number} => {
  const minutes = now.getMinutes();
  const seconds = now.getSeconds();
  
  // 55-59分は休憩モード
  if (minutes >= 55 && minutes <= 59) {
    // 残り時間を計算（60分 - 現在分:秒）
    const nextHour = new Date(now);
    nextHour.setHours(nextHour.getHours() + 1, 0, 0, 0);
    const timeLeftMs = nextHour.getTime() - now.getTime();
    const timeLeftSec = Math.ceil(timeLeftMs / 1000);
    return { mode: "BREAK", timeLeft: timeLeftSec };
  }
  
  // 25-29分は休憩モード
  if (minutes >= 25 && minutes <= 29) {
    // 残り時間を計算（30分 - 現在分:秒）
    const nextHalfHour = new Date(now);
    nextHalfHour.setMinutes(30, 0, 0);
    const timeLeftMs = nextHalfHour.getTime() - now.getTime();
    const timeLeftSec = Math.ceil(timeLeftMs / 1000);
    return { mode: "BREAK", timeLeft: timeLeftSec };
  }
  
  // それ以外はフォーカスモード
  // 残り時間の計算（次の休憩時間までの時間）
  let targetMinute = 25;
  if (minutes >= 30 && minutes < 55) {
    targetMinute = 55;
  } else if (minutes >= 0 && minutes < 25) {
    targetMinute = 25;
  }
  
  const nextTarget = new Date(now);
  nextTarget.setMinutes(targetMinute, 0, 0);
  
  // 既に目標時間を過ぎている場合は次の時間帯に調整
  if (nextTarget.getTime() <= now.getTime()) {
    nextTarget.setHours(nextTarget.getHours() + 1);
  }
  
  const timeLeftMs = nextTarget.getTime() - now.getTime();
  const timeLeftSec = Math.ceil(timeLeftMs / 1000);
  
  return { mode: "WORK", timeLeft: timeLeftSec };
};

export default function Header() {
  const [mounted, setMounted] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());
  
  // ポモドーロタイマーの状態を取得
  const {
    mode,
    formattedTimeLeft,
    isActive,
    progress,
    currentMode
  } = usePomodoro();

  // マウント状態を設定
  useEffect(() => {
    setMounted(true);
    
    // 現在時刻を更新するタイマー
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);
    
    return () => {
      clearInterval(timer);
    };
  }, []);

  // 曜日と日付のフォーマット
  const dateString = format(currentTime, "yyyy年MM月dd日(E)", { locale: ja });
  
  // 時間のフォーマット - サーバー側とクライアント側で一致させるため、mounted状態に応じて出し分け
  const timeString = mounted ? format(currentTime, "HH:mm:ss") : "--:--:--";

  return (
    <header className="fixed top-0 w-full h-16 border-b bg-background/70 backdrop-blur-md z-10">
      <div className="container h-full flex items-center justify-between">
        <div className="flex items-center gap-4">
          <h1 className="font-bold text-xl">CONNECT</h1>
          <div className="hidden md:flex gap-6 text-sm text-muted-foreground">
            <a href="/" className="hover:text-foreground transition">メイン</a>
            <a href="#about" className="hover:text-foreground transition">About</a>
            <a href="#guide" className="hover:text-foreground transition">ガイド</a>
          </div>
        </div>
        
        <div className="flex items-center gap-4">
          {/* ポモドーロタイマー情報 */}
          <div className="hidden md:flex items-center gap-2">
            <Badge 
              variant="outline" 
              className={`${currentMode.color} text-white`}
            >
              {currentMode.name}
            </Badge>
            <span className="text-sm font-medium">{formattedTimeLeft}</span>
          </div>
          
          {/* 現在時刻表示 */}
          <div className="flex items-center gap-2 text-sm">
            <Clock className="h-4 w-4 text-muted-foreground" />
            <span className="font-medium">{timeString}</span>
            <span className="hidden md:inline text-xs text-muted-foreground">
              {dateString}
            </span>
          </div>
        </div>
      </div>
    </header>
  );
}
</file>

<file path="components/PomodoroTimer.tsx">
"use client";

import { Play, Pause, RefreshCw, Coffee, TimerIcon, Brain } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { 
  Card, 
  CardContent,
  CardFooter
} from "@/components/ui/card";
import { 
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Badge } from "@/components/ui/badge";
import { usePomodoro } from "@/hooks/use-pomodoro";
import { POMODORO_MODES, TimerMode } from "@/lib/store";

export default function PomodoroTimer() {
  const {
    mode,
    formattedTimeLeft,
    isActive,
    progress,
    workSessionsCompleted,
    currentMode,
    startTimer,
    pauseTimer,
    resetTimer,
    switchMode
  } = usePomodoro();

  return (
    <Card className="w-full max-w-sm mx-auto">
      <CardContent className="pt-6">
        <div className="flex justify-between items-center mb-4">
          <div className="flex items-center gap-2">
            <TimerIcon className="h-5 w-5 text-amber-500" />
            <h3 className="text-lg font-medium">ポモドーロタイマー</h3>
          </div>
          
          <Badge 
            variant="outline" 
            className={`${currentMode.color} text-white`}
          >
            {currentMode.name}
          </Badge>
        </div>
        
        <div className="text-center my-8">
          <div className="text-4xl font-bold tracking-tighter">
            {formattedTimeLeft}
          </div>
        </div>
        
        <Progress 
          value={progress} 
          className={`h-2 ${currentMode.color}`} 
        />
        
        <div className="flex justify-between mt-2 text-xs text-muted-foreground">
          <span>0:00</span>
          <span>
            {mode === 'WORK' ? '25:00' : mode === 'BREAK' ? '5:00' : '15:00'}
          </span>
        </div>

        <div className="flex justify-center gap-2 mt-6">
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => switchMode('WORK')}
                  className={`rounded-full ${mode === 'WORK' ? 'border-amber-500 border-2' : ''}`}
                >
                  <Brain className="h-4 w-4 text-amber-500" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>作業モード (25分)</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
          
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => switchMode('BREAK')}
                  className={`rounded-full ${mode === 'BREAK' ? 'border-green-500 border-2' : ''}`}
                >
                  <Coffee className="h-4 w-4 text-green-500" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>休憩モード (5分)</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
      </CardContent>
      
      <CardFooter className="flex justify-between pt-0">
        <div className="text-sm text-muted-foreground">
          作業完了: <span className="font-medium">{workSessionsCompleted}回</span>
        </div>
        
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="icon"
            onClick={resetTimer}
          >
            <RefreshCw className="h-4 w-4" />
          </Button>
          
          {isActive ? (
            <Button
              variant="outline"
              size="icon"
              onClick={pauseTimer}
            >
              <Pause className="h-4 w-4" />
            </Button>
          ) : (
            <Button
              variant="default"
              size="icon"
              onClick={startTimer}
            >
              <Play className="h-4 w-4" />
            </Button>
          )}
        </div>
      </CardFooter>
    </Card>
  );
}
</file>

<file path="components/UserCard.tsx">
import Image from "next/image";
import { calculateElapsedTime, getElapsedTimeStyle } from "@/lib/client-utils";
import { useState, useEffect } from "react";
import AutoExitStatus from "./AutoExitStatus";
import { User } from "lucide-react";

interface UserCardProps {
  user: {
    id: string;
    name: string;
    avatar?: string;
    task?: string | null;
    autoExitScheduled?: Date | string | null;
    enterTime?: Date | string | null;
    profileImageUrl?: string | null;
  };
  roomId?: string;
  position?: number;
}

export default function UserCard({ user, roomId, position }: UserCardProps) {
  // Hydration Errorを防ぐためにクライアントサイドでのみ計算する
  const [mounted, setMounted] = useState(false);
  const [displayTime, setDisplayTime] = useState<string>("0分");
  const [timeStyle, setTimeStyle] = useState<string>("text-blue-400");
  
  useEffect(() => {
    setMounted(true);
    
    // 経過時間を更新する関数
    const updateElapsedTime = () => {
      if (user.enterTime) {
        const elapsedTime = calculateElapsedTime(user.enterTime);
        const style = getElapsedTimeStyle(user.enterTime);
        setDisplayTime(elapsedTime || "0分");
        setTimeStyle(style || "text-blue-400");
      }
    };
    
    // 初回計算
    updateElapsedTime();
    
    // 1分ごとに経過時間を更新するタイマーを設定
    const intervalId = setInterval(updateElapsedTime, 60000); // 60秒 = 1分
    
    // コンポーネントのアンマウント時にタイマーをクリア
    return () => clearInterval(intervalId);
  }, [user.enterTime]); // user.enterTimeが変更されたときに再実行
  
  return (
    <div className="bg-white rounded-lg p-3 flex flex-col shadow-sm">
      <div className="flex items-center gap-2 mb-1">
        {user.profileImageUrl ? (
          <div className="w-8 h-8 rounded-full overflow-hidden flex-shrink-0">
            <Image 
              src={user.profileImageUrl} 
              alt={user.name} 
              width={32} 
              height={32}
              className="w-full h-full object-cover"
            />
          </div>
        ) : (
          <div className="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center flex-shrink-0">
            <User className="h-5 w-5 text-gray-500" />
          </div>
        )}
        <div className="flex flex-col flex-grow min-w-0">
          <h4 className="font-medium text-gray-800 truncate">{user.name}</h4>
          <span className={`text-xs font-semibold ${mounted ? timeStyle : "text-blue-400"}`}>
            経過: {displayTime}
          </span>
        </div>
      </div>
      
      <div className="flex justify-between items-center mt-1 pl-10">
        <p className="text-xs text-gray-600 truncate">{user.task || '作業中'}</p>
        
        {/* 自動退室時間が設定されている場合、コンパクトモードで表示 */}
        {user.autoExitScheduled && (
          <AutoExitStatus 
            scheduledTime={typeof user.autoExitScheduled === 'string' 
              ? user.autoExitScheduled 
              : user.autoExitScheduled instanceof Date 
                ? user.autoExitScheduled.toISOString() 
                : null}
            seatId={user.id}
            roomId={roomId}
            position={position}
            isCompact={true}
          />
        )}
      </div>
    </div>
  );
}
</file>

<file path="lib/youtube.ts">
import { google, youtube_v3 } from 'googleapis';
import { Db } from 'mongodb';
import { messageTemplates } from './messages';
import { scheduleAutoExit } from './autoExit';

if (!process.env.YOUTUBE_API_KEY) {
  throw new Error('Missing YOUTUBE_API_KEY environment variable');
}

// YouTube API の型定義
export interface Author {
  displayName: string;
  profileImageUrl: string;
  channelId: string;
}

export interface MessageSnippet {
  displayMessage: string;
  publishedAt: string;
}

export interface ChatItem {
  id: string;
  snippet: MessageSnippet;
  authorDetails: Author;
}

export interface ChatResponse {
  items: ChatItem[];
  nextPageToken: string;
  pollingIntervalMillis: number;
}

// API リクエストエラーの型
export class YouTubeAPIError extends Error {
  status?: number;
  code?: string;
  
  constructor(message: string, status?: number, code?: string) {
    super(message);
    this.name = 'YouTubeAPIError';
    this.status = status;
    this.code = code;
  }
}

// API Keyを使ったYouTube APIの初期化
const youtubeWithApiKey = google.youtube({
  version: 'v3',
  auth: process.env.YOUTUBE_API_KEY
});

// OAuth2クライアントの設定（OAuth認証が設定されている場合のみ使用）
let oauth2Client: any;
let youtubeWithOAuth: youtube_v3.Youtube | null = null;

if (process.env.YOUTUBE_CLIENT_ID && process.env.YOUTUBE_CLIENT_SECRET && process.env.YOUTUBE_REDIRECT_URL) {
  oauth2Client = new google.auth.OAuth2(
    process.env.YOUTUBE_CLIENT_ID,
    process.env.YOUTUBE_CLIENT_SECRET,
    process.env.YOUTUBE_REDIRECT_URL
  );

  // リフレッシュトークンの設定（存在する場合）
  if (process.env.YOUTUBE_REFRESH_TOKEN) {
    oauth2Client.setCredentials({
      refresh_token: process.env.YOUTUBE_REFRESH_TOKEN
    });
  }

  // OAuth2認証を使用したYouTube APIの初期化
  youtubeWithOAuth = google.youtube({
    version: 'v3',
    auth: oauth2Client
  });
}

/**
 * ライブチャットIDを取得する（API Keyのみで実行可能）
 * @param videoId 動画ID
 * @returns ライブチャットID
 */
export async function getLiveChatId(videoId: string): Promise<string> {
  try {
    const response = await youtubeWithApiKey.videos.list({
      part: ['liveStreamingDetails'],
      id: [videoId]
    });

    const video = response.data.items && response.data.items[0];
    if (!video || !video.liveStreamingDetails || !video.liveStreamingDetails.activeLiveChatId) {
      throw new Error('ライブチャットIDが見つかりませんでした');
    }

    return video.liveStreamingDetails.activeLiveChatId;
  } catch (error) {
    console.error('ライブチャットID取得エラー:', error);
    throw new Error('ライブチャットIDの取得に失敗しました');
  }
}

/**
 * YouTubeのライブチャットにメッセージを送信する（OAuth2認証が必要）
 * @param liveChatId ライブチャットID
 * @param message 送信するメッセージ
 * @returns 送信結果
 */
export async function sendChatMessage(liveChatId: string, message: string) {
  try {
    // OAuth2認証が設定されていない場合はログのみ出力
    if (!youtubeWithOAuth) {
      console.log('OAuth2認証が設定されていないため、メッセージ送信をスキップします:', message);
      return { success: false, message: 'OAuth2認証が設定されていません' };
    }

    const response = await youtubeWithOAuth.liveChatMessages.insert({
      part: ['snippet'],
      requestBody: {
        snippet: {
          liveChatId: liveChatId,
          type: 'textMessageEvent',
          textMessageDetails: {
            messageText: message
          }
        }
      }
    });

    console.log('メッセージ送信成功:', message);
    return response.data;
  } catch (error) {
    console.error('メッセージ送信エラー:', error);
    throw new Error('メッセージの送信に失敗しました');
  }
}

/**
 * ライブチャットのメッセージを取得する（API Keyのみで実行可能）
 * @param liveChatId ライブチャットID
 * @param pageToken ページトークン（続きを取得する場合）
 * @returns チャットメッセージのレスポンス
 */
export async function getLiveChatMessages(liveChatId: string, pageToken: string | null): Promise<ChatResponse> {
  try {
    const response = await youtubeWithApiKey.liveChatMessages.list({
      part: ['snippet', 'authorDetails'],
      liveChatId,
      pageToken: pageToken || undefined,
    });
    return response.data as ChatResponse;
  } catch (error: any) {
    console.error('Error getting live chat messages:', error?.response?.data || error);
    throw new YouTubeAPIError(
      `Failed to get live chat messages: ${error?.message || 'Unknown error'}`,
      error?.response?.status,
      error?.code
    );
  }
}

/**
 * キャッシュされたライブチャットIDを保持するオブジェクト
 * メモリ内キャッシュとして機能（サーバー再起動でリセット）
 */
export const liveChatIdCache: Record<string, string> = {};

/**
 * YouTubeコメントを処理してコマンドとして実行する
 * @param commentText コメントテキスト
 * @param username ユーザー名
 * @param authorId 著者ID (YouTubeチャンネルID)
 * @param db MongoDBインスタンス
 * @param videoId ビデオID
 * @param profileImageUrl プロフィール画像URL
 * @returns 処理結果
 */
export async function processYouTubeComment(
  commentText: string,
  username: string,
  authorId: string,
  db: Db,
  videoId?: string,
  profileImageUrl?: string
) {
  console.log(`[YouTube] Processing comment from ${username}: ${commentText}`);
  // コマンドとタスク名を抽出
  const trimmedComment = commentText.trim();
  let command = '';
  let taskName = '';

  if (trimmedComment.startsWith('/work ')) {
    command = 'work';
    taskName = trimmedComment.substring(6).trim();
  } else if (trimmedComment === '/finish') {
    command = 'finish';
  } else {
    // コマンドでない場合は処理しない
    return { success: false, message: 'コメントはコマンドではありません' };
  }

  // コマンド処理を実行
  try {
    const result = await processCommand(command, username, db, videoId, undefined, authorId, taskName, profileImageUrl);
    return { success: true, result };
  } catch (error) {
    console.error(`[YouTube] Error processing comment as command:`, error);
    return { success: false, error: (error as Error).message };
  }
}

/**
 * コマンドを処理する共通関数
 * YouTube APIとWeb UIの両方から使用される
 * 
 * @param command コマンド文字列（work, finishなど）
 * @param username ユーザー名
 * @param db MongoDBインスタンス
 * @param videoId オプションのYouTubeビデオID
 * @param liveChatId オプションのライブチャットID
 * @param authorId オプションのユーザーID（YouTubeチャンネルIDなど）
 * @param taskName オプションのタスク名（workコマンド用）
 * @param profileImageUrl オプションのプロフィール画像URL
 * @returns 処理結果のオブジェクト
 */
export async function processCommand(
  command: string,
  username: string,
  db: Db,
  videoId?: string,
  liveChatId?: string,
  authorId?: string,
  taskName?: string,
  profileImageUrl?: string
) {
  console.log(`[Command] Processing command: ${command} from ${username}`);
  const seatsCollection = db.collection('seats');
  const notificationsCollection = db.collection('notifications');
  
  // ライブチャットIDが指定されていない場合で、videoIdが指定されている場合、取得を試みる
  if (!liveChatId && videoId) {
    try {
      liveChatId = await getLiveChatId(videoId);
    } catch (error) {
      console.warn('[Command] Failed to get liveChatId, notifications will be disabled:', error);
      // 通知は送れなくても処理は続行
    }
  }
  
  // OAuth認証が設定されているかをチェック
  const isOAuthConfigured = !!youtubeWithOAuth;
  
  // システムメッセージをMongoDBに保存する関数（SSEで検知される）
  const saveSystemMessage = async (message: string, type: 'info' | 'warning' | 'error' = 'info') => {
    try {
      await notificationsCollection.insertOne({
        message,
        type,
        timestamp: new Date(),
        id: `${Date.now()}-${Math.random()}`, // ユニークID
        isRead: false
      });
      console.log(`[Command] System message saved: ${message}`);
    } catch (err) {
      console.error('[Command] Failed to save system message:', err);
    }
  };
  
  // コマンドタイプに応じた処理
  if (command === 'work') {
    if (!taskName) {
      throw new Error('タスク名が指定されていません');
    }
    
    console.log(`[Command] /work command execution: ${username} - Task: ${taskName}`);
    
    // ユーザーIDが指定されている場合、それを使用してユーザーを識別
    // 指定されていない場合は、ユーザー名で識別
    const userQuery = authorId ? { authorId } : { username };
    
    // ユーザーが既に入室済みか確認
    const existingSeat = await seatsCollection.findOne(userQuery);
    
    const enterTime = new Date();
    
    if (existingSeat) {
      // 既に入室済みの場合：タスクと時間を更新
      await seatsCollection.updateOne(
        { _id: existingSeat._id },
        { 
          $set: { 
            task: taskName, 
            enterTime: enterTime, 
            username: username, // 名前が変わっている可能性も考慮
            authorId: authorId, // IDも更新（指定されている場合）
            profileImageUrl: profileImageUrl, // プロフィール画像も更新
            timestamp: new Date()
          } 
        }
      );
      
      // 自動退室時間を設定
      await scheduleAutoExit(db, existingSeat.room_id, existingSeat.position, 2);
      
      console.log(`[Command] Updated task for ${username} to: ${taskName}`);
      
      // タスク更新メッセージを送信（OAuth認証が設定されている場合のみ）
      if (liveChatId && isOAuthConfigured) {
        try {
          await sendChatMessage(liveChatId, messageTemplates.taskUpdated(username, taskName));
        } catch (error) {
          console.warn('[Command] Failed to send message, continuing without notification:', error);
          // メッセージ送信に失敗しても処理は続行
        }
      }
      
      // システムメッセージを保存（SSEで検知される）
      await saveSystemMessage(`${username}さんが「${taskName}」に作業内容を変更しました`, 'info');
      
      return {
        success: true,
        action: 'update',
        seat: {
          roomId: existingSeat.room_id,
          position: existingSeat.position,
          username: username,
          task: taskName
        }
      };
    } else {
      // 新規入室の場合：空いている座席を探す
      const availableSeat = await seatsCollection.findOneAndUpdate(
        { username: null }, // 空席を探す
        { 
          $set: {
            username: username,
            authorId: authorId, // IDが指定されている場合は保存
            task: taskName,
            enterTime: enterTime,
            profileImageUrl: profileImageUrl, // プロフィール画像を保存
            timestamp: new Date()
          }
        },
        { sort: { position: 1 }, returnDocument: 'after' } // position昇順で最初の空席を取得
      );
      
      if (availableSeat.value) {
        // 自動退室時間を設定
        await scheduleAutoExit(db, availableSeat.value.room_id, availableSeat.value.position, 2);
        
        console.log(`[Command] ${username} entered seat ${availableSeat.value.position} (Task: ${taskName})`);
        
        // 入室メッセージを送信（OAuth認証が設定されている場合のみ）
        if (liveChatId && isOAuthConfigured) {
          try {
            await sendChatMessage(
              liveChatId, 
              messageTemplates.seatTaken(username, availableSeat.value.room_id, availableSeat.value.position, taskName)
            );
          } catch (error) {
            console.warn('[Command] Failed to send message, continuing without notification:', error);
            // メッセージ送信に失敗しても処理は続行
          }
        }
        
        // システムメッセージを保存（SSEで検知される）
        await saveSystemMessage(`${username}さんが「${taskName}」で入室しました`, 'info');
        
        return {
          success: true,
          action: 'enter',
          seat: {
            roomId: availableSeat.value.room_id,
            position: availableSeat.value.position,
            username: username,
            task: taskName
          }
        };
      } else {
        // 空席がない場合は新しい座席を作成する
        // 最大の座席番号と部屋番号を取得
        const lastSeat = await seatsCollection.find().sort({ position: -1 }).limit(1).toArray();
        const lastRoomSeat = await seatsCollection.find().sort({ room_id: -1 }).limit(1).toArray();
        
        const newPosition = lastSeat.length > 0 ? lastSeat[0].position + 1 : 1;
        const newRoomId = lastRoomSeat.length > 0 ? lastRoomSeat[0].room_id : 1;
        
        // 新しい座席を作成
        const newSeat = {
          position: newPosition,
          room_id: newRoomId,
          username: username,
          authorId: authorId,
          task: taskName,
          enterTime: enterTime,
          profileImageUrl: profileImageUrl, // プロフィール画像を保存
          timestamp: new Date()
        };
        
        const insertResult = await seatsCollection.insertOne(newSeat);
        
        // 自動退室時間を設定
        await scheduleAutoExit(db, newRoomId, newPosition, 2);
        
        console.log(`[Command] Created new seat: Room ${newRoomId}, Position ${newPosition} for ${username} (Task: ${taskName})`);
        
        // 入室メッセージを送信（OAuth認証が設定されている場合のみ）
        if (liveChatId && isOAuthConfigured) {
          try {
            await sendChatMessage(
              liveChatId, 
              messageTemplates.seatTaken(username, newRoomId, newPosition, taskName)
            );
          } catch (error) {
            console.warn('[Command] Failed to send message, continuing without notification:', error);
            // メッセージ送信に失敗しても処理は続行
          }
        }
        
        // システムメッセージを保存（SSEで検知される）
        await saveSystemMessage(`${username}さんが「${taskName}」で新しい座席を作成しました`, 'info');
        
        return {
          success: true,
          action: 'create',
          seat: {
            roomId: newRoomId,
            position: newPosition,
            username: username,
            task: taskName,
            id: insertResult.insertedId.toString()
          }
        };
      }
    }
  } else if (command === 'finish') {
    console.log(`[Command] /finish command execution: ${username}`);
    
    // ユーザーIDかユーザー名で座席を検索
    const userQuery = authorId ? { authorId } : { username };
    
    try {
      // ユーザーの座席を検索
      const result = await seatsCollection.findOneAndUpdate(
        userQuery,
        { 
          $set: { 
            username: null, 
            authorId: null, 
            task: null, 
            enterTime: null, 
            autoExitScheduled: null,
            profileImageUrl: null, // プロフィール画像情報もクリア
            timestamp: new Date()
          } 
        },
        { returnDocument: 'before' } // 更新前の情報を取得
      );
      
      if (result.value && result.value.username) {
        console.log(`[Command] ${username} has left the seat`);
        
        // 退室メッセージを送信（OAuth認証が設定されている場合のみ）
        if (liveChatId && isOAuthConfigured) {
          try {
            await sendChatMessage(
              liveChatId, 
              messageTemplates.seatVacated(username, result.value.room_id, result.value.position)
            );
          } catch (error) {
            console.warn('[Command] Failed to send message, continuing without notification:', error);
            // メッセージ送信に失敗しても処理は続行
          }
        }
        
        // システムメッセージを保存（SSEで検知される）
        await saveSystemMessage(`${username}さんが退室しました`, 'info');
        
        return {
          success: true,
          action: 'exit',
          seat: {
            roomId: result.value.room_id,
            position: result.value.position,
            previousUsername: username
          }
        };
      } else {
        console.log(`[Command] ${username} was not seated`);
        // 入室していない場合は特に何もしない
        return {
          success: true,
          action: 'none',
          message: 'ユーザーは入室していませんでした'
        };
      }
    } catch (error) {
      console.error(`[Command] Error while processing exit for ${username}:`, error);
      throw new Error('退室処理に失敗しました: ' + (error as Error).message);
    }
  } else {
    console.log(`[Command] Unsupported command: ${command}`);
    throw new Error('対応していないコマンドです');
  }
}
</file>

<file path="scripts/test-mongodb.ts">
// MongoDB接続テスト用スクリプト
import { MongoClient } from 'mongodb';
import * as dotenv from 'dotenv';
import * as path from 'path';

// .env.localを読み込み
dotenv.config({ path: path.resolve(__dirname, '../.env.local') });

async function testMongoDBConnection() {
  if (!process.env.MONGODB_URI) {
    console.error('環境変数MONGODB_URIが設定されていません');
    process.exit(1);
  }

  const client = new MongoClient(process.env.MONGODB_URI);

  try {
    console.log('MongoDB接続テストを開始します...');
    
    // データベースに接続
    await client.connect();
    console.log('MongoDB接続成功！');
    
    // データベース情報を表示
    const db = client.db('coworking');
    const collections = await db.listCollections().toArray();
    
    console.log('データベース: coworking');
    console.log('コレクション一覧:');
    collections.forEach((collection, index) => {
      console.log(`${index + 1}. ${collection.name}`);
    });
    
    // roomsコレクションのデータ取得
    const rooms = await db.collection('rooms').find().toArray();
    console.log('\nルーム数:', rooms.length);
    console.log('ルーム一覧:', rooms.map(room => room._id));
    
    // seatsコレクションのデータ取得
    const seats = await db.collection('seats').find().toArray();
    console.log('\n座席数:', seats.length);
    console.log('最初の座席データ例:', JSON.stringify(seats[0] || 'データなし', null, 2));

    // 座席数とユーザー数を確認
    const userSeats = await db.collection('seats').find({ username: { $ne: null } }).toArray();
    console.log('\n現在利用中の座席数:', userSeats.length);
    if (userSeats.length > 0) {
      console.log('入室中のユーザー一覧:');
      userSeats.forEach((seat, index) => {
        const enterTime = seat.enterTime ? new Date(seat.enterTime).toLocaleString() : '不明';
        const exitTime = seat.autoExitScheduled ? new Date(seat.autoExitScheduled).toLocaleString() : '不明';
        console.log(`${index + 1}. ${seat.username} - 部屋: ${seat.room_id}, 座席: ${seat.position}, 入室: ${enterTime}, 自動退室: ${exitTime}`);
      });
    }

    console.log('\nMongoDBテスト完了');
  } catch (error) {
    console.error('MongoDB接続エラー:', error);
  } finally {
    await client.close();
  }
}

// スクリプト実行
testMongoDBConnection();
</file>

<file path=".eslintrc.json">
{
  "extends": [
    "next/core-web-vitals",
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "react", "react-hooks"],
  "rules": {
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",
    "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
    "no-console": ["warn", { "allow": ["warn", "error"] }]
  }
}
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: { unoptimized: true },
};

module.exports = nextConfig;
</file>

<file path="package.json">
{
  "name": "nextjs",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "lint:fix": "next lint --fix",
    "format": "prettier --write \"**/*.{js,ts,tsx,md,json}\"",
    "db:indexes": "npx ts-node scripts/create-indexes.ts",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@next/swc-wasm-nodejs": "13.5.1",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.2",
    "@types/node": "20.6.2",
    "@types/react": "18.2.22",
    "@types/react-dom": "18.2.7",
    "autoprefixer": "10.4.15",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "dotenv": "^16.4.7",
    "embla-carousel-react": "^8.3.0",
    "eslint": "8.49.0",
    "eslint-config-next": "13.5.1",
    "framer-motion": "^12.6.3",
    "googleapis": "^129.0.0",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.446.0",
    "mongodb": "^4.17.2",
    "next": "13.5.1",
    "next-themes": "^0.3.0",
    "postcss": "8.4.30",
    "react": "18.2.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "18.2.0",
    "react-hook-form": "^7.53.0",
    "react-resizable-panels": "^2.1.3",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss": "3.3.3",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "5.2.2",
    "vaul": "^0.9.9",
    "zod": "^3.23.8",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^6.4.2",
    "@testing-library/react": "^14.2.1",
    "@types/jest": "^29.5.12",
    "@typescript-eslint/eslint-plugin": "^8.29.0",
    "@typescript-eslint/parser": "^8.29.0",
    "eslint-config-prettier": "^10.1.1",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "prettier": "^3.5.3",
    "ts-node": "^10.9.2"
  }
}
</file>

<file path="refactoring-tasks.md">
# リファクタリングタスクリスト

**現在の作業フェーズ:** フェーズ1 - コアロジックの整理と責務分離

## フェーズ0 - 基盤整備（完了）

- [x] Jest / React Testing Libraryの統合
- [x] 基本的なテストカバレッジレポートの設定
- [x] ESLint / Prettierルールの統一とCIでのチェック
- [x] `lib/youtube.js` → `lib/youtube.ts` への完全な移行
- [x] 不要な`.js`ファイルの削除
- [x] `scripts`内の`.js`ファイルを可能な範囲で`.ts`に移行
- [x] `package.json`の不要な依存関係をレビュー（問題なしを確認）
- [x] 依存関係バージョンの更新検討（大きな問題なしを確認）

## フェーズ1 - コアロジックの整理と責務分離

- [x] Zustandによる状態管理導入
  - [x] Pomodoroタイマーロジックのリファクタリング

- [x] YouTube関連の責務分離
  - [x] コメント処理とコマンド実行の分離
  - [x] APIエンドポイントの再設計
  - [x] エラーハンドリングの強化

- [x] SSE（Server-Sent Events）通信の改善
  - [x] 複数コネクション対応の改善
  - [x] エラーハンドリングの強化
  - [x] 再接続ロジックの実装
  - [x] 接続断からの回復機能の実装
  - [x] クライアント側の再接続処理の改善

- [x] 自動退室ロジックの整理
  - [x] バックエンドのロジックをライブラリに集約
  - [x] フロントエンドの表示ロジックを分離

## フェーズ2 - プレゼンテーション層の整理

- [ ] コンポーネントの責務分離
  - [ ] 表示関連コンポーネントの分割
  - [ ] ロジック部分とUIの分離
  - [ ] Propsの型定義強化

- [ ] シャドーCNとTailwindの最適化
  - [ ] スタイルシステムの統一
  - [ ] コンポーネント間の一貫性確保

- [ ] アクセシビリティの改善
  - [ ] ARIA属性の適切な利用
  - [ ] キーボードナビゲーションの改善

## フェーズ3 - パフォーマンス最適化

- [ ] レンダリングパフォーマンスの最適化
  - [ ] 不要なレンダリングの削減
  - [ ] メモ化による最適化の検討

- [ ] バンドルサイズの最適化
  - [ ] 使用していないコードの削除
  - [ ] 重複コードの統合
  - [ ] コードスプリッティングの検討

- [ ] API通信の最適化
  - [ ] データフェッチングの統合
  - [ ] キャッシュ戦略の実装

## フェーズ 4: テストカバレッジ向上

### ユニットテスト
- [ ] `lib/utils.ts` 内のヘルパー関数のユニットテストを作成・拡充
- [ ] `lib/messages.ts` のテンプレート生成関数のユニットテストを作成
- [ ] `UserCard`, `PomodoroTimer` など主要コンポーネントの表示ロジックに関するユニットテストを作成

### インテグレーションテスト
- [ ] APIエンドポイントのテスト環境（Mock Service Worker or Supertest）をセットアップ
- [ ] コマンド処理APIのインテグレーションテストを作成
- [ ] SSE接続とデータフローに関するインテグレーションテストを作成
- [ ] DB操作を含むシナリオのインテグレーションテストを作成
- [ ] フロントエンドとバックエンドを連携させたテストシナリオ（コマンド送信 → UI更新など）を作成

### E2Eテスト (オプション)
- [ ] PlaywrightなどのE2Eテストフレームワークを導入
- [ ] 主要ユーザーフロー（入室、退室、自動退室）のE2Eテストを作成

## フェーズ 5: ドキュメントとクリーンアップ

### ドキュメント更新
- [ ] `docs/` 内のドキュメント（特に `refactoring-strategy.md` や関連文書）をリファクタリング内容に合わせて更新
- [ ] コード内のコメント（JSDoc/TSDoc）を充実させる (特にAPI、複雑なロジック)

### コードクリーンアップ
- [ ] 未使用の変数、関数、インポート、コンポーネントを特定し削除
- [ ] `console.log` 等のデバッグコードを削除または適切なロガーに置き換え
- [ ] `.env.example` ファイルを作成・更新し、必要な環境変数を明記
</file>

</files>
